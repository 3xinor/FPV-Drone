
Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003098  08003098  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003098  08003098  00004098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030a0  080030a0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a0  080030a0  000040a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030a4  080030a4  000040a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000000c  080030b4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080030b4  0000535c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b47  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d19  00000000  00000000  0000eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  000108a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000846  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163e5  00000000  00000000  00011bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc5c  00000000  00000000  00027f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1db  00000000  00000000  00034bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfdd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  000bfe18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c2a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003060 	.word	0x08003060

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003060 	.word	0x08003060

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_DMA_Init+0x6c>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a17      	ldr	r2, [pc, #92]	@ (8000530 <MX_DMA_Init+0x6c>)
 80004d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_DMA_Init+0x6c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	200c      	movs	r0, #12
 80004ec:	f000 ff8f 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80004f0:	200c      	movs	r0, #12
 80004f2:	f000 ffa8 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200e      	movs	r0, #14
 80004fc:	f000 ff87 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000500:	200e      	movs	r0, #14
 8000502:	f000 ffa0 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	200f      	movs	r0, #15
 800050c:	f000 ff7f 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000510:	200f      	movs	r0, #15
 8000512:	f000 ff98 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	2010      	movs	r0, #16
 800051c:	f000 ff77 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000520:	2010      	movs	r0, #16
 8000522:	f000 ff90 	bl	8001446 <HAL_NVIC_EnableIRQ>

}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800

08000534 <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Function Definitions */

void dshot_init(dshot_type_e dshot_type) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f839 	bl	80005b8 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000546:	f000 f8d9 	bl	80006fc <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800054a:	f000 f8f5 	bl	8000738 <dshot_start_pwm>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <dshot_tx>:

void dshot_tx(uint16_t* motor_values) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_values);
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f968 	bl	8000834 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000564:	f000 f992 	bl	800088c <dshot_dma_start>
	dshot_enable_dma_request();
 8000568:	f000 f9c8 	bl	80008fc <dshot_enable_dma_request>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <dshot_choose_type>:

/* Static Function Definitions */

static uint32_t dshot_choose_type(dshot_type_e dshot_type) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	switch(dshot_type) {
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d00a      	beq.n	800059a <dshot_choose_type+0x26>
 8000584:	2b02      	cmp	r3, #2
 8000586:	dc0a      	bgt.n	800059e <dshot_choose_type+0x2a>
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <dshot_choose_type+0x1e>
 800058c:	2b01      	cmp	r3, #1
 800058e:	d002      	beq.n	8000596 <dshot_choose_type+0x22>
 8000590:	e005      	b.n	800059e <dshot_choose_type+0x2a>
	case DSHOT150:
		return (uint32_t)DSHOT150_HZ;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <dshot_choose_type+0x38>)
 8000594:	e004      	b.n	80005a0 <dshot_choose_type+0x2c>
	case DSHOT300:
		return (uint32_t)DSHOT300_HZ;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <dshot_choose_type+0x3c>)
 8000598:	e002      	b.n	80005a0 <dshot_choose_type+0x2c>
	case DSHOT600:
		return (uint32_t)DSHOT600_HZ;
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <dshot_choose_type+0x40>)
 800059c:	e000      	b.n	80005a0 <dshot_choose_type+0x2c>
	default:
		return (uint32_t)0;
 800059e:	2300      	movs	r3, #0
	}
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	002dc6c0 	.word	0x002dc6c0
 80005b0:	005b8d80 	.word	0x005b8d80
 80005b4:	00b71b00 	.word	0x00b71b00

080005b8 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	ed2d 8b02 	vpush	{d8}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clk = TIMER_CLOCK; // Might need to do additional clock configurations
 80005c6:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <dshot_set_timer+0xac>)
 80005c8:	60fb      	str	r3, [r7, #12]

	// Calculate pre-scaler by dshot_type
	dshot_prescaler = lrintf((float)timer_clk / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	ee07 3a90 	vmov	s15, r3
 80005d0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffcc 	bl	8000574 <dshot_choose_type>
 80005dc:	ee07 0a90 	vmov	s15, r0
 80005e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005e4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80005e8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000668 <dshot_set_timer+0xb0>
 80005ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005f0:	eeb0 0a67 	vmov.f32	s0, s15
 80005f4:	f002 fcf4 	bl	8002fe0 <lrintf>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	3b01      	subs	r3, #1
 80005fe:	817b      	strh	r3, [r7, #10]

	// motor 0
	__HAL_TIM_SET_PRESCALER(MOTOR_0_TIM, dshot_prescaler);
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <dshot_set_timer+0xb4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	897a      	ldrh	r2, [r7, #10]
 8000606:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_0_TIM, MOTOR_BIT_LENGTH);
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <dshot_set_timer+0xb4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2214      	movs	r2, #20
 800060e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <dshot_set_timer+0xb4>)
 8000612:	2214      	movs	r2, #20
 8000614:	60da      	str	r2, [r3, #12]

	// motor 1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <dshot_set_timer+0xb8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	897a      	ldrh	r2, [r7, #10]
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BIT_LENGTH);
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <dshot_set_timer+0xb8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2214      	movs	r2, #20
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <dshot_set_timer+0xb8>)
 8000628:	2214      	movs	r2, #20
 800062a:	60da      	str	r2, [r3, #12]

	// motor 2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <dshot_set_timer+0xb4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	897a      	ldrh	r2, [r7, #10]
 8000632:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BIT_LENGTH);
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <dshot_set_timer+0xb4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2214      	movs	r2, #20
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <dshot_set_timer+0xb4>)
 800063e:	2214      	movs	r2, #20
 8000640:	60da      	str	r2, [r3, #12]

	// motor 3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <dshot_set_timer+0xb8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	897a      	ldrh	r2, [r7, #10]
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BIT_LENGTH);
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <dshot_set_timer+0xb8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2214      	movs	r2, #20
 8000650:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <dshot_set_timer+0xb8>)
 8000654:	2214      	movs	r2, #20
 8000656:	60da      	str	r2, [r3, #12]
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	ecbd 8b02 	vpop	{d8}
 8000662:	bd80      	pop	{r7, pc}
 8000664:	05f5e100 	.word	0x05f5e100
 8000668:	3c23d70a 	.word	0x3c23d70a
 800066c:	20000148 	.word	0x20000148
 8000670:	20000190 	.word	0x20000190

08000674 <dshot_dma_tc_callback>:

static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma) {
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000680:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	d108      	bne.n	800069e <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800069a:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 800069c:	e028      	b.n	80006f0 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d108      	bne.n	80006ba <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68da      	ldr	r2, [r3, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80006b6:	60da      	str	r2, [r3, #12]
}
 80006b8:	e01a      	b.n	80006f0 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d108      	bne.n	80006d6 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80006d2:	60da      	str	r2, [r3, #12]
}
 80006d4:	e00c      	b.n	80006f0 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d107      	bne.n	80006f0 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68da      	ldr	r2, [r3, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80006ee:	60da      	str	r2, [r3, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function() {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_0_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <dshot_put_tc_callback_function+0x30>)
 8000702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000704:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <dshot_put_tc_callback_function+0x34>)
 8000706:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <dshot_put_tc_callback_function+0x38>)
 800070a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800070c:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <dshot_put_tc_callback_function+0x34>)
 800070e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <dshot_put_tc_callback_function+0x30>)
 8000712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000714:	4a06      	ldr	r2, [pc, #24]	@ (8000730 <dshot_put_tc_callback_function+0x34>)
 8000716:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <dshot_put_tc_callback_function+0x38>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <dshot_put_tc_callback_function+0x34>)
 800071e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000148 	.word	0x20000148
 8000730:	08000675 	.word	0x08000675
 8000734:	20000190 	.word	0x20000190

08000738 <dshot_start_pwm>:

/*
 * Start the timer channels.
 * Note: Enabling/disabling DMA request will restart a new cycle without PWM start/stop
 */
static void dshot_start_pwm() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(MOTOR_0_TIM, MOTOR_0_TIM_CHNL);
 800073c:	2100      	movs	r1, #0
 800073e:	4808      	ldr	r0, [pc, #32]	@ (8000760 <dshot_start_pwm+0x28>)
 8000740:	f002 f804 	bl	800274c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHNL);
 8000744:	2104      	movs	r1, #4
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <dshot_start_pwm+0x2c>)
 8000748:	f002 f800 	bl	800274c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHNL);
 800074c:	2108      	movs	r1, #8
 800074e:	4804      	ldr	r0, [pc, #16]	@ (8000760 <dshot_start_pwm+0x28>)
 8000750:	f001 fffc 	bl	800274c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHNL);
 8000754:	210c      	movs	r1, #12
 8000756:	4803      	ldr	r0, [pc, #12]	@ (8000764 <dshot_start_pwm+0x2c>)
 8000758:	f001 fff8 	bl	800274c <HAL_TIM_PWM_Start>

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000148 	.word	0x20000148
 8000764:	20000190 	.word	0x20000190

08000768 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value) {
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000772:	2300      	movs	r3, #0
 8000774:	72fb      	strb	r3, [r7, #11]
	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b21a      	sxth	r2, r3
 800077c:	7afb      	ldrb	r3, [r7, #11]
 800077e:	b21b      	sxth	r3, r3
 8000780:	4313      	orrs	r3, r2
 8000782:	b21b      	sxth	r3, r3
 8000784:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 800078a:	893b      	ldrh	r3, [r7, #8]
 800078c:	613b      	str	r3, [r7, #16]

	for(int i = 0 ; i < 4 ; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e009      	b.n	80007a8 <dshot_prepare_packet+0x40>
		csum ^= csum_data; // check each nibble
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	4053      	eors	r3, r2
 800079a:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	091b      	lsrs	r3, r3, #4
 80007a0:	613b      	str	r3, [r7, #16]
	for(int i = 0 ; i < 4 ; i++) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	ddf2      	ble.n	8000794 <dshot_prepare_packet+0x2c>
	}
	csum &= 0xF;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80007b6:	893b      	ldrh	r3, [r7, #8]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	813b      	strh	r3, [r7, #8]

	return packet;
 80007c4:	893b      	ldrh	r3, [r7, #8]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <dshot_prepare_dmabuffer>:

// convert 16 bit packet to 16 pwm signals
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ffc1 	bl	8000768 <dshot_prepare_packet>
 80007e6:	4603      	mov	r3, r0
 80007e8:	81fb      	strh	r3, [r7, #14]

	for (int i = 0 ; i < 16 ; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	e011      	b.n	8000814 <dshot_prepare_dmabuffer+0x42>
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 80007f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	da01      	bge.n	80007fc <dshot_prepare_dmabuffer+0x2a>
 80007f8:	220e      	movs	r2, #14
 80007fa:	e000      	b.n	80007fe <dshot_prepare_dmabuffer+0x2c>
 80007fc:	2207      	movs	r2, #7
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	440b      	add	r3, r1
 8000806:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0 ; i < 16 ; i++) {
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3301      	adds	r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b0f      	cmp	r3, #15
 8000818:	ddea      	ble.n	80007f0 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3340      	adds	r3, #64	@ 0x40
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3344      	adds	r3, #68	@ 0x44
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_values) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor0_dmabuffer, motor_values[0]);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <dshot_prepare_dmabuffer_all+0x48>)
 8000844:	f7ff ffc5 	bl	80007d2 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_values[1]);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3302      	adds	r3, #2
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <dshot_prepare_dmabuffer_all+0x4c>)
 8000852:	f7ff ffbe 	bl	80007d2 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_values[2]);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3304      	adds	r3, #4
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	4809      	ldr	r0, [pc, #36]	@ (8000884 <dshot_prepare_dmabuffer_all+0x50>)
 8000860:	f7ff ffb7 	bl	80007d2 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_values[3]);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3306      	adds	r3, #6
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	4806      	ldr	r0, [pc, #24]	@ (8000888 <dshot_prepare_dmabuffer_all+0x54>)
 800086e:	f7ff ffb0 	bl	80007d2 <dshot_prepare_dmabuffer>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028
 8000880:	20000070 	.word	0x20000070
 8000884:	200000b8 	.word	0x200000b8
 8000888:	20000100 	.word	0x20000100

0800088c <dshot_dma_start>:

static void dshot_dma_start() {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_0_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor0_dmabuffer,
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <dshot_dma_start+0x58>)
 8000892:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000894:	4914      	ldr	r1, [pc, #80]	@ (80008e8 <dshot_dma_start+0x5c>)
			(uint32_t)&MOTOR_0_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <dshot_dma_start+0x58>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3334      	adds	r3, #52	@ 0x34
	HAL_DMA_Start_IT(MOTOR_0_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor0_dmabuffer,
 800089c:	461a      	mov	r2, r3
 800089e:	2312      	movs	r3, #18
 80008a0:	f000 fe9a 	bl	80015d8 <HAL_DMA_Start_IT>

	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor1_dmabuffer,
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <dshot_dma_start+0x60>)
 80008a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80008a8:	4911      	ldr	r1, [pc, #68]	@ (80008f0 <dshot_dma_start+0x64>)
				(uint32_t)&MOTOR_1_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <dshot_dma_start+0x60>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3338      	adds	r3, #56	@ 0x38
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor1_dmabuffer,
 80008b0:	461a      	mov	r2, r3
 80008b2:	2312      	movs	r3, #18
 80008b4:	f000 fe90 	bl	80015d8 <HAL_DMA_Start_IT>

	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer,
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <dshot_dma_start+0x58>)
 80008ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80008bc:	490d      	ldr	r1, [pc, #52]	@ (80008f4 <dshot_dma_start+0x68>)
				(uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <dshot_dma_start+0x58>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	333c      	adds	r3, #60	@ 0x3c
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer,
 80008c4:	461a      	mov	r2, r3
 80008c6:	2312      	movs	r3, #18
 80008c8:	f000 fe86 	bl	80015d8 <HAL_DMA_Start_IT>

	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer,
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <dshot_dma_start+0x60>)
 80008ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80008d0:	4909      	ldr	r1, [pc, #36]	@ (80008f8 <dshot_dma_start+0x6c>)
				(uint32_t)&MOTOR_3_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <dshot_dma_start+0x60>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3340      	adds	r3, #64	@ 0x40
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer,
 80008d8:	461a      	mov	r2, r3
 80008da:	2312      	movs	r3, #18
 80008dc:	f000 fe7c 	bl	80015d8 <HAL_DMA_Start_IT>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000148 	.word	0x20000148
 80008e8:	20000028 	.word	0x20000028
 80008ec:	20000190 	.word	0x20000190
 80008f0:	20000070 	.word	0x20000070
 80008f4:	200000b8 	.word	0x200000b8
 80008f8:	20000100 	.word	0x20000100

080008fc <dshot_enable_dma_request>:

static void dshot_enable_dma_request() {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_0_TIM, TIM_DMA_CC1);
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <dshot_enable_dma_request+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <dshot_enable_dma_request+0x50>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800090e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC2);
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <dshot_enable_dma_request+0x54>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <dshot_enable_dma_request+0x54>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800091e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <dshot_enable_dma_request+0x50>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68da      	ldr	r2, [r3, #12]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <dshot_enable_dma_request+0x50>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800092e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC4);
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <dshot_enable_dma_request+0x54>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68da      	ldr	r2, [r3, #12]
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <dshot_enable_dma_request+0x54>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800093e:	60da      	str	r2, [r3, #12]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000148 	.word	0x20000148
 8000950:	20000190 	.word	0x20000190

08000954 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_GPIO_Init+0x30>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <MX_GPIO_Init+0x30>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_GPIO_Init+0x30>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fbcd 	bl	800112c <HAL_Init>

  /* USER CODE BEGIN Init */

  uint16_t motor0_speed = 0; // up-to 2000
 8000992:	2300      	movs	r3, #0
 8000994:	82bb      	strh	r3, [r7, #20]
  uint16_t motor1_speed = 0; // up-to 2000
 8000996:	2300      	movs	r3, #0
 8000998:	827b      	strh	r3, [r7, #18]
  uint16_t motor2_speed = 0; // up-to 2000
 800099a:	2300      	movs	r3, #0
 800099c:	823b      	strh	r3, [r7, #16]
  uint16_t motor3_speed = 0; // up-to 2000
 800099e:	2300      	movs	r3, #0
 80009a0:	81fb      	strh	r3, [r7, #14]
  uint16_t motors[4] = {motor0_speed, motor1_speed, motor2_speed, motor3_speed};
 80009a2:	8abb      	ldrh	r3, [r7, #20]
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	8a7b      	ldrh	r3, [r7, #18]
 80009a8:	80fb      	strh	r3, [r7, #6]
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	813b      	strh	r3, [r7, #8]
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	817b      	strh	r3, [r7, #10]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f859 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f7ff ffcd 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ba:	f7ff fd83 	bl	80004c4 <MX_DMA_Init>
  MX_TIM2_Init();
 80009be:	f000 f94b 	bl	8000c58 <MX_TIM2_Init>
  MX_TIM5_Init();
 80009c2:	f000 f9ab 	bl	8000d1c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // initialize dshot protocol for communication with esc's
  dshot_init(DSHOT300);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fdb4 	bl	8000534 <dshot_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	for(uint16_t i = 0 ; i <= 20 ; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	82fb      	strh	r3, [r7, #22]
 80009d0:	e046      	b.n	8000a60 <main+0xd8>
		dshot_tx(motors); // Transmit desired motor speeds to each motor
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fdbe 	bl	8000556 <dshot_tx>
		HAL_Delay(1000); // 1s timeout
 80009da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009de:	f000 fc17 	bl	8001210 <HAL_Delay>
		motors[0] += (100 * i);
 80009e2:	88ba      	ldrh	r2, [r7, #4]
 80009e4:	8afb      	ldrh	r3, [r7, #22]
 80009e6:	4619      	mov	r1, r3
 80009e8:	0089      	lsls	r1, r1, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	4619      	mov	r1, r3
 80009ee:	0088      	lsls	r0, r1, #2
 80009f0:	4619      	mov	r1, r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	440b      	add	r3, r1
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	80bb      	strh	r3, [r7, #4]
		motors[1] += (100 * i);
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	8afb      	ldrh	r3, [r7, #22]
 8000a04:	4619      	mov	r1, r3
 8000a06:	0089      	lsls	r1, r1, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	0088      	lsls	r0, r1, #2
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4603      	mov	r3, r0
 8000a12:	440b      	add	r3, r1
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	80fb      	strh	r3, [r7, #6]
		motors[2] += (100 * i);
 8000a1e:	893a      	ldrh	r2, [r7, #8]
 8000a20:	8afb      	ldrh	r3, [r7, #22]
 8000a22:	4619      	mov	r1, r3
 8000a24:	0089      	lsls	r1, r1, #2
 8000a26:	440b      	add	r3, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	0088      	lsls	r0, r1, #2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4603      	mov	r3, r0
 8000a30:	440b      	add	r3, r1
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	813b      	strh	r3, [r7, #8]
		motors[3] += (100 * i);
 8000a3c:	897a      	ldrh	r2, [r7, #10]
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	4619      	mov	r1, r3
 8000a42:	0089      	lsls	r1, r1, #2
 8000a44:	440b      	add	r3, r1
 8000a46:	4619      	mov	r1, r3
 8000a48:	0088      	lsls	r0, r1, #2
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4413      	add	r3, r2
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	817b      	strh	r3, [r7, #10]
	for(uint16_t i = 0 ; i <= 20 ; i++) {
 8000a5a:	8afb      	ldrh	r3, [r7, #22]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	82fb      	strh	r3, [r7, #22]
 8000a60:	8afb      	ldrh	r3, [r7, #22]
 8000a62:	2b14      	cmp	r3, #20
 8000a64:	d9b5      	bls.n	80009d2 <main+0x4a>
 8000a66:	e7b1      	b.n	80009cc <main+0x44>

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	@ 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	@ 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fa86 	bl	8002f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9c:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <SystemClock_Config+0xb8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <SystemClock_Config+0xbc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <SystemClock_Config+0xbc>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <SystemClock_Config+0xbc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 f9c1 	bl	8001e64 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ae8:	f000 f81e 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fc24 	bl	8002354 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b12:	f000 f809 	bl	8000b28 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	@ 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 faf9 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <DMA1_Stream1_IRQHandler+0x10>)
 8000bea:	f000 fd4d 	bl	8001688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000238 	.word	0x20000238

08000bf8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <DMA1_Stream3_IRQHandler+0x10>)
 8000bfe:	f000 fd43 	bl	8001688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200002f8 	.word	0x200002f8

08000c0c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <DMA1_Stream4_IRQHandler+0x10>)
 8000c12:	f000 fd39 	bl	8001688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000298 	.word	0x20000298

08000c20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <DMA1_Stream5_IRQHandler+0x10>)
 8000c26:	f000 fd2f 	bl	8001688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001d8 	.word	0x200001d8

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c82:	4b25      	ldr	r3, [pc, #148]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca0:	481d      	ldr	r0, [pc, #116]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000ca2:	f001 fd03 	bl	80026ac <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cac:	f7ff ff3c 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4816      	ldr	r0, [pc, #88]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000cc0:	f002 f8f4 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000cca:	f7ff ff2d 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	@ 0x60
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000ce6:	f001 fde1 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000cf0:	f7ff ff1a 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000cfc:	f001 fdd6 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d06:	f7ff ff0f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d0a:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <MX_TIM2_Init+0xc0>)
 8000d0c:	f000 f986 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	@ 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000148 	.word	0x20000148

08000d1c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d40:	4a27      	ldr	r2, [pc, #156]	@ (8000de0 <MX_TIM5_Init+0xc4>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d62:	481e      	ldr	r0, [pc, #120]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d64:	f001 fca2 	bl	80026ac <HAL_TIM_PWM_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000d6e:	f7ff fedb 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4816      	ldr	r0, [pc, #88]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000d82:	f002 f893 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000d8c:	f7ff fecc 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d90:	2360      	movs	r3, #96	@ 0x60
 8000d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2204      	movs	r2, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000da8:	f001 fd80 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000db2:	f7ff feb9 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	220c      	movs	r2, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000dbe:	f001 fd75 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000dc8:	f7ff feae 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <MX_TIM5_Init+0xc0>)
 8000dce:	f000 f925 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000190 	.word	0x20000190
 8000de0:	40000c00 	.word	0x40000c00

08000de4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d176      	bne.n	8000ee4 <HAL_TIM_PWM_MspInit+0x100>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x210>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a7d      	ldr	r2, [pc, #500]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x210>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b7b      	ldr	r3, [pc, #492]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x210>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000e12:	4b79      	ldr	r3, [pc, #484]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e14:	4a79      	ldr	r2, [pc, #484]	@ (8000ffc <HAL_TIM_PWM_MspInit+0x218>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000e18:	4b77      	ldr	r3, [pc, #476]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e1a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e20:	4b75      	ldr	r3, [pc, #468]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e22:	2240      	movs	r2, #64	@ 0x40
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b74      	ldr	r3, [pc, #464]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b72      	ldr	r3, [pc, #456]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e34:	4b70      	ldr	r3, [pc, #448]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e3c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e42:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000e44:	4b6c      	ldr	r3, [pc, #432]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e50:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e52:	4b69      	ldr	r3, [pc, #420]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000e58:	4867      	ldr	r0, [pc, #412]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e5a:	f000 fb0f 	bl	800147c <HAL_DMA_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000e64:	f7ff fe60 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a63      	ldr	r2, [pc, #396]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e6e:	4a62      	ldr	r2, [pc, #392]	@ (8000ff8 <HAL_TIM_PWM_MspInit+0x214>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8000e74:	4b62      	ldr	r3, [pc, #392]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000e76:	4a63      	ldr	r2, [pc, #396]	@ (8001004 <HAL_TIM_PWM_MspInit+0x220>)
 8000e78:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8000e7a:	4b61      	ldr	r3, [pc, #388]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000e7c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e82:	4b5f      	ldr	r3, [pc, #380]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000e84:	2240      	movs	r2, #64	@ 0x40
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000e90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e96:	4b5a      	ldr	r3, [pc, #360]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000e98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e9e:	4b58      	ldr	r3, [pc, #352]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000ea0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8000ea6:	4b56      	ldr	r3, [pc, #344]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8000eac:	4b54      	ldr	r3, [pc, #336]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000eae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eb2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb4:	4b52      	ldr	r3, [pc, #328]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8000eba:	4851      	ldr	r0, [pc, #324]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000ebc:	f000 fade 	bl	800147c <HAL_DMA_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_TIM_PWM_MspInit+0xe6>
    {
      Error_Handler();
 8000ec6:	f7ff fe2f 	bl	8000b28 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a49      	ldr	r2, [pc, #292]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000eda:	621a      	str	r2, [r3, #32]
 8000edc:	4a48      	ldr	r2, [pc, #288]	@ (8001000 <HAL_TIM_PWM_MspInit+0x21c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000ee2:	e083      	b.n	8000fec <HAL_TIM_PWM_MspInit+0x208>
  else if(tim_pwmHandle->Instance==TIM5)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	@ (8001008 <HAL_TIM_PWM_MspInit+0x224>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d17e      	bne.n	8000fec <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b40      	ldr	r3, [pc, #256]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x210>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x210>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff4 <HAL_TIM_PWM_MspInit+0x210>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8000f0a:	4b40      	ldr	r3, [pc, #256]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f0c:	4a40      	ldr	r2, [pc, #256]	@ (8001010 <HAL_TIM_PWM_MspInit+0x22c>)
 8000f0e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8000f10:	4b3e      	ldr	r3, [pc, #248]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f12:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000f16:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f18:	4b3c      	ldr	r3, [pc, #240]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f1a:	2240      	movs	r2, #64	@ 0x40
 8000f1c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000f24:	4b39      	ldr	r3, [pc, #228]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f2a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f2c:	4b37      	ldr	r3, [pc, #220]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f32:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f34:	4b35      	ldr	r3, [pc, #212]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000f3c:	4b33      	ldr	r3, [pc, #204]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000f42:	4b32      	ldr	r3, [pc, #200]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f48:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4a:	4b30      	ldr	r3, [pc, #192]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000f50:	482e      	ldr	r0, [pc, #184]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f52:	f000 fa93 	bl	800147c <HAL_DMA_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_TIM_PWM_MspInit+0x17c>
      Error_Handler();
 8000f5c:	f7ff fde4 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a2a      	ldr	r2, [pc, #168]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f66:	4a29      	ldr	r2, [pc, #164]	@ (800100c <HAL_TIM_PWM_MspInit+0x228>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001018 <HAL_TIM_PWM_MspInit+0x234>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f74:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f7c:	2240      	movs	r2, #64	@ 0x40
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000f98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fae:	2204      	movs	r2, #4
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8000fc4:	4813      	ldr	r0, [pc, #76]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fc6:	f000 fa59 	bl	800147c <HAL_DMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_TIM_PWM_MspInit+0x1f0>
      Error_Handler();
 8000fd0:	f7ff fdaa 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <HAL_TIM_PWM_MspInit+0x230>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	200001d8 	.word	0x200001d8
 8000ffc:	40026088 	.word	0x40026088
 8001000:	20000238 	.word	0x20000238
 8001004:	40026028 	.word	0x40026028
 8001008:	40000c00 	.word	0x40000c00
 800100c:	20000298 	.word	0x20000298
 8001010:	40026070 	.word	0x40026070
 8001014:	200002f8 	.word	0x200002f8
 8001018:	40026058 	.word	0x40026058

0800101c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800103c:	d11e      	bne.n	800107c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <HAL_TIM_MspPostInit+0xb0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <HAL_TIM_MspPostInit+0xb0>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <HAL_TIM_MspPostInit+0xb0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800105a:	2305      	movs	r3, #5
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800106a:	2301      	movs	r3, #1
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <HAL_TIM_MspPostInit+0xb4>)
 8001076:	f000 fd71 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800107a:	e022      	b.n	80010c2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <HAL_TIM_MspPostInit+0xb8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d11d      	bne.n	80010c2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <HAL_TIM_MspPostInit+0xb0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <HAL_TIM_MspPostInit+0xb0>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <HAL_TIM_MspPostInit+0xb0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010a2:	230a      	movs	r3, #10
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010b2:	2302      	movs	r3, #2
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <HAL_TIM_MspPostInit+0xb4>)
 80010be:	f000 fd4d 	bl	8001b5c <HAL_GPIO_Init>
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40000c00 	.word	0x40000c00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010dc:	f7ff fdaa 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 ff47 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fc3d 	bl	8000988 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800111c:	080030a8 	.word	0x080030a8
  ldr r2, =_sbss
 8001120:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001124:	2000035c 	.word	0x2000035c

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f94f 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	200f      	movs	r0, #15
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fce8 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f967 	bl	8001462 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ac:	f000 f92f 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000358 	.word	0x20000358

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000358 	.word	0x20000358

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	@ (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	@ (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff feb6 	bl	80011f8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e099      	b.n	80015cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b8:	e00f      	b.n	80014da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ba:	f7ff fe9d 	bl	80011f8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d908      	bls.n	80014da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2220      	movs	r2, #32
 80014cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2203      	movs	r2, #3
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e078      	b.n	80015cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1e8      	bne.n	80014ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4b38      	ldr	r3, [pc, #224]	@ (80015d4 <HAL_DMA_Init+0x158>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	2b04      	cmp	r3, #4
 8001532:	d107      	bne.n	8001544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4313      	orrs	r3, r2
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f023 0307 	bic.w	r3, r3, #7
 800155a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	2b04      	cmp	r3, #4
 800156c:	d117      	bne.n	800159e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4313      	orrs	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00e      	beq.n	800159e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fa6f 	bl	8001a64 <DMA_CheckFifoParam>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2240      	movs	r2, #64	@ 0x40
 8001590:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800159a:	2301      	movs	r3, #1
 800159c:	e016      	b.n	80015cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fa26 	bl	80019f8 <DMA_CalcBaseAndBitshift>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b4:	223f      	movs	r2, #63	@ 0x3f
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f010803f 	.word	0xf010803f

080015d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_DMA_Start_IT+0x26>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e040      	b.n	8001680 <HAL_DMA_Start_IT+0xa8>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d12f      	bne.n	8001672 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2202      	movs	r2, #2
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f9b8 	bl	800199c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	223f      	movs	r2, #63	@ 0x3f
 8001632:	409a      	lsls	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0216 	orr.w	r2, r2, #22
 8001646:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0208 	orr.w	r2, r2, #8
 800165e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e005      	b.n	800167e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001694:	4b8e      	ldr	r3, [pc, #568]	@ (80018d0 <HAL_DMA_IRQHandler+0x248>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a8e      	ldr	r2, [pc, #568]	@ (80018d4 <HAL_DMA_IRQHandler+0x24c>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0a9b      	lsrs	r3, r3, #10
 80016a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	2208      	movs	r2, #8
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01a      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e0:	2208      	movs	r2, #8
 80016e2:	409a      	lsls	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f8:	2201      	movs	r2, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d012      	beq.n	800172a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001716:	2201      	movs	r2, #1
 8001718:	409a      	lsls	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001722:	f043 0202 	orr.w	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172e:	2204      	movs	r2, #4
 8001730:	409a      	lsls	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d012      	beq.n	8001760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174c:	2204      	movs	r2, #4
 800174e:	409a      	lsls	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	f043 0204 	orr.w	r2, r3, #4
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001764:	2210      	movs	r2, #16
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d043      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d03c      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	2210      	movs	r2, #16
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d018      	beq.n	80017ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d108      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d024      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	4798      	blx	r3
 80017b6:	e01f      	b.n	80017f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01b      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
 80017c8:	e016      	b.n	80017f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0208 	bic.w	r2, r2, #8
 80017e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fc:	2220      	movs	r2, #32
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 808f 	beq.w	8001928 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8087 	beq.w	8001928 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181e:	2220      	movs	r2, #32
 8001820:	409a      	lsls	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b05      	cmp	r3, #5
 8001830:	d136      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0216 	bic.w	r2, r2, #22
 8001840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <HAL_DMA_IRQHandler+0x1da>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0208 	bic.w	r2, r2, #8
 8001870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001876:	223f      	movs	r2, #63	@ 0x3f
 8001878:	409a      	lsls	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001892:	2b00      	cmp	r3, #0
 8001894:	d07e      	beq.n	8001994 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
        }
        return;
 800189e:	e079      	b.n	8001994 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01d      	beq.n	80018ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10d      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d031      	beq.n	8001928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
 80018cc:	e02c      	b.n	8001928 <HAL_DMA_IRQHandler+0x2a0>
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000
 80018d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
 80018e8:	e01e      	b.n	8001928 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10f      	bne.n	8001918 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0210 	bic.w	r2, r2, #16
 8001906:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	2b00      	cmp	r3, #0
 800192e:	d032      	beq.n	8001996 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d022      	beq.n	8001982 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2205      	movs	r2, #5
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	d307      	bcc.n	8001970 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f2      	bne.n	8001954 <HAL_DMA_IRQHandler+0x2cc>
 800196e:	e000      	b.n	8001972 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001970:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
 8001992:	e000      	b.n	8001996 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001994:	bf00      	nop
    }
  }
}
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b40      	cmp	r3, #64	@ 0x40
 80019c8:	d108      	bne.n	80019dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019da:	e007      	b.n	80019ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	3b10      	subs	r3, #16
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <DMA_CalcBaseAndBitshift+0x64>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <DMA_CalcBaseAndBitshift+0x68>)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d909      	bls.n	8001a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	1d1a      	adds	r2, r3, #4
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a38:	e007      	b.n	8001a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a42:	f023 0303 	bic.w	r3, r3, #3
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	aaaaaaab 	.word	0xaaaaaaab
 8001a60:	08003088 	.word	0x08003088

08001a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d11f      	bne.n	8001abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d856      	bhi.n	8001b32 <DMA_CheckFifoParam+0xce>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <DMA_CheckFifoParam+0x28>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001aaf 	.word	0x08001aaf
 8001a94:	08001a9d 	.word	0x08001a9d
 8001a98:	08001b33 	.word	0x08001b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d046      	beq.n	8001b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aac:	e043      	b.n	8001b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ab6:	d140      	bne.n	8001b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001abc:	e03d      	b.n	8001b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ac6:	d121      	bne.n	8001b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d837      	bhi.n	8001b3e <DMA_CheckFifoParam+0xda>
 8001ace:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <DMA_CheckFifoParam+0x70>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001aeb 	.word	0x08001aeb
 8001adc:	08001ae5 	.word	0x08001ae5
 8001ae0:	08001afd 	.word	0x08001afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae8:	e030      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d025      	beq.n	8001b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001afa:	e022      	b.n	8001b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b04:	d11f      	bne.n	8001b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b0a:	e01c      	b.n	8001b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d903      	bls.n	8001b1a <DMA_CheckFifoParam+0xb6>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d003      	beq.n	8001b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b18:	e018      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b1e:	e015      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b30:	e00b      	b.n	8001b4a <DMA_CheckFifoParam+0xe6>
      break;
 8001b32:	bf00      	nop
 8001b34:	e00a      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e008      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e006      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e004      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
 8001b44:	e002      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b46:	bf00      	nop
 8001b48:	e000      	b.n	8001b4c <DMA_CheckFifoParam+0xe8>
      break;
 8001b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e159      	b.n	8001e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 8148 	bne.w	8001e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a2 	beq.w	8001e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b57      	ldr	r3, [pc, #348]	@ (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a56      	ldr	r2, [pc, #344]	@ (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b54      	ldr	r3, [pc, #336]	@ (8001e44 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a52      	ldr	r2, [pc, #328]	@ (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a49      	ldr	r2, [pc, #292]	@ (8001e4c <HAL_GPIO_Init+0x2f0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x202>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	@ (8001e50 <HAL_GPIO_Init+0x2f4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x1fe>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a47      	ldr	r2, [pc, #284]	@ (8001e54 <HAL_GPIO_Init+0x2f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x1fa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a46      	ldr	r2, [pc, #280]	@ (8001e58 <HAL_GPIO_Init+0x2fc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x1f6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a45      	ldr	r2, [pc, #276]	@ (8001e5c <HAL_GPIO_Init+0x300>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x1f2>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x204>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	@ (8001e48 <HAL_GPIO_Init+0x2ec>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a24      	ldr	r2, [pc, #144]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f aea2 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e267      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d075      	beq.n	8001f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	4b88      	ldr	r3, [pc, #544]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b85      	ldr	r3, [pc, #532]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b82      	ldr	r3, [pc, #520]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05b      	beq.n	8001f6c <HAL_RCC_OscConfig+0x108>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e242      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x74>
 8001eca:	4b76      	ldr	r3, [pc, #472]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6f      	ldr	r2, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6d      	ldr	r3, [pc, #436]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001efc:	4b69      	ldr	r3, [pc, #420]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a68      	ldr	r2, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a65      	ldr	r2, [pc, #404]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f96c 	bl	80011f8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f968 	bl	80011f8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e207      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b5b      	ldr	r3, [pc, #364]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xc0>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff f958 	bl	80011f8 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f954 	bl	80011f8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1f3      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b51      	ldr	r3, [pc, #324]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xe8>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1c7      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f90d 	bl	80011f8 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f909 	bl	80011f8 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1a8      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f8ec 	bl	80011f8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff f8e8 	bl	80011f8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e187      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_RCC_OscConfig+0x248>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff f8cc 	bl	80011f8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff f8c8 	bl	80011f8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e167      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x240>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x200>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_OscConfig+0x248>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff f8b5 	bl	80011f8 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff f8b1 	bl	80011f8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e150      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b88      	ldr	r3, [pc, #544]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b81      	ldr	r3, [pc, #516]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7d      	ldr	r3, [pc, #500]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a7c      	ldr	r2, [pc, #496]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b7a      	ldr	r3, [pc, #488]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b77      	ldr	r3, [pc, #476]	@ (80022d8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b74      	ldr	r3, [pc, #464]	@ (80022d8 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a73      	ldr	r2, [pc, #460]	@ (80022d8 <HAL_RCC_OscConfig+0x474>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff f871 	bl	80011f8 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff f86d 	bl	80011f8 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e10c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <HAL_RCC_OscConfig+0x474>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x2ea>
 8002140:	4b64      	ldr	r3, [pc, #400]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002144:	4a63      	ldr	r2, [pc, #396]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	@ 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x30c>
 8002156:	4b5f      	ldr	r3, [pc, #380]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a5e      	ldr	r2, [pc, #376]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	4b5c      	ldr	r3, [pc, #368]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	4a5b      	ldr	r2, [pc, #364]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	@ 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x324>
 8002170:	4b58      	ldr	r3, [pc, #352]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a57      	ldr	r2, [pc, #348]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
 800217c:	4b55      	ldr	r3, [pc, #340]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a54      	ldr	r2, [pc, #336]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f832 	bl	80011f8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff f82e 	bl	80011f8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0cb      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x334>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff f81c 	bl	80011f8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff f818 	bl	80011f8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0b5      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	4a38      	ldr	r2, [pc, #224]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a1 	beq.w	8002344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b34      	ldr	r3, [pc, #208]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d05c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d141      	bne.n	800229a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <HAL_RCC_OscConfig+0x478>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ffec 	bl	80011f8 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe ffe8 	bl	80011f8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e087      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b27      	ldr	r3, [pc, #156]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	491b      	ldr	r1, [pc, #108]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_RCC_OscConfig+0x478>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe ffc1 	bl	80011f8 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe ffbd 	bl	80011f8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e05c      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x416>
 8002298:	e054      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <HAL_RCC_OscConfig+0x478>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe ffaa 	bl	80011f8 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe ffa6 	bl	80011f8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e045      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_RCC_OscConfig+0x470>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
 80022c6:	e03d      	b.n	8002344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e038      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <HAL_RCC_OscConfig+0x4ec>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0cc      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b68      	ldr	r3, [pc, #416]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d90c      	bls.n	8002390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b65      	ldr	r3, [pc, #404]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d044      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e067      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4934      	ldr	r1, [pc, #208]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fed8 	bl	80011f8 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fed4 	bl	80011f8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d20c      	bcs.n	800249c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b22      	ldr	r3, [pc, #136]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	@ (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fe38 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	08003078 	.word	0x08003078
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b090      	sub	sp, #64	@ 0x40
 8002526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	@ 0x34
 800252c:	2300      	movs	r3, #0
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002538:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00d      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x40>
 8002544:	2b08      	cmp	r3, #8
 8002546:	f200 80a1 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x16c>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x3a>
 8002552:	e09b      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002556:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002558:	e09b      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800255c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800255e:	e098      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002568:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b4d      	ldr	r3, [pc, #308]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b4a      	ldr	r3, [pc, #296]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	627a      	str	r2, [r7, #36]	@ 0x24
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002588:	2100      	movs	r1, #0
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800258c:	fb03 f201 	mul.w	r2, r3, r1
 8002590:	2300      	movs	r3, #0
 8002592:	fb00 f303 	mul.w	r3, r0, r3
 8002596:	4413      	add	r3, r2
 8002598:	4a43      	ldr	r2, [pc, #268]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800259a:	fba0 1202 	umull	r1, r2, r0, r2
 800259e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025a0:	460a      	mov	r2, r1
 80025a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a6:	4413      	add	r3, r2
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ac:	2200      	movs	r2, #0
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	61fa      	str	r2, [r7, #28]
 80025b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025ba:	f7fd fe0b 	bl	80001d4 <__aeabi_uldivmod>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4613      	mov	r3, r2
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c6:	e053      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c8:	4b35      	ldr	r3, [pc, #212]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	2200      	movs	r2, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	617a      	str	r2, [r7, #20]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025da:	f04f 0b00 	mov.w	fp, #0
 80025de:	4652      	mov	r2, sl
 80025e0:	465b      	mov	r3, fp
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	ebb2 080a 	subs.w	r8, r2, sl
 80025fa:	eb63 090b 	sbc.w	r9, r3, fp
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800260a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800260e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002612:	ebb2 0408 	subs.w	r4, r2, r8
 8002616:	eb63 0509 	sbc.w	r5, r3, r9
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	00eb      	lsls	r3, r5, #3
 8002624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002628:	00e2      	lsls	r2, r4, #3
 800262a:	4614      	mov	r4, r2
 800262c:	461d      	mov	r5, r3
 800262e:	eb14 030a 	adds.w	r3, r4, sl
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	eb45 030b 	adc.w	r3, r5, fp
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	4629      	mov	r1, r5
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002650:	4621      	mov	r1, r4
 8002652:	028a      	lsls	r2, r1, #10
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265a:	2200      	movs	r2, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	60fa      	str	r2, [r7, #12]
 8002660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002664:	f7fd fdb6 	bl	80001d4 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002680:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002694:	4618      	mov	r0, r3
 8002696:	3740      	adds	r7, #64	@ 0x40
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	017d7840 	.word	0x017d7840

080026ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e041      	b.n	8002742 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fb86 	bl	8000de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f000 f9a0 	bl	8002a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_TIM_PWM_Start+0x24>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e022      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d109      	bne.n	800278a <HAL_TIM_PWM_Start+0x3e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e015      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d109      	bne.n	80027a4 <HAL_TIM_PWM_Start+0x58>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e008      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e068      	b.n	8002890 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_PWM_Start+0x82>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d104      	bne.n	80027de <HAL_TIM_PWM_Start+0x92>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0xa2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ec:	e003      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fb2e 	bl	8002e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <HAL_TIM_PWM_Start+0x14c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d107      	bne.n	800281e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_TIM_PWM_Start+0x14c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d013      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a19      	ldr	r2, [pc, #100]	@ (800289c <HAL_TIM_PWM_Start+0x150>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_TIM_PWM_Start+0x154>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <HAL_TIM_PWM_Start+0x158>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <HAL_TIM_PWM_Start+0x15c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d010      	beq.n	800288e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	e007      	b.n	800288e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40014000 	.word	0x40014000

080028ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0ae      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	f200 809f 	bhi.w	8002a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028da:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002a19 	.word	0x08002a19
 80028e8:	08002a19 	.word	0x08002a19
 80028ec:	08002a19 	.word	0x08002a19
 80028f0:	08002955 	.word	0x08002955
 80028f4:	08002a19 	.word	0x08002a19
 80028f8:	08002a19 	.word	0x08002a19
 80028fc:	08002a19 	.word	0x08002a19
 8002900:	08002997 	.word	0x08002997
 8002904:	08002a19 	.word	0x08002a19
 8002908:	08002a19 	.word	0x08002a19
 800290c:	08002a19 	.word	0x08002a19
 8002910:	080029d7 	.word	0x080029d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f914 	bl	8002b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6999      	ldr	r1, [r3, #24]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	619a      	str	r2, [r3, #24]
      break;
 8002952:	e064      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f95a 	bl	8002c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	021a      	lsls	r2, r3, #8
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
      break;
 8002994:	e043      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f9a5 	bl	8002cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0208 	orr.w	r2, r2, #8
 80029b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0204 	bic.w	r2, r2, #4
 80029c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
      break;
 80029d4:	e023      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f9ef 	bl	8002dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	021a      	lsls	r2, r3, #8
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	61da      	str	r2, [r3, #28]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3a      	ldr	r2, [pc, #232]	@ (8002b2c <TIM_Base_SetConfig+0xfc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00f      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d00b      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a37      	ldr	r2, [pc, #220]	@ (8002b30 <TIM_Base_SetConfig+0x100>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a36      	ldr	r2, [pc, #216]	@ (8002b34 <TIM_Base_SetConfig+0x104>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a35      	ldr	r2, [pc, #212]	@ (8002b38 <TIM_Base_SetConfig+0x108>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b2c <TIM_Base_SetConfig+0xfc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01b      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d017      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <TIM_Base_SetConfig+0x100>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <TIM_Base_SetConfig+0x104>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00f      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <TIM_Base_SetConfig+0x108>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a25      	ldr	r2, [pc, #148]	@ (8002b3c <TIM_Base_SetConfig+0x10c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a24      	ldr	r2, [pc, #144]	@ (8002b40 <TIM_Base_SetConfig+0x110>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <TIM_Base_SetConfig+0x114>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <TIM_Base_SetConfig+0xfc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f023 0201 	bic.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 0302 	bic.w	r3, r3, #2
 8002b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c10 <TIM_OC1_SetConfig+0xc8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10c      	bne.n	8002bbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 0308 	bic.w	r3, r3, #8
 8002baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 0304 	bic.w	r3, r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <TIM_OC1_SetConfig+0xc8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d111      	bne.n	8002bea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40010000 	.word	0x40010000

08002c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f023 0210 	bic.w	r2, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f023 0320 	bic.w	r3, r3, #32
 8002c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce8 <TIM_OC2_SetConfig+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d10d      	bne.n	8002c90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a15      	ldr	r2, [pc, #84]	@ (8002ce8 <TIM_OC2_SetConfig+0xd4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d113      	bne.n	8002cc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40010000 	.word	0x40010000

08002cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <TIM_OC3_SetConfig+0xd0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10d      	bne.n	8002d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a14      	ldr	r2, [pc, #80]	@ (8002dbc <TIM_OC3_SetConfig+0xd0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d113      	bne.n	8002d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40010000 	.word	0x40010000

08002dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	031b      	lsls	r3, r3, #12
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <TIM_OC4_SetConfig+0x9c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d109      	bne.n	8002e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000

08002e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2201      	movs	r2, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1a      	ldr	r2, [r3, #32]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	401a      	ands	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e050      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d018      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f10:	d013      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a15      	ldr	r2, [pc, #84]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	40014000 	.word	0x40014000

08002f88 <memset>:
 8002f88:	4402      	add	r2, r0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	f803 1b01 	strb.w	r1, [r3], #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	@ (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 f858 	bl	8003060 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	080030a0 	.word	0x080030a0
 8002fd4:	080030a0 	.word	0x080030a0
 8002fd8:	080030a0 	.word	0x080030a0
 8002fdc:	080030a4 	.word	0x080030a4

08002fe0 <lrintf>:
 8002fe0:	ee10 3a10 	vmov	r3, s0
 8002fe4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002fe8:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8002fec:	281e      	cmp	r0, #30
 8002fee:	b082      	sub	sp, #8
 8002ff0:	dc2f      	bgt.n	8003052 <lrintf+0x72>
 8002ff2:	1c41      	adds	r1, r0, #1
 8002ff4:	da02      	bge.n	8002ffc <lrintf+0x1c>
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	b002      	add	sp, #8
 8002ffa:	4770      	bx	lr
 8002ffc:	2816      	cmp	r0, #22
 8002ffe:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8003002:	dd0a      	ble.n	800301a <lrintf+0x3a>
 8003004:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003008:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800300c:	3a96      	subs	r2, #150	@ 0x96
 800300e:	fa03 f002 	lsl.w	r0, r3, r2
 8003012:	2900      	cmp	r1, #0
 8003014:	d0f0      	beq.n	8002ff8 <lrintf+0x18>
 8003016:	4240      	negs	r0, r0
 8003018:	e7ee      	b.n	8002ff8 <lrintf+0x18>
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <lrintf+0x7c>)
 800301c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003020:	ed93 7a00 	vldr	s14, [r3]
 8003024:	ee37 0a00 	vadd.f32	s0, s14, s0
 8003028:	ed8d 0a01 	vstr	s0, [sp, #4]
 800302c:	eddd 7a01 	vldr	s15, [sp, #4]
 8003030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003034:	ee17 3a90 	vmov	r3, s15
 8003038:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800303c:	d0db      	beq.n	8002ff6 <lrintf+0x16>
 800303e:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8003042:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8003046:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800304a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800304e:	40d8      	lsrs	r0, r3
 8003050:	e7df      	b.n	8003012 <lrintf+0x32>
 8003052:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003056:	ee17 0a90 	vmov	r0, s15
 800305a:	e7cd      	b.n	8002ff8 <lrintf+0x18>
 800305c:	08003090 	.word	0x08003090

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
