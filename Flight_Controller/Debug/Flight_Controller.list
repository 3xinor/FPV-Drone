
Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800df28  0800df28  0000ef28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c0  0800e3c0  000102c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3c0  0800e3c0  0000f3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3c8  0800e3c8  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3c8  0800e3c8  0000f3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3cc  0800e3cc  0000f3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e3d0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a0  200002c8  0800e694  000102c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b68  0800e694  00010b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc7e  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fc  00000000  00000000  0002bf72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00030770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012df  00000000  00000000  00031fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdde  00000000  00000000  000332c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021055  00000000  00000000  0004f0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d01  00000000  00000000  000700fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007734  00000000  00000000  00106e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0010e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800df0c 	.word	0x0800df0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800df0c 	.word	0x0800df0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_DMA_Init+0x6c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <MX_DMA_Init+0x6c>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_DMA_Init+0x6c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	200c      	movs	r0, #12
 8000f70:	f001 fd37 	bl	80029e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f74:	200c      	movs	r0, #12
 8000f76:	f001 fd50 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	200e      	movs	r0, #14
 8000f80:	f001 fd2f 	bl	80029e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f84:	200e      	movs	r0, #14
 8000f86:	f001 fd48 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f001 fd27 	bl	80029e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f94:	200f      	movs	r0, #15
 8000f96:	f001 fd40 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2010      	movs	r0, #16
 8000fa0:	f001 fd1f 	bl	80029e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fa4:	2010      	movs	r0, #16
 8000fa6:	f001 fd38 	bl	8002a1a <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Function Definitions */

void dshot_init(dshot_type_e dshot_type) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f82b 	bl	8001020 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000fca:	f000 f8cb 	bl	8001164 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000fce:	f000 f8e7 	bl	80011a0 <dshot_start_pwm>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <dshot_choose_type>:
	dshot_enable_dma_request();
}

/* Static Function Definitions */

static uint32_t dshot_choose_type(dshot_type_e dshot_type) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	switch(dshot_type) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d00a      	beq.n	8001002 <dshot_choose_type+0x26>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	dc0a      	bgt.n	8001006 <dshot_choose_type+0x2a>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <dshot_choose_type+0x1e>
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d002      	beq.n	8000ffe <dshot_choose_type+0x22>
 8000ff8:	e005      	b.n	8001006 <dshot_choose_type+0x2a>
	case DSHOT150:
		return (uint32_t)DSHOT150_HZ;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <dshot_choose_type+0x38>)
 8000ffc:	e004      	b.n	8001008 <dshot_choose_type+0x2c>
	case DSHOT300:
		return (uint32_t)DSHOT300_HZ;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <dshot_choose_type+0x3c>)
 8001000:	e002      	b.n	8001008 <dshot_choose_type+0x2c>
	case DSHOT600:
		return (uint32_t)DSHOT600_HZ;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <dshot_choose_type+0x40>)
 8001004:	e000      	b.n	8001008 <dshot_choose_type+0x2c>
	default:
		return (uint32_t)0;
 8001006:	2300      	movs	r3, #0
	}
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	002dc6c0 	.word	0x002dc6c0
 8001018:	005b8d80 	.word	0x005b8d80
 800101c:	00b71b00 	.word	0x00b71b00

08001020 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type) {
 8001020:	b580      	push	{r7, lr}
 8001022:	ed2d 8b02 	vpush	{d8}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clk = TIMER_CLOCK; // Might need to do additional clock configurations
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <dshot_set_timer+0xac>)
 8001030:	60fb      	str	r3, [r7, #12]

	// Calculate pre-scaler by dshot_type
	dshot_prescaler = lrintf((float)timer_clk / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ffcc 	bl	8000fdc <dshot_choose_type>
 8001044:	ee07 0a90 	vmov	s15, r0
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001050:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80010d0 <dshot_set_timer+0xb0>
 8001054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	f00c ff16 	bl	800de8c <lrintf>
 8001060:	4603      	mov	r3, r0
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	817b      	strh	r3, [r7, #10]

	// motor 0
	__HAL_TIM_SET_PRESCALER(MOTOR_0_TIM, dshot_prescaler);
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <dshot_set_timer+0xb4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	897a      	ldrh	r2, [r7, #10]
 800106e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_0_TIM, MOTOR_BIT_LENGTH);
 8001070:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <dshot_set_timer+0xb4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2214      	movs	r2, #20
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <dshot_set_timer+0xb4>)
 800107a:	2214      	movs	r2, #20
 800107c:	60da      	str	r2, [r3, #12]

	// motor 1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <dshot_set_timer+0xb8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	897a      	ldrh	r2, [r7, #10]
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BIT_LENGTH);
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <dshot_set_timer+0xb8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2214      	movs	r2, #20
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <dshot_set_timer+0xb8>)
 8001090:	2214      	movs	r2, #20
 8001092:	60da      	str	r2, [r3, #12]

	// motor 2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <dshot_set_timer+0xb4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	897a      	ldrh	r2, [r7, #10]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BIT_LENGTH);
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <dshot_set_timer+0xb4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2214      	movs	r2, #20
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <dshot_set_timer+0xb4>)
 80010a6:	2214      	movs	r2, #20
 80010a8:	60da      	str	r2, [r3, #12]

	// motor 3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <dshot_set_timer+0xb8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	897a      	ldrh	r2, [r7, #10]
 80010b0:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BIT_LENGTH);
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <dshot_set_timer+0xb8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2214      	movs	r2, #20
 80010b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <dshot_set_timer+0xb8>)
 80010bc:	2214      	movs	r2, #20
 80010be:	60da      	str	r2, [r3, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	ecbd 8b02 	vpop	{d8}
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	05f5e100 	.word	0x05f5e100
 80010d0:	3c23d70a 	.word	0x3c23d70a
 80010d4:	200003dc 	.word	0x200003dc
 80010d8:	20000424 	.word	0x20000424

080010dc <dshot_dma_tc_callback>:

static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010e8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d108      	bne.n	8001106 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001102:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8001104:	e028      	b.n	8001158 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d108      	bne.n	8001122 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800111e:	60da      	str	r2, [r3, #12]
}
 8001120:	e01a      	b.n	8001158 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d108      	bne.n	800113e <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800113a:	60da      	str	r2, [r3, #12]
}
 800113c:	e00c      	b.n	8001158 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	d107      	bne.n	8001158 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001156:	60da      	str	r2, [r3, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function() {
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_0_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <dshot_put_tc_callback_function+0x30>)
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <dshot_put_tc_callback_function+0x34>)
 800116e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <dshot_put_tc_callback_function+0x38>)
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <dshot_put_tc_callback_function+0x34>)
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <dshot_put_tc_callback_function+0x30>)
 800117a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117c:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <dshot_put_tc_callback_function+0x34>)
 800117e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <dshot_put_tc_callback_function+0x38>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <dshot_put_tc_callback_function+0x34>)
 8001186:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200003dc 	.word	0x200003dc
 8001198:	080010dd 	.word	0x080010dd
 800119c:	20000424 	.word	0x20000424

080011a0 <dshot_start_pwm>:

/*
 * Start the timer channels.
 * Note: Enabling/disabling DMA request will restart a new cycle without PWM start/stop
 */
static void dshot_start_pwm() {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(MOTOR_0_TIM, MOTOR_0_TIM_CHNL);
 80011a4:	2100      	movs	r1, #0
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <dshot_start_pwm+0x28>)
 80011a8:	f004 ffdc 	bl	8006164 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHNL);
 80011ac:	2104      	movs	r1, #4
 80011ae:	4807      	ldr	r0, [pc, #28]	@ (80011cc <dshot_start_pwm+0x2c>)
 80011b0:	f004 ffd8 	bl	8006164 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHNL);
 80011b4:	2108      	movs	r1, #8
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <dshot_start_pwm+0x28>)
 80011b8:	f004 ffd4 	bl	8006164 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHNL);
 80011bc:	210c      	movs	r1, #12
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <dshot_start_pwm+0x2c>)
 80011c0:	f004 ffd0 	bl	8006164 <HAL_TIM_PWM_Start>

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200003dc 	.word	0x200003dc
 80011cc:	20000424 	.word	0x20000424

080011d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_GPIO_Init+0x4c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <MX_GPIO_Init+0x4c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_GPIO_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_GPIO_Init+0x4c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <MX_GPIO_Init+0x4c>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_GPIO_Init+0x4c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001226:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_I2C1_Init+0x50>)
 800122c:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <MX_I2C1_Init+0x58>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_I2C1_Init+0x50>)
 800123e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001242:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	@ (8001270 <MX_I2C1_Init+0x50>)
 800125e:	f002 f865 	bl	800332c <HAL_I2C_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 fe06 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200002e4 	.word	0x200002e4
 8001274:	40005400 	.word	0x40005400
 8001278:	000186a0 	.word	0x000186a0

0800127c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_I2C_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12b      	bne.n	80012f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a17      	ldr	r2, [pc, #92]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ba:	23c0      	movs	r3, #192	@ 0xc0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <HAL_I2C_MspInit+0x8c>)
 80012d6:	f001 fea5 	bl	8003024 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	@ 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40005400 	.word	0x40005400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <normalize>:

/*
 *  Scales value to specified range
 *  Note: Channel outputs on transmitter have been adjusted to reflect the passed values to the function from normalized_data
 */
static double normalize(double value, double old_min, double old_max, double new_min, double new_max) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0b08 	vstr	d0, [r7, #32]
 8001316:	ed87 1b06 	vstr	d1, [r7, #24]
 800131a:	ed87 2b04 	vstr	d2, [r7, #16]
 800131e:	ed87 3b02 	vstr	d3, [r7, #8]
 8001322:	ed87 4b00 	vstr	d4, [r7]
    return ((double)(value - old_min) * (new_max - new_min) / (double)(old_max - old_min)) + new_min;
 8001326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800132a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800132e:	f7fe ffb3 	bl	8000298 <__aeabi_dsub>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4614      	mov	r4, r2
 8001338:	461d      	mov	r5, r3
 800133a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800133e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001342:	f7fe ffa9 	bl	8000298 <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7ff f95b 	bl	8000608 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800135e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001362:	f7fe ff99 	bl	8000298 <__aeabi_dsub>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff fa75 	bl	800085c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800137e:	f7fe ff8d 	bl	800029c <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b17 	vmov	d7, r2, r3
}
 800138a:	eeb0 0a47 	vmov.f32	s0, s14
 800138e:	eef0 0a67 	vmov.f32	s1, s15
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}

08001398 <normalize_data>:

static void normalize_data(uint16_t* channels, ibus_rx_t* ibus_rx_struct_ptr) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	// state is only set to -1 in process_iBus_data for now, but might make an alg to verify valeus
	float sum = 0;
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
	/* normalize joystick values to be within -1.0 and 1.0 for pitch/roll/yaw and 0.0 to 1.0 for throttle */
	ibus_rx_struct_ptr->ch1 = normalize(channels[0], 4000, 56000, -100, 100), sum += ibus_rx_struct_ptr->ch1;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8b1 	bl	8000514 <__aeabi_ui2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	ed9f 4bb4 	vldr	d4, [pc, #720]	@ 8001688 <normalize_data+0x2f0>
 80013ba:	ed9f 3bb5 	vldr	d3, [pc, #724]	@ 8001690 <normalize_data+0x2f8>
 80013be:	ed9f 2bb6 	vldr	d2, [pc, #728]	@ 8001698 <normalize_data+0x300>
 80013c2:	ed9f 1bb7 	vldr	d1, [pc, #732]	@ 80016a0 <normalize_data+0x308>
 80013c6:	ec43 2b10 	vmov	d0, r2, r3
 80013ca:	f7ff ff9f 	bl	800130c <normalize>
 80013ce:	eeb0 7a40 	vmov.f32	s14, s0
 80013d2:	eef0 7a60 	vmov.f32	s15, s1
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	ed83 7b02 	vstr	d7, [r3, #8]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff f8bb 	bl	8000558 <__aeabi_f2d>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013e8:	f7fe ff58 	bl	800029c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fbe0 	bl	8000bb8 <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch2 = normalize(channels[1], 4000, 56000, -100, 100), sum += ibus_rx_struct_ptr->ch2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3302      	adds	r3, #2
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f886 	bl	8000514 <__aeabi_ui2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	ed9f 4b9e 	vldr	d4, [pc, #632]	@ 8001688 <normalize_data+0x2f0>
 8001410:	ed9f 3b9f 	vldr	d3, [pc, #636]	@ 8001690 <normalize_data+0x2f8>
 8001414:	ed9f 2ba0 	vldr	d2, [pc, #640]	@ 8001698 <normalize_data+0x300>
 8001418:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 80016a0 <normalize_data+0x308>
 800141c:	ec43 2b10 	vmov	d0, r2, r3
 8001420:	f7ff ff74 	bl	800130c <normalize>
 8001424:	eeb0 7a40 	vmov.f32	s14, s0
 8001428:	eef0 7a60 	vmov.f32	s15, s1
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	ed83 7b04 	vstr	d7, [r3, #16]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff f890 	bl	8000558 <__aeabi_f2d>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800143e:	f7fe ff2d 	bl	800029c <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fbb5 	bl	8000bb8 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch3 = normalize(channels[2], 4800, 56000, 0, 100), sum += ibus_rx_struct_ptr->ch3;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f85b 	bl	8000514 <__aeabi_ui2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ed9f 4b89 	vldr	d4, [pc, #548]	@ 8001688 <normalize_data+0x2f0>
 8001466:	ed9f 3b90 	vldr	d3, [pc, #576]	@ 80016a8 <normalize_data+0x310>
 800146a:	ed9f 2b8b 	vldr	d2, [pc, #556]	@ 8001698 <normalize_data+0x300>
 800146e:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 80016b0 <normalize_data+0x318>
 8001472:	ec43 2b10 	vmov	d0, r2, r3
 8001476:	f7ff ff49 	bl	800130c <normalize>
 800147a:	eeb0 7a40 	vmov.f32	s14, s0
 800147e:	eef0 7a60 	vmov.f32	s15, s1
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	ed83 7b06 	vstr	d7, [r3, #24]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff f865 	bl	8000558 <__aeabi_f2d>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001494:	f7fe ff02 	bl	800029c <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb8a 	bl	8000bb8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch4 = normalize(channels[3], 4000, 56000, -100, 100), sum += ibus_rx_struct_ptr->ch4;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3306      	adds	r3, #6
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f830 	bl	8000514 <__aeabi_ui2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	ed9f 4b73 	vldr	d4, [pc, #460]	@ 8001688 <normalize_data+0x2f0>
 80014bc:	ed9f 3b74 	vldr	d3, [pc, #464]	@ 8001690 <normalize_data+0x2f8>
 80014c0:	ed9f 2b75 	vldr	d2, [pc, #468]	@ 8001698 <normalize_data+0x300>
 80014c4:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 80016a0 <normalize_data+0x308>
 80014c8:	ec43 2b10 	vmov	d0, r2, r3
 80014cc:	f7ff ff1e 	bl	800130c <normalize>
 80014d0:	eeb0 7a40 	vmov.f32	s14, s0
 80014d4:	eef0 7a60 	vmov.f32	s15, s1
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	ed83 7b08 	vstr	d7, [r3, #32]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff f83a 	bl	8000558 <__aeabi_f2d>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014ea:	f7fe fed7 	bl	800029c <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb5f 	bl	8000bb8 <__aeabi_d2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	60fb      	str	r3, [r7, #12]

	/* normalize switch values to be between 0.0 and 1.0 */
	ibus_rx_struct_ptr->ch5 = normalize(channels[4], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch5;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3308      	adds	r3, #8
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f805 	bl	8000514 <__aeabi_ui2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	ed9f 4b6a 	vldr	d4, [pc, #424]	@ 80016b8 <normalize_data+0x320>
 8001512:	ed9f 3b65 	vldr	d3, [pc, #404]	@ 80016a8 <normalize_data+0x310>
 8001516:	ed9f 2b6a 	vldr	d2, [pc, #424]	@ 80016c0 <normalize_data+0x328>
 800151a:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 80016c8 <normalize_data+0x330>
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f7ff fef3 	bl	800130c <normalize>
 8001526:	eeb0 7a40 	vmov.f32	s14, s0
 800152a:	eef0 7a60 	vmov.f32	s15, s1
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff f80f 	bl	8000558 <__aeabi_f2d>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001540:	f7fe feac 	bl	800029c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fb34 	bl	8000bb8 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch6 = normalize(channels[5], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch6;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	330a      	adds	r3, #10
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffda 	bl	8000514 <__aeabi_ui2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	ed9f 4b54 	vldr	d4, [pc, #336]	@ 80016b8 <normalize_data+0x320>
 8001568:	ed9f 3b4f 	vldr	d3, [pc, #316]	@ 80016a8 <normalize_data+0x310>
 800156c:	ed9f 2b54 	vldr	d2, [pc, #336]	@ 80016c0 <normalize_data+0x328>
 8001570:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 80016c8 <normalize_data+0x330>
 8001574:	ec43 2b10 	vmov	d0, r2, r3
 8001578:	f7ff fec8 	bl	800130c <normalize>
 800157c:	eeb0 7a40 	vmov.f32	s14, s0
 8001580:	eef0 7a60 	vmov.f32	s15, s1
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_f2d>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001596:	f7fe fe81 	bl	800029c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb09 	bl	8000bb8 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch7 = normalize(channels[6], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch7;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	330c      	adds	r3, #12
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffaf 	bl	8000514 <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	ed9f 4b3f 	vldr	d4, [pc, #252]	@ 80016b8 <normalize_data+0x320>
 80015be:	ed9f 3b3a 	vldr	d3, [pc, #232]	@ 80016a8 <normalize_data+0x310>
 80015c2:	ed9f 2b3f 	vldr	d2, [pc, #252]	@ 80016c0 <normalize_data+0x328>
 80015c6:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 80016c8 <normalize_data+0x330>
 80015ca:	ec43 2b10 	vmov	d0, r2, r3
 80015ce:	f7ff fe9d 	bl	800130c <normalize>
 80015d2:	eeb0 7a40 	vmov.f32	s14, s0
 80015d6:	eef0 7a60 	vmov.f32	s15, s1
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7fe ffb9 	bl	8000558 <__aeabi_f2d>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015ec:	f7fe fe56 	bl	800029c <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fade 	bl	8000bb8 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch8 = normalize(channels[7], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch8;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	330e      	adds	r3, #14
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff84 	bl	8000514 <__aeabi_ui2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	ed9f 4b29 	vldr	d4, [pc, #164]	@ 80016b8 <normalize_data+0x320>
 8001614:	ed9f 3b24 	vldr	d3, [pc, #144]	@ 80016a8 <normalize_data+0x310>
 8001618:	ed9f 2b29 	vldr	d2, [pc, #164]	@ 80016c0 <normalize_data+0x328>
 800161c:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 80016c8 <normalize_data+0x330>
 8001620:	ec43 2b10 	vmov	d0, r2, r3
 8001624:	f7ff fe72 	bl	800130c <normalize>
 8001628:	eeb0 7a40 	vmov.f32	s14, s0
 800162c:	eef0 7a60 	vmov.f32	s15, s1
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7fe ff8e 	bl	8000558 <__aeabi_f2d>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001642:	f7fe fe2b 	bl	800029c <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fab3 	bl	8000bb8 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	60fb      	str	r3, [r7, #12]

	// Update Ibus Rx state
	(ibus_rx_struct_ptr->chsum != sum) ? (ibus_rx_struct_ptr->state = 1), (ibus_rx_struct_ptr->chsum = sum) : (ibus_rx_struct_ptr->state = 0);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800165c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001660:	eeb4 7a67 	vcmp.f32	s14, s15
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d006      	beq.n	8001678 <normalize_data+0x2e0>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001676:	e002      	b.n	800167e <normalize_data+0x2e6>
	(ibus_rx_struct_ptr->chsum != sum) ? (ibus_rx_struct_ptr->state = 1), (ibus_rx_struct_ptr->chsum = sum) : (ibus_rx_struct_ptr->state = 0);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	00000000 	.word	0x00000000
 800168c:	40590000 	.word	0x40590000
 8001690:	00000000 	.word	0x00000000
 8001694:	c0590000 	.word	0xc0590000
 8001698:	00000000 	.word	0x00000000
 800169c:	40eb5800 	.word	0x40eb5800
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40af4000 	.word	0x40af4000
	...
 80016b4:	40b2c000 	.word	0x40b2c000
 80016b8:	00000000 	.word	0x00000000
 80016bc:	3ff00000 	.word	0x3ff00000
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40ec5200 	.word	0x40ec5200
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40eadb00 	.word	0x40eadb00

080016d0 <debug_ibus_channels>:

#ifdef IBUS_DEBUG
static void debug_ibus_channels(ibus_rx_t* ibus_rx_struct_ptr) {
 80016d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d4:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 80016d8:	af0a      	add	r7, sp, #40	@ 0x28
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e2:	6018      	str	r0, [r3, #0]
	// Print channel values and state for debugging
	char message_buffer[500];

	sprintf(message_buffer, "Ch1: %.02f\r\nCh2: %.02f\r\nCh3: %.02f\r\nCh4: %.02f\r\nCh5: %.02f\r\nState: %d\r\n",
 80016e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80016f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001700:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8001704:	f5a1 71fe 	sub.w	r1, r1, #508	@ 0x1fc
 8001708:	6809      	ldr	r1, [r1, #0]
 800170a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800170e:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 8001712:	f5a4 74fe 	sub.w	r4, r4, #508	@ 0x1fc
 8001716:	6824      	ldr	r4, [r4, #0]
 8001718:	e9d4 4508 	ldrd	r4, r5, [r4, #32]
 800171c:	f507 7600 	add.w	r6, r7, #512	@ 0x200
 8001720:	f5a6 76fe 	sub.w	r6, r6, #508	@ 0x1fc
 8001724:	6836      	ldr	r6, [r6, #0]
 8001726:	e9d6 890a 	ldrd	r8, r9, [r6, #40]	@ 0x28
			ibus_rx_struct_ptr->ch1, ibus_rx_struct_ptr->ch2, ibus_rx_struct_ptr->ch3, ibus_rx_struct_ptr->ch4,
			ibus_rx_struct_ptr->ch5,ibus_rx_struct_ptr->state);
 800172a:	f507 7600 	add.w	r6, r7, #512	@ 0x200
 800172e:	f5a6 76fe 	sub.w	r6, r6, #508	@ 0x1fc
 8001732:	6836      	ldr	r6, [r6, #0]
 8001734:	7836      	ldrb	r6, [r6, #0]
	sprintf(message_buffer, "Ch1: %.02f\r\nCh2: %.02f\r\nCh3: %.02f\r\nCh4: %.02f\r\nCh5: %.02f\r\nState: %d\r\n",
 8001736:	f107 0c0c 	add.w	ip, r7, #12
 800173a:	9608      	str	r6, [sp, #32]
 800173c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001740:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001748:	e9cd 2300 	strd	r2, r3, [sp]
 800174c:	4652      	mov	r2, sl
 800174e:	465b      	mov	r3, fp
 8001750:	490b      	ldr	r1, [pc, #44]	@ (8001780 <debug_ibus_channels+0xb0>)
 8001752:	4660      	mov	r0, ip
 8001754:	f00a f9ac 	bl	800bab0 <siprintf>

	CDC_Transmit_FS((uint8_t*)message_buffer, strlen(message_buffer));
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fd8f 	bl	8000280 <strlen>
 8001762:	4603      	mov	r3, r0
 8001764:	b29a      	uxth	r2, r3
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f009 f8f5 	bl	800a95c <CDC_Transmit_FS>
}
 8001772:	bf00      	nop
 8001774:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 8001778:	46bd      	mov	sp, r7
 800177a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177e:	bf00      	nop
 8001780:	0800df28 	.word	0x0800df28

08001784 <process_iBus_data>:
}
#endif /* IBUS_DBUG */

/* Functions */

void process_iBus_data(uint8_t *data, ibus_rx_t* ibus_rx_struct_ptr) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
    uint16_t channels[14];
    uint16_t checksum = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	857b      	strh	r3, [r7, #42]	@ 0x2a
    received_checksum = (uint16_t)(((uint16_t)data[30] << 8) | data[31]);

    if (checksum == received_checksum) {
#endif /* CHECKSUM */
    	// decode buffer packets
        for (int i = 0; i < 14; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001796:	e01a      	b.n	80017ce <process_iBus_data+0x4a>
        	channels[i] = (uint16_t)(((uint16_t)data[2 * i + 3] << 8) | data[2 * i + 2]);
 8001798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	3303      	adds	r3, #3
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	3302      	adds	r3, #2
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	440b      	add	r3, r1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	3330      	adds	r3, #48	@ 0x30
 80017c2:	443b      	add	r3, r7
 80017c4:	f823 2c24 	strh.w	r2, [r3, #-36]
        for (int i = 0; i < 14; i++) {
 80017c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ca:	3301      	adds	r3, #1
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	2b0d      	cmp	r3, #13
 80017d2:	dde1      	ble.n	8001798 <process_iBus_data+0x14>
        }
        // format and store channel data
        normalize_data(channels, ibus_rx_struct_ptr);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fddc 	bl	8001398 <normalize_data>
#ifdef IBUS_DEBUG
        debug_ibus_channels(ibus_rx_struct_ptr);
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ff75 	bl	80016d0 <debug_ibus_channels>
    } else {
        // Handle checksum error
    	debug_ibus_packets(data);
    }
#endif
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	@ 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <read_accel>:
float gyro_error_y = 0;
float gyro_error_z = 0;

/* Static Functions */

static void read_accel(accel* drone_accel) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[6];
	// read 6 bytes of data starting from ACCEL_XOUT_H Register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6, 1000);
 80017f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	2306      	movs	r3, #6
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	223b      	movs	r2, #59	@ 0x3b
 800180c:	21d0      	movs	r1, #208	@ 0xd0
 800180e:	482f      	ldr	r0, [pc, #188]	@ (80018cc <read_accel+0xdc>)
 8001810:	f001 ffca 	bl	80037a8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 8001814:	7a3b      	ldrb	r3, [r7, #8]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	7a7b      	ldrb	r3, [r7, #9]
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b21a      	sxth	r2, r3
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <read_accel+0xe0>)
 8001824:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 8001826:	7abb      	ldrb	r3, [r7, #10]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21a      	sxth	r2, r3
 8001834:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <read_accel+0xe4>)
 8001836:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	b21a      	sxth	r2, r3
 800183e:	7b7b      	ldrb	r3, [r7, #13]
 8001840:	b21b      	sxth	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b21a      	sxth	r2, r3
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <read_accel+0xe8>)
 8001848:	801a      	strh	r2, [r3, #0]

	// convert raw values into g's and store in accel struct
	drone_accel->x = Accel_X_RAW / 16384.0;
 800184a:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <read_accel+0xe0>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe6f 	bl	8000534 <__aeabi_i2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <read_accel+0xec>)
 800185c:	f7fe fffe 	bl	800085c <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f9a6 	bl	8000bb8 <__aeabi_d2f>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
	drone_accel->y = Accel_Y_RAW / 16384.0;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <read_accel+0xe4>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe5b 	bl	8000534 <__aeabi_i2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <read_accel+0xec>)
 8001884:	f7fe ffea 	bl	800085c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f992 	bl	8000bb8 <__aeabi_d2f>
 8001894:	4602      	mov	r2, r0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	605a      	str	r2, [r3, #4]
	drone_accel->z = Accel_Z_RAW / 16384.0;
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <read_accel+0xe8>)
 800189c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe47 	bl	8000534 <__aeabi_i2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <read_accel+0xec>)
 80018ac:	f7fe ffd6 	bl	800085c <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f97e 	bl	8000bb8 <__aeabi_d2f>
 80018bc:	4602      	mov	r2, r0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002e4 	.word	0x200002e4
 80018d0:	20000338 	.word	0x20000338
 80018d4:	2000033a 	.word	0x2000033a
 80018d8:	2000033c 	.word	0x2000033c
 80018dc:	40d00000 	.word	0x40d00000

080018e0 <read_gyro>:

static void read_gyro(gyro* drone_gyro) {
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[6];
	// read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data, 6, 1000);
 80018e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2306      	movs	r3, #6
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2243      	movs	r2, #67	@ 0x43
 80018fc:	21d0      	movs	r1, #208	@ 0xd0
 80018fe:	4848      	ldr	r0, [pc, #288]	@ (8001a20 <read_gyro+0x140>)
 8001900:	f001 ff52 	bl	80037a8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 8001904:	7a3b      	ldrb	r3, [r7, #8]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	7a7b      	ldrb	r3, [r7, #9]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <read_gyro+0x144>)
 8001914:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 8001916:	7abb      	ldrb	r3, [r7, #10]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21a      	sxth	r2, r3
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <read_gyro+0x148>)
 8001926:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001928:	7b3b      	ldrb	r3, [r7, #12]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b21a      	sxth	r2, r3
 800192e:	7b7b      	ldrb	r3, [r7, #13]
 8001930:	b21b      	sxth	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b3d      	ldr	r3, [pc, #244]	@ (8001a2c <read_gyro+0x14c>)
 8001938:	801a      	strh	r2, [r3, #0]

	// convert raw values into degrees per second (dps) and store in gyro struct
	drone_gyro->x = (Gyro_X_RAW / 131.0) - gyro_error_x;
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <read_gyro+0x144>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdf7 	bl	8000534 <__aeabi_i2d>
 8001946:	a334      	add	r3, pc, #208	@ (adr r3, 8001a18 <read_gyro+0x138>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe ff86 	bl	800085c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4614      	mov	r4, r2
 8001956:	461d      	mov	r5, r3
 8001958:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <read_gyro+0x150>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdfb 	bl	8000558 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fc95 	bl	8000298 <__aeabi_dsub>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f91f 	bl	8000bb8 <__aeabi_d2f>
 800197a:	4602      	mov	r2, r0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]
	drone_gyro->y = (Gyro_Y_RAW / 131.0) - gyro_error_y;
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <read_gyro+0x148>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdd4 	bl	8000534 <__aeabi_i2d>
 800198c:	a322      	add	r3, pc, #136	@ (adr r3, 8001a18 <read_gyro+0x138>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe ff63 	bl	800085c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4614      	mov	r4, r2
 800199c:	461d      	mov	r5, r3
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <read_gyro+0x154>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdd8 	bl	8000558 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fc72 	bl	8000298 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f8fc 	bl	8000bb8 <__aeabi_d2f>
 80019c0:	4602      	mov	r2, r0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	605a      	str	r2, [r3, #4]
	drone_gyro->z = (Gyro_Z_RAW / 131.0) - gyro_error_z;
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <read_gyro+0x14c>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdb1 	bl	8000534 <__aeabi_i2d>
 80019d2:	a311      	add	r3, pc, #68	@ (adr r3, 8001a18 <read_gyro+0x138>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe ff40 	bl	800085c <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	461d      	mov	r5, r3
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <read_gyro+0x158>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdb5 	bl	8000558 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fc4f 	bl	8000298 <__aeabi_dsub>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8d9 	bl	8000bb8 <__aeabi_d2f>
 8001a06:	4602      	mov	r2, r0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	f3af 8000 	nop.w
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40606000 	.word	0x40606000
 8001a20:	200002e4 	.word	0x200002e4
 8001a24:	2000033e 	.word	0x2000033e
 8001a28:	20000340 	.word	0x20000340
 8001a2c:	20000342 	.word	0x20000342
 8001a30:	20000348 	.word	0x20000348
 8001a34:	2000034c 	.word	0x2000034c
 8001a38:	20000350 	.word	0x20000350
 8001a3c:	00000000 	.word	0x00000000

08001a40 <read_temp>:

static void read_temp(mpu* drone_mpu) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[2];
	// read 6 BYTES of data starting from
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, TEMP_OUT_H_REG, 1, rec_data, 2, 1000);
 8001a48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2302      	movs	r3, #2
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2241      	movs	r2, #65	@ 0x41
 8001a5c:	21d0      	movs	r1, #208	@ 0xd0
 8001a5e:	4818      	ldr	r0, [pc, #96]	@ (8001ac0 <read_temp+0x80>)
 8001a60:	f001 fea2 	bl	80037a8 <HAL_I2C_Mem_Read>
	raw_temp = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 8001a64:	7b3b      	ldrb	r3, [r7, #12]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	7b7b      	ldrb	r3, [r7, #13]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <read_temp+0x84>)
 8001a74:	801a      	strh	r2, [r3, #0]
	drone_mpu->temp = (raw_temp / 340.0) + 36.53;
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <read_temp+0x84>)
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd59 	bl	8000534 <__aeabi_i2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <read_temp+0x88>)
 8001a88:	f7fe fee8 	bl	800085c <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	a308      	add	r3, pc, #32	@ (adr r3, 8001ab8 <read_temp+0x78>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fbff 	bl	800029c <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f887 	bl	8000bb8 <__aeabi_d2f>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	0a3d70a4 	.word	0x0a3d70a4
 8001abc:	404243d7 	.word	0x404243d7
 8001ac0:	200002e4 	.word	0x200002e4
 8001ac4:	20000344 	.word	0x20000344
 8001ac8:	40754000 	.word	0x40754000

08001acc <calibrate_mpu6050>:

// finds and stores error in gyroscope measurements(~100ms)
static void calibrate_mpu6050() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08e      	sub	sp, #56	@ 0x38
 8001ad0:	af00      	add	r7, sp, #0
	gyro drone_gyro = {0,0,0};
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
	accel drone_accel = {0,0,0};
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]

	mpu test_mpu = {
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	60bb      	str	r3, [r7, #8]
		&drone_gyro,
		&drone_accel
	};

	float error_sum_x = 0;
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
	float error_sum_y = 0;
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	@ 0x30
	float error_sum_z = 0;
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for(int i = 0 ; i < 50 ; i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b22:	e024      	b.n	8001b6e <calibrate_mpu6050+0xa2>
		HAL_Delay(10); //take 0.5 seconds timeout
 8001b24:	200a      	movs	r0, #10
 8001b26:	f000 fe5d 	bl	80027e4 <HAL_Delay>
		read_mpu6050(&test_mpu);
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f8a1 	bl	8001c74 <read_mpu6050>
		error_sum_x += test_mpu.mpu_gyro->x;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		error_sum_y += test_mpu.mpu_gyro->y;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b4a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		error_sum_z += test_mpu.mpu_gyro->z;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b5c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b64:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	for(int i = 0 ; i < 50 ; i++) {
 8001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b70:	2b31      	cmp	r3, #49	@ 0x31
 8001b72:	ddd7      	ble.n	8001b24 <calibrate_mpu6050+0x58>
	}
	gyro_error_x = error_sum_x / 50;
 8001b74:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b78:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001bb4 <calibrate_mpu6050+0xe8>
 8001b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <calibrate_mpu6050+0xec>)
 8001b82:	edc3 7a00 	vstr	s15, [r3]
	gyro_error_y = error_sum_y / 50;
 8001b86:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b8a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001bb4 <calibrate_mpu6050+0xe8>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <calibrate_mpu6050+0xf0>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
	gyro_error_z = error_sum_z / 50;
 8001b98:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b9c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001bb4 <calibrate_mpu6050+0xe8>
 8001ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <calibrate_mpu6050+0xf4>)
 8001ba6:	edc3 7a00 	vstr	s15, [r3]
}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	@ 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	42480000 	.word	0x42480000
 8001bb8:	20000348 	.word	0x20000348
 8001bbc:	2000034c 	.word	0x2000034c
 8001bc0:	20000350 	.word	0x20000350

08001bc4 <init_mpu6050>:
}
#endif /* IMU_DEBUG */

/* Functions */

bool init_mpu6050() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	2275      	movs	r2, #117	@ 0x75
 8001bdc:	21d0      	movs	r1, #208	@ 0xd0
 8001bde:	4824      	ldr	r0, [pc, #144]	@ (8001c70 <init_mpu6050+0xac>)
 8001be0:	f001 fde2 	bl	80037a8 <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b68      	cmp	r3, #104	@ 0x68
 8001be8:	d13d      	bne.n	8001c66 <init_mpu6050+0xa2>
		// wake up sensor using power management register
		data = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MNGMT_1_REG, 1, &data, 1, 1000);
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	1dbb      	adds	r3, r7, #6
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	226b      	movs	r2, #107	@ 0x6b
 8001c00:	21d0      	movs	r1, #208	@ 0xd0
 8001c02:	481b      	ldr	r0, [pc, #108]	@ (8001c70 <init_mpu6050+0xac>)
 8001c04:	f001 fcd6 	bl	80035b4 <HAL_I2C_Mem_Write>

		// set data rate of 1Khz by writing to SMPLRT_DIV register
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	1dbb      	adds	r3, r7, #6
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	2219      	movs	r2, #25
 8001c1a:	21d0      	movs	r1, #208	@ 0xd0
 8001c1c:	4814      	ldr	r0, [pc, #80]	@ (8001c70 <init_mpu6050+0xac>)
 8001c1e:	f001 fcc9 	bl	80035b4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> 2g
		data = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8001c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	1dbb      	adds	r3, r7, #6
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	221c      	movs	r2, #28
 8001c38:	21d0      	movs	r1, #208	@ 0xd0
 8001c3a:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <init_mpu6050+0xac>)
 8001c3c:	f001 fcba 	bl	80035b4 <HAL_I2C_Mem_Write>

		// Set Gyroscopes configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> 250 deg/s
		data = 0x00;
 8001c40:	2300      	movs	r3, #0
 8001c42:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001c44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dbb      	adds	r3, r7, #6
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	221b      	movs	r2, #27
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <init_mpu6050+0xac>)
 8001c5a:	f001 fcab 	bl	80035b4 <HAL_I2C_Mem_Write>

		calibrate_mpu6050(); // calibrate gyro readings
 8001c5e:	f7ff ff35 	bl	8001acc <calibrate_mpu6050>

		return true;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <init_mpu6050+0xa4>
	}

	return false;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200002e4 	.word	0x200002e4

08001c74 <read_mpu6050>:

void read_mpu6050(mpu* drone_mpu) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	read_accel(drone_mpu->mpu_accel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fdb5 	bl	80017f0 <read_accel>
	read_gyro(drone_mpu->mpu_gyro);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe28 	bl	80018e0 <read_gyro>
	read_temp(drone_mpu);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fed5 	bl	8001a40 <read_temp>
#ifdef IMU_DEBUG
	mpu6050_debug(mpu* drone_mpu);
#endif /* IMU_DEBUG */
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca6:	f000 fd2b 	bl	8002700 <HAL_Init>

  /* USER CODE BEGIN Init */

  // up-to 2000 motor speed
  uint16_t motors[4] = {0, 0, 0, 0};
 8001caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb4:	f000 f876 	bl	8001da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb8:	f7ff fa8a 	bl	80011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cbc:	f7ff f944 	bl	8000f48 <MX_DMA_Init>
  MX_TIM2_Init();
 8001cc0:	f000 fa42 	bl	8002148 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001cc4:	f000 faa2 	bl	800220c <MX_TIM5_Init>
  MX_I2C1_Init();
 8001cc8:	f7ff faaa 	bl	8001220 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001ccc:	f008 fd88 	bl	800a7e0 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001cd0:	f000 fc7a 	bl	80025c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // initialize mpu
  bool mpu_init = init_mpu6050();
 8001cd4:	f7ff ff76 	bl	8001bc4 <init_mpu6050>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  gyro drone_gyro = {0,0,0};
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  accel drone_accel = {0,0,0};
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

  mpu drone_mpu = {
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	607b      	str	r3, [r7, #4]
	  &drone_gyro,
	  &drone_accel
  };

  // initialize dshot protocol for communication with esc's
  dshot_init(DSHOT300);
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff f94d 	bl	8000fb8 <dshot_init>

  // initialize ibus count
  uint8_t ibus_rx_count = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(mpu_init) { // check if mpu has initialized correctly
 8001d24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d027      	beq.n	8001d7c <main+0xdc>
		CDC_Transmit_FS((uint8_t*)"Current Position:\n\r", strlen("Current Position:\n\r"));
 8001d2c:	2113      	movs	r1, #19
 8001d2e:	4818      	ldr	r0, [pc, #96]	@ (8001d90 <main+0xf0>)
 8001d30:	f008 fe14 	bl	800a95c <CDC_Transmit_FS>

		// read positional data from mpu
		read_mpu6050(&drone_mpu);
 8001d34:	463b      	mov	r3, r7
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff9c 	bl	8001c74 <read_mpu6050>

		// read desired position data from Rx receiver every 100 cycles
		if(ibus_rx_count == 100) {
 8001d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d40:	2b64      	cmp	r3, #100	@ 0x64
 8001d42:	d115      	bne.n	8001d70 <main+0xd0>
				if(HAL_UART_Receive(&huart1, iBus_rx_buffer, IBUS_BUFFER_SIZE, 1000) == HAL_OK) {
 8001d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d48:	2220      	movs	r2, #32
 8001d4a:	4912      	ldr	r1, [pc, #72]	@ (8001d94 <main+0xf4>)
 8001d4c:	4812      	ldr	r0, [pc, #72]	@ (8001d98 <main+0xf8>)
 8001d4e:	f004 fe77 	bl	8006a40 <HAL_UART_Receive>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <main+0xc8>
						// Check if the received data is a valid iBus packet
						if (iBus_rx_buffer[1] == 0x20) {
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <main+0xf4>)
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	d103      	bne.n	8001d68 <main+0xc8>
							// Process iBus packet
							process_iBus_data(iBus_rx_buffer, &ibus_rx_struct);
 8001d60:	490e      	ldr	r1, [pc, #56]	@ (8001d9c <main+0xfc>)
 8001d62:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <main+0xf4>)
 8001d64:	f7ff fd0e 	bl	8001784 <process_iBus_data>
						}
				}
				// reset count
				ibus_rx_count = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d6e:	e7d9      	b.n	8001d24 <main+0x84>
		} else {ibus_rx_count++;}
 8001d70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d74:	3301      	adds	r3, #1
 8001d76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d7a:	e7d3      	b.n	8001d24 <main+0x84>
	  } else {
		  CDC_Transmit_FS((uint8_t*)"Failed to initialize MPU, retrying...\n\r", strlen("Failed to initialize MPU\n\r"));
 8001d7c:	211a      	movs	r1, #26
 8001d7e:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <main+0x100>)
 8001d80:	f008 fdec 	bl	800a95c <CDC_Transmit_FS>
		  mpu_init = init_mpu6050();
 8001d84:	f7ff ff1e 	bl	8001bc4 <init_mpu6050>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if(mpu_init) { // check if mpu has initialized correctly
 8001d8e:	e7c9      	b.n	8001d24 <main+0x84>
 8001d90:	0800dfa4 	.word	0x0800dfa4
 8001d94:	20000354 	.word	0x20000354
 8001d98:	200005ec 	.word	0x200005ec
 8001d9c:	20000378 	.word	0x20000378
 8001da0:	0800dfb8 	.word	0x0800dfb8

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b094      	sub	sp, #80	@ 0x50
 8001da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	2230      	movs	r2, #48	@ 0x30
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f009 ff5e 	bl	800bc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <SystemClock_Config+0xcc>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	4a27      	ldr	r2, [pc, #156]	@ (8001e70 <SystemClock_Config+0xcc>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <SystemClock_Config+0xcc>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <SystemClock_Config+0xd0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001df0:	4a20      	ldr	r2, [pc, #128]	@ (8001e74 <SystemClock_Config+0xd0>)
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <SystemClock_Config+0xd0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e10:	2302      	movs	r3, #2
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e18:	2310      	movs	r3, #16
 8001e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e1c:	23c0      	movs	r3, #192	@ 0xc0
 8001e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e24:	2304      	movs	r3, #4
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e28:	f107 0320 	add.w	r3, r7, #32
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fcf1 	bl	8005814 <HAL_RCC_OscConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e38:	f000 f81e 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 ff54 	bl	8005d04 <HAL_RCC_ClockConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e62:	f000 f809 	bl	8001e78 <Error_Handler>
  }
}
 8001e66:	bf00      	nop
 8001e68:	3750      	adds	r7, #80	@ 0x50
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40007000 	.word	0x40007000

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <Error_Handler+0x8>

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <NMI_Handler+0x4>

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2a:	f000 fc3b 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <DMA1_Stream1_IRQHandler+0x10>)
 8001f3a:	f000 fe37 	bl	8002bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200004cc 	.word	0x200004cc

08001f48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <DMA1_Stream3_IRQHandler+0x10>)
 8001f4e:	f000 fe2d 	bl	8002bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000058c 	.word	0x2000058c

08001f5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DMA1_Stream4_IRQHandler+0x10>)
 8001f62:	f000 fe23 	bl	8002bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000052c 	.word	0x2000052c

08001f70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <DMA1_Stream5_IRQHandler+0x10>)
 8001f76:	f000 fe19 	bl	8002bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000046c 	.word	0x2000046c

08001f84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <OTG_FS_IRQHandler+0x10>)
 8001f8a:	f002 fb37 	bl	80045fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20001318 	.word	0x20001318

08001f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return 1;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_kill>:

int _kill(int pid, int sig)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb2:	f009 fe6b 	bl	800bc8c <__errno>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2216      	movs	r2, #22
 8001fba:	601a      	str	r2, [r3, #0]
  return -1;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_exit>:

void _exit (int status)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ffe7 	bl	8001fa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fda:	bf00      	nop
 8001fdc:	e7fd      	b.n	8001fda <_exit+0x12>

08001fde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e00a      	b.n	8002006 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff0:	f3af 8000 	nop.w
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	60ba      	str	r2, [r7, #8]
 8001ffc:	b2ca      	uxtb	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	dbf0      	blt.n	8001ff0 <_read+0x12>
  }

  return len;
 800200e:	687b      	ldr	r3, [r7, #4]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e009      	b.n	800203e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	60ba      	str	r2, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbf1      	blt.n	800202a <_write+0x12>
  }
  return len;
 8002046:	687b      	ldr	r3, [r7, #4]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_close>:

int _close(int file)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002078:	605a      	str	r2, [r3, #4]
  return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_isatty>:

int _isatty(int file)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	@ (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f009 fdd0 	bl	800bc8c <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20010000 	.word	0x20010000
 8002118:	00000400 	.word	0x00000400
 800211c:	200003d8 	.word	0x200003d8
 8002120:	20001b68 	.word	0x20001b68

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <MX_TIM2_Init+0xc0>)
 800216c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <MX_TIM2_Init+0xc0>)
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <MX_TIM2_Init+0xc0>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <MX_TIM2_Init+0xc0>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002184:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <MX_TIM2_Init+0xc0>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218a:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <MX_TIM2_Init+0xc0>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002190:	481d      	ldr	r0, [pc, #116]	@ (8002208 <MX_TIM2_Init+0xc0>)
 8002192:	f003 ff97 	bl	80060c4 <HAL_TIM_PWM_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800219c:	f7ff fe6c 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a8:	f107 0320 	add.w	r3, r7, #32
 80021ac:	4619      	mov	r1, r3
 80021ae:	4816      	ldr	r0, [pc, #88]	@ (8002208 <MX_TIM2_Init+0xc0>)
 80021b0:	f004 fb88 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80021ba:	f7ff fe5d 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021be:	2360      	movs	r3, #96	@ 0x60
 80021c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	@ (8002208 <MX_TIM2_Init+0xc0>)
 80021d6:	f004 f875 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80021e0:	f7ff fe4a 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2208      	movs	r2, #8
 80021e8:	4619      	mov	r1, r3
 80021ea:	4807      	ldr	r0, [pc, #28]	@ (8002208 <MX_TIM2_Init+0xc0>)
 80021ec:	f004 f86a 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80021f6:	f7ff fe3f 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021fa:	4803      	ldr	r0, [pc, #12]	@ (8002208 <MX_TIM2_Init+0xc0>)
 80021fc:	f000 f986 	bl	800250c <HAL_TIM_MspPostInit>

}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	@ 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200003dc 	.word	0x200003dc

0800220c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002212:	f107 0320 	add.w	r3, r7, #32
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800222e:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002230:	4a27      	ldr	r2, [pc, #156]	@ (80022d0 <MX_TIM5_Init+0xc4>)
 8002232:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <MX_TIM5_Init+0xc0>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224c:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <MX_TIM5_Init+0xc0>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002252:	481e      	ldr	r0, [pc, #120]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002254:	f003 ff36 	bl	80060c4 <HAL_TIM_PWM_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800225e:	f7ff fe0b 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	4619      	mov	r1, r3
 8002270:	4816      	ldr	r0, [pc, #88]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002272:	f004 fb27 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800227c:	f7ff fdfc 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002280:	2360      	movs	r3, #96	@ 0x60
 8002282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2204      	movs	r2, #4
 8002294:	4619      	mov	r1, r3
 8002296:	480d      	ldr	r0, [pc, #52]	@ (80022cc <MX_TIM5_Init+0xc0>)
 8002298:	f004 f814 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80022a2:	f7ff fde9 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	220c      	movs	r2, #12
 80022aa:	4619      	mov	r1, r3
 80022ac:	4807      	ldr	r0, [pc, #28]	@ (80022cc <MX_TIM5_Init+0xc0>)
 80022ae:	f004 f809 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80022b8:	f7ff fdde 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022bc:	4803      	ldr	r0, [pc, #12]	@ (80022cc <MX_TIM5_Init+0xc0>)
 80022be:	f000 f925 	bl	800250c <HAL_TIM_MspPostInit>

}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	@ 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000424 	.word	0x20000424
 80022d0:	40000c00 	.word	0x40000c00

080022d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e4:	d176      	bne.n	80023d4 <HAL_TIM_PWM_MspInit+0x100>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b7e      	ldr	r3, [pc, #504]	@ (80024e4 <HAL_TIM_PWM_MspInit+0x210>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	4a7d      	ldr	r2, [pc, #500]	@ (80024e4 <HAL_TIM_PWM_MspInit+0x210>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f6:	4b7b      	ldr	r3, [pc, #492]	@ (80024e4 <HAL_TIM_PWM_MspInit+0x210>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002302:	4b79      	ldr	r3, [pc, #484]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002304:	4a79      	ldr	r2, [pc, #484]	@ (80024ec <HAL_TIM_PWM_MspInit+0x218>)
 8002306:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002308:	4b77      	ldr	r3, [pc, #476]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 800230a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800230e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002310:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002312:	2240      	movs	r2, #64	@ 0x40
 8002314:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002316:	4b74      	ldr	r3, [pc, #464]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800231c:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 800231e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002322:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002324:	4b70      	ldr	r3, [pc, #448]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002326:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800232a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800232c:	4b6e      	ldr	r3, [pc, #440]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 800232e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002332:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002334:	4b6c      	ldr	r3, [pc, #432]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800233a:	4b6b      	ldr	r3, [pc, #428]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 800233c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002340:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002342:	4b69      	ldr	r3, [pc, #420]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002348:	4867      	ldr	r0, [pc, #412]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 800234a:	f000 fb81 	bl	8002a50 <HAL_DMA_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8002354:	f7ff fd90 	bl	8001e78 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a63      	ldr	r2, [pc, #396]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
 800235e:	4a62      	ldr	r2, [pc, #392]	@ (80024e8 <HAL_TIM_PWM_MspInit+0x214>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8002364:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002366:	4a63      	ldr	r2, [pc, #396]	@ (80024f4 <HAL_TIM_PWM_MspInit+0x220>)
 8002368:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 800236a:	4b61      	ldr	r3, [pc, #388]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 800236c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002370:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002372:	4b5f      	ldr	r3, [pc, #380]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b5d      	ldr	r3, [pc, #372]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b5c      	ldr	r3, [pc, #368]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002384:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002386:	4b5a      	ldr	r3, [pc, #360]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800238c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800238e:	4b58      	ldr	r3, [pc, #352]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002390:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002394:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002396:	4b56      	ldr	r3, [pc, #344]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002398:	2200      	movs	r2, #0
 800239a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800239c:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 800239e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023a2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a4:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 80023aa:	4851      	ldr	r0, [pc, #324]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 80023ac:	f000 fb50 	bl	8002a50 <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_TIM_PWM_MspInit+0xe6>
    {
      Error_Handler();
 80023b6:	f7ff fd5f 	bl	8001e78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023c0:	4a4b      	ldr	r2, [pc, #300]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a49      	ldr	r2, [pc, #292]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	4a48      	ldr	r2, [pc, #288]	@ (80024f0 <HAL_TIM_PWM_MspInit+0x21c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80023d2:	e083      	b.n	80024dc <HAL_TIM_PWM_MspInit+0x208>
  else if(tim_pwmHandle->Instance==TIM5)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a47      	ldr	r2, [pc, #284]	@ (80024f8 <HAL_TIM_PWM_MspInit+0x224>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d17e      	bne.n	80024dc <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <HAL_TIM_PWM_MspInit+0x210>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	4a3f      	ldr	r2, [pc, #252]	@ (80024e4 <HAL_TIM_PWM_MspInit+0x210>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ee:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_TIM_PWM_MspInit+0x210>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80023fa:	4b40      	ldr	r3, [pc, #256]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 80023fc:	4a40      	ldr	r2, [pc, #256]	@ (8002500 <HAL_TIM_PWM_MspInit+0x22c>)
 80023fe:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002400:	4b3e      	ldr	r3, [pc, #248]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002402:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002406:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002408:	4b3c      	ldr	r3, [pc, #240]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b39      	ldr	r3, [pc, #228]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800241c:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 800241e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002422:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002424:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800242a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800242c:	4b33      	ldr	r3, [pc, #204]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002432:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002434:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002438:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243a:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002440:	482e      	ldr	r0, [pc, #184]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002442:	f000 fb05 	bl	8002a50 <HAL_DMA_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_TIM_PWM_MspInit+0x17c>
      Error_Handler();
 800244c:	f7ff fd14 	bl	8001e78 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a2a      	ldr	r2, [pc, #168]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
 8002456:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <HAL_TIM_PWM_MspInit+0x228>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 800245e:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_TIM_PWM_MspInit+0x234>)
 8002460:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8002462:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002464:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002468:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800246a:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 800246c:	2240      	movs	r2, #64	@ 0x40
 800246e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002470:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002476:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800247c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800247e:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002480:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002484:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002486:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002488:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800248c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 8002496:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800249a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 800249e:	2204      	movs	r2, #4
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80024b4:	4813      	ldr	r0, [pc, #76]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024b6:	f000 facb 	bl	8002a50 <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_TIM_PWM_MspInit+0x1f0>
      Error_Handler();
 80024c0:	f7ff fcda 	bl	8001e78 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_TIM_PWM_MspInit+0x230>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	2000046c 	.word	0x2000046c
 80024ec:	40026088 	.word	0x40026088
 80024f0:	200004cc 	.word	0x200004cc
 80024f4:	40026028 	.word	0x40026028
 80024f8:	40000c00 	.word	0x40000c00
 80024fc:	2000052c 	.word	0x2000052c
 8002500:	40026070 	.word	0x40026070
 8002504:	2000058c 	.word	0x2000058c
 8002508:	40026058 	.word	0x40026058

0800250c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252c:	d11e      	bne.n	800256c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a21      	ldr	r2, [pc, #132]	@ (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800254a:	2305      	movs	r3, #5
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	4816      	ldr	r0, [pc, #88]	@ (80025c0 <HAL_TIM_MspPostInit+0xb4>)
 8002566:	f000 fd5d 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800256a:	e022      	b.n	80025b2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <HAL_TIM_MspPostInit+0xb8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d11d      	bne.n	80025b2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_TIM_MspPostInit+0xb0>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	4a0f      	ldr	r2, [pc, #60]	@ (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002592:	230a      	movs	r3, #10
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025a2:	2302      	movs	r3, #2
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4804      	ldr	r0, [pc, #16]	@ (80025c0 <HAL_TIM_MspPostInit+0xb4>)
 80025ae:	f000 fd39 	bl	8003024 <HAL_GPIO_Init>
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	@ 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40000c00 	.word	0x40000c00

080025c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025cc:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <MX_USART1_UART_Init+0x50>)
 80025d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025da:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025ee:	220c      	movs	r2, #12
 80025f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	@ (8002614 <MX_USART1_UART_Init+0x4c>)
 8002600:	f004 f9ce 	bl	80069a0 <HAL_UART_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800260a:	f7ff fc35 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200005ec 	.word	0x200005ec
 8002618:	40011000 	.word	0x40011000

0800261c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	@ 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <HAL_UART_MspInit+0x84>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d12c      	bne.n	8002698 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <HAL_UART_MspInit+0x88>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <HAL_UART_MspInit+0x88>)
 8002648:	f043 0310 	orr.w	r3, r3, #16
 800264c:	6453      	str	r3, [r2, #68]	@ 0x44
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_UART_MspInit+0x88>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_UART_MspInit+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a10      	ldr	r2, [pc, #64]	@ (80026a4 <HAL_UART_MspInit+0x88>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <HAL_UART_MspInit+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002676:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002688:	2307      	movs	r3, #7
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <HAL_UART_MspInit+0x8c>)
 8002694:	f000 fcc6 	bl	8003024 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002698:	bf00      	nop
 800269a:	3728      	adds	r7, #40	@ 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026b0:	f7ff fd38 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f009 fadd 	bl	800bc98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7ff fadf 	bl	8001ca0 <main>
  bx  lr    
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80026f0:	0800e3d0 	.word	0x0800e3d0
  ldr r2, =_sbss
 80026f4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80026f8:	20001b68 	.word	0x20001b68

080026fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <HAL_Init+0x40>)
 800270a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800270e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <HAL_Init+0x40>)
 8002716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800271a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271c:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <HAL_Init+0x40>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002728:	2003      	movs	r0, #3
 800272a:	f000 f94f 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272e:	200f      	movs	r0, #15
 8002730:	f000 f808 	bl	8002744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002734:	f7ff fba6 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023c00 	.word	0x40023c00

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800274c:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_InitTick+0x54>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_InitTick+0x58>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275a:	fbb3 f3f1 	udiv	r3, r3, r1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f967 	bl	8002a36 <HAL_SYSTICK_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00e      	b.n	8002790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d80a      	bhi.n	800278e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002780:	f000 f92f 	bl	80029e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002784:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_InitTick+0x5c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000000 	.word	0x20000000
 800279c:	20000008 	.word	0x20000008
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_IncTick+0x20>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <HAL_IncTick+0x24>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000008 	.word	0x20000008
 80027c8:	20000634 	.word	0x20000634

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000634 	.word	0x20000634

080027e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff ffee 	bl	80027cc <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027fc:	d005      	beq.n	800280a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_Delay+0x44>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800280a:	bf00      	nop
 800280c:	f7ff ffde 	bl	80027cc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	d8f7      	bhi.n	800280c <HAL_Delay+0x28>
  {
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000008 	.word	0x20000008

0800282c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285e:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	@ (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db0b      	blt.n	80028ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4907      	ldr	r1, [pc, #28]	@ (80028c8 <__NVIC_EnableIRQ+0x38>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2001      	movs	r0, #1
 80028b2:	fa00 f202 	lsl.w	r2, r0, r2
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	@ (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff29 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f4:	f7ff ff3e 	bl	8002874 <__NVIC_GetPriorityGrouping>
 80029f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff8e 	bl	8002920 <NVIC_EncodePriority>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff5d 	bl	80028cc <__NVIC_SetPriority>
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff31 	bl	8002890 <__NVIC_EnableIRQ>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffa2 	bl	8002988 <SysTick_Config>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff feb6 	bl	80027cc <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e099      	b.n	8002ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8c:	e00f      	b.n	8002aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8e:	f7ff fe9d 	bl	80027cc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d908      	bls.n	8002aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e078      	b.n	8002ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e8      	bne.n	8002a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <HAL_DMA_Init+0x158>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0307 	bic.w	r3, r3, #7
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d117      	bne.n	8002b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f9e9 	bl	8002f2c <DMA_CheckFifoParam>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e016      	b.n	8002ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9a0 	bl	8002ec0 <DMA_CalcBaseAndBitshift>
 8002b80:	4603      	mov	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	223f      	movs	r2, #63	@ 0x3f
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	f010803f 	.word	0xf010803f

08002bac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb8:	4b8e      	ldr	r3, [pc, #568]	@ (8002df4 <HAL_DMA_IRQHandler+0x248>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002df8 <HAL_DMA_IRQHandler+0x24c>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0a9b      	lsrs	r3, r3, #10
 8002bc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	2208      	movs	r2, #8
 8002c06:	409a      	lsls	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	2204      	movs	r2, #4
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d012      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	2204      	movs	r2, #4
 8002c72:	409a      	lsls	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	2210      	movs	r2, #16
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d043      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d03c      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d024      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
 8002cda:	e01f      	b.n	8002d1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01b      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e016      	b.n	8002d1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0208 	bic.w	r2, r2, #8
 8002d0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	2220      	movs	r2, #32
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 808f 	beq.w	8002e4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8087 	beq.w	8002e4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	2220      	movs	r2, #32
 8002d44:	409a      	lsls	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d136      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0216 	bic.w	r2, r2, #22
 8002d64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x1da>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0208 	bic.w	r2, r2, #8
 8002d94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	223f      	movs	r2, #63	@ 0x3f
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d07e      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
        }
        return;
 8002dc2:	e079      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10d      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
 8002df0:	e02c      	b.n	8002e4c <HAL_DMA_IRQHandler+0x2a0>
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000
 8002df8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d023      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
 8002e0c:	e01e      	b.n	8002e4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10f      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0210 	bic.w	r2, r2, #16
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d032      	beq.n	8002eba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d022      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2205      	movs	r2, #5
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d307      	bcc.n	8002e94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f2      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x2cc>
 8002e92:	e000      	b.n	8002e96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
 8002eb6:	e000      	b.n	8002eba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eb8:	bf00      	nop
    }
  }
}
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3b10      	subs	r3, #16
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x64>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eda:	4a13      	ldr	r2, [pc, #76]	@ (8002f28 <DMA_CalcBaseAndBitshift+0x68>)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d909      	bls.n	8002f02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	1d1a      	adds	r2, r3, #4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f00:	e007      	b.n	8002f12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	aaaaaaab 	.word	0xaaaaaaab
 8002f28:	0800e040 	.word	0x0800e040

08002f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11f      	bne.n	8002f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d856      	bhi.n	8002ffa <DMA_CheckFifoParam+0xce>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <DMA_CheckFifoParam+0x28>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f77 	.word	0x08002f77
 8002f5c:	08002f65 	.word	0x08002f65
 8002f60:	08002ffb 	.word	0x08002ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d046      	beq.n	8002ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f74:	e043      	b.n	8002ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f7e:	d140      	bne.n	8003002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e03d      	b.n	8003002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f8e:	d121      	bne.n	8002fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d837      	bhi.n	8003006 <DMA_CheckFifoParam+0xda>
 8002f96:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <DMA_CheckFifoParam+0x70>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	08002fb3 	.word	0x08002fb3
 8002fa4:	08002fad 	.word	0x08002fad
 8002fa8:	08002fc5 	.word	0x08002fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	e030      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d025      	beq.n	800300a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e022      	b.n	800300a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fcc:	d11f      	bne.n	800300e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fd2:	e01c      	b.n	800300e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d903      	bls.n	8002fe2 <DMA_CheckFifoParam+0xb6>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d003      	beq.n	8002fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fe0:	e018      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe6:	e015      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff8:	e00b      	b.n	8003012 <DMA_CheckFifoParam+0xe6>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e00a      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
 8003000:	e008      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
 8003004:	e006      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e004      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;   
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
    }
  } 
  
  return status; 
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	e159      	b.n	80032f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 8148 	bne.w	80032ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d005      	beq.n	8003076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003072:	2b02      	cmp	r3, #2
 8003074:	d130      	bne.n	80030d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2203      	movs	r2, #3
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 0201 	and.w	r2, r3, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d017      	beq.n	8003114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d123      	bne.n	8003168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	220f      	movs	r2, #15
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	08da      	lsrs	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3208      	adds	r2, #8
 8003162:	69b9      	ldr	r1, [r7, #24]
 8003164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2203      	movs	r2, #3
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a2 	beq.w	80032ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b57      	ldr	r3, [pc, #348]	@ (800330c <HAL_GPIO_Init+0x2e8>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	4a56      	ldr	r2, [pc, #344]	@ (800330c <HAL_GPIO_Init+0x2e8>)
 80031b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ba:	4b54      	ldr	r3, [pc, #336]	@ (800330c <HAL_GPIO_Init+0x2e8>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c6:	4a52      	ldr	r2, [pc, #328]	@ (8003310 <HAL_GPIO_Init+0x2ec>)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a49      	ldr	r2, [pc, #292]	@ (8003314 <HAL_GPIO_Init+0x2f0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d019      	beq.n	8003226 <HAL_GPIO_Init+0x202>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a48      	ldr	r2, [pc, #288]	@ (8003318 <HAL_GPIO_Init+0x2f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0x1fe>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a47      	ldr	r2, [pc, #284]	@ (800331c <HAL_GPIO_Init+0x2f8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_GPIO_Init+0x1fa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a46      	ldr	r2, [pc, #280]	@ (8003320 <HAL_GPIO_Init+0x2fc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_GPIO_Init+0x1f6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a45      	ldr	r2, [pc, #276]	@ (8003324 <HAL_GPIO_Init+0x300>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_GPIO_Init+0x1f2>
 8003212:	2304      	movs	r3, #4
 8003214:	e008      	b.n	8003228 <HAL_GPIO_Init+0x204>
 8003216:	2307      	movs	r3, #7
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x204>
 800321a:	2303      	movs	r3, #3
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x204>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x204>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x204>
 8003226:	2300      	movs	r3, #0
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003238:	4935      	ldr	r1, [pc, #212]	@ (8003310 <HAL_GPIO_Init+0x2ec>)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003246:	4b38      	ldr	r3, [pc, #224]	@ (8003328 <HAL_GPIO_Init+0x304>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326a:	4a2f      	ldr	r2, [pc, #188]	@ (8003328 <HAL_GPIO_Init+0x304>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003270:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_GPIO_Init+0x304>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003294:	4a24      	ldr	r2, [pc, #144]	@ (8003328 <HAL_GPIO_Init+0x304>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329a:	4b23      	ldr	r3, [pc, #140]	@ (8003328 <HAL_GPIO_Init+0x304>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032be:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_GPIO_Init+0x304>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c4:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <HAL_GPIO_Init+0x304>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003328 <HAL_GPIO_Init+0x304>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f67f aea2 	bls.w	8003040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40013800 	.word	0x40013800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400
 800331c:	40020800 	.word	0x40020800
 8003320:	40020c00 	.word	0x40020c00
 8003324:	40021000 	.word	0x40021000
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e12b      	b.n	8003596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd ff92 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	@ 0x24
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800337e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800338e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003390:	f002 fe70 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 8003394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4a81      	ldr	r2, [pc, #516]	@ (80035a0 <HAL_I2C_Init+0x274>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d807      	bhi.n	80033b0 <HAL_I2C_Init+0x84>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a80      	ldr	r2, [pc, #512]	@ (80035a4 <HAL_I2C_Init+0x278>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bf94      	ite	ls
 80033a8:	2301      	movls	r3, #1
 80033aa:	2300      	movhi	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e006      	b.n	80033be <HAL_I2C_Init+0x92>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a7d      	ldr	r2, [pc, #500]	@ (80035a8 <HAL_I2C_Init+0x27c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0e7      	b.n	8003596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a78      	ldr	r2, [pc, #480]	@ (80035ac <HAL_I2C_Init+0x280>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9b      	lsrs	r3, r3, #18
 80033d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a6a      	ldr	r2, [pc, #424]	@ (80035a0 <HAL_I2C_Init+0x274>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d802      	bhi.n	8003400 <HAL_I2C_Init+0xd4>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3301      	adds	r3, #1
 80033fe:	e009      	b.n	8003414 <HAL_I2C_Init+0xe8>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	4a69      	ldr	r2, [pc, #420]	@ (80035b0 <HAL_I2C_Init+0x284>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	3301      	adds	r3, #1
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	430b      	orrs	r3, r1
 800341a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003426:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	495c      	ldr	r1, [pc, #368]	@ (80035a0 <HAL_I2C_Init+0x274>)
 8003430:	428b      	cmp	r3, r1
 8003432:	d819      	bhi.n	8003468 <HAL_I2C_Init+0x13c>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e59      	subs	r1, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003448:	400b      	ands	r3, r1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_I2C_Init+0x138>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1e59      	subs	r1, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fbb1 f3f3 	udiv	r3, r1, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003462:	e051      	b.n	8003508 <HAL_I2C_Init+0x1dc>
 8003464:	2304      	movs	r3, #4
 8003466:	e04f      	b.n	8003508 <HAL_I2C_Init+0x1dc>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d111      	bne.n	8003494 <HAL_I2C_Init+0x168>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e012      	b.n	80034ba <HAL_I2C_Init+0x18e>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1e58      	subs	r0, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	0099      	lsls	r1, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Init+0x196>
 80034be:	2301      	movs	r3, #1
 80034c0:	e022      	b.n	8003508 <HAL_I2C_Init+0x1dc>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10e      	bne.n	80034e8 <HAL_I2C_Init+0x1bc>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1e58      	subs	r0, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	440b      	add	r3, r1
 80034d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Init+0x1dc>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e58      	subs	r0, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	0099      	lsls	r1, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	6809      	ldr	r1, [r1, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003536:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6911      	ldr	r1, [r2, #16]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	4311      	orrs	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	430b      	orrs	r3, r1
 800354a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	000186a0 	.word	0x000186a0
 80035a4:	001e847f 	.word	0x001e847f
 80035a8:	003d08ff 	.word	0x003d08ff
 80035ac:	431bde83 	.word	0x431bde83
 80035b0:	10624dd3 	.word	0x10624dd3

080035b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ce:	f7ff f8fd 	bl	80027cc <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	f040 80d9 	bne.w	8003794 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2319      	movs	r3, #25
 80035e8:	2201      	movs	r2, #1
 80035ea:	496d      	ldr	r1, [pc, #436]	@ (80037a0 <HAL_I2C_Mem_Write+0x1ec>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fc8b 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0cc      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2C_Mem_Write+0x56>
 8003606:	2302      	movs	r3, #2
 8003608:	e0c5      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d007      	beq.n	8003630 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2221      	movs	r2, #33	@ 0x21
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2240      	movs	r2, #64	@ 0x40
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a4d      	ldr	r2, [pc, #308]	@ (80037a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003670:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003672:	88f8      	ldrh	r0, [r7, #6]
 8003674:	893a      	ldrh	r2, [r7, #8]
 8003676:	8979      	ldrh	r1, [r7, #10]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4603      	mov	r3, r0
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fac2 	bl	8003c0c <I2C_RequestMemoryWrite>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d052      	beq.n	8003734 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e081      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fd50 	bl	800413c <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d107      	bne.n	80036ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06b      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d11b      	bne.n	8003734 <HAL_I2C_Mem_Write+0x180>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1aa      	bne.n	8003692 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fd43 	bl	80041cc <I2C_WaitOnBTFFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2b04      	cmp	r3, #4
 8003752:	d107      	bne.n	8003764 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003762:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e016      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000

080037a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	@ 0x30
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c2:	f7ff f803 	bl	80027cc <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	f040 8214 	bne.w	8003bfe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2319      	movs	r3, #25
 80037dc:	2201      	movs	r2, #1
 80037de:	497b      	ldr	r1, [pc, #492]	@ (80039cc <HAL_I2C_Mem_Read+0x224>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fb91 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	e207      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Mem_Read+0x56>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e200      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d007      	beq.n	8003824 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2222      	movs	r2, #34	@ 0x22
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2240      	movs	r2, #64	@ 0x40
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a5b      	ldr	r2, [pc, #364]	@ (80039d0 <HAL_I2C_Mem_Read+0x228>)
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003866:	88f8      	ldrh	r0, [r7, #6]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4603      	mov	r3, r0
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fa5e 	bl	8003d38 <I2C_RequestMemoryRead>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1bc      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	d113      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e190      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d11b      	bne.n	80038f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e170      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d11b      	bne.n	8003936 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800390c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	e150      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800394c:	e144      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	2b03      	cmp	r3, #3
 8003954:	f200 80f1 	bhi.w	8003b3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	2b01      	cmp	r3, #1
 800395e:	d123      	bne.n	80039a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003962:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fc79 	bl	800425c <I2C_WaitOnRXNEFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e145      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a6:	e117      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d14e      	bne.n	8003a4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b6:	2200      	movs	r2, #0
 80039b8:	4906      	ldr	r1, [pc, #24]	@ (80039d4 <HAL_I2C_Mem_Read+0x22c>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 faa4 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e11a      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
 80039ca:	bf00      	nop
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000
 80039d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a4c:	e0c4      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2200      	movs	r2, #0
 8003a56:	496c      	ldr	r1, [pc, #432]	@ (8003c08 <HAL_I2C_Mem_Read+0x460>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fa55 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0cb      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4955      	ldr	r1, [pc, #340]	@ (8003c08 <HAL_I2C_Mem_Read+0x460>)
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fa27 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e09d      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b38:	e04e      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fb8c 	bl	800425c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e058      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d124      	bne.n	8003bd8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d107      	bne.n	8003ba6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f aeb6 	bne.w	800394e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3728      	adds	r7, #40	@ 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	00010004 	.word	0x00010004

08003c0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f960 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5c:	d103      	bne.n	8003c66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e05f      	b.n	8003d2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c6a:	897b      	ldrh	r3, [r7, #10]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	492d      	ldr	r1, [pc, #180]	@ (8003d34 <I2C_RequestMemoryWrite+0x128>)
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f9bb 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e04c      	b.n	8003d2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	6a39      	ldr	r1, [r7, #32]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fa46 	bl	800413c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d107      	bne.n	8003cce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02b      	b.n	8003d2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd8:	893b      	ldrh	r3, [r7, #8]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	611a      	str	r2, [r3, #16]
 8003ce2:	e021      	b.n	8003d28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf4:	6a39      	ldr	r1, [r7, #32]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa20 	bl	800413c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d107      	bne.n	8003d1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e005      	b.n	8003d2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1e:	893b      	ldrh	r3, [r7, #8]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	00010002 	.word	0x00010002

08003d38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8c2 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d98:	d103      	bne.n	8003da2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0aa      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003da6:	897b      	ldrh	r3, [r7, #10]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	4952      	ldr	r1, [pc, #328]	@ (8003f04 <I2C_RequestMemoryRead+0x1cc>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f91d 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e097      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f9a8 	bl	800413c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e076      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	e021      	b.n	8003e64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	6a39      	ldr	r1, [r7, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f982 	bl	800413c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d107      	bne.n	8003e56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e050      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5a:	893b      	ldrh	r3, [r7, #8]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e66:	6a39      	ldr	r1, [r7, #32]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f967 	bl	800413c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e035      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f82b 	bl	8003f08 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec6:	d103      	bne.n	8003ed0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e013      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ed4:	897b      	ldrh	r3, [r7, #10]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	4906      	ldr	r1, [pc, #24]	@ (8003f04 <I2C_RequestMemoryRead+0x1cc>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f886 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	00010002 	.word	0x00010002

08003f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f18:	e048      	b.n	8003fac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f20:	d044      	beq.n	8003fac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe fc53 	bl	80027cc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d139      	bne.n	8003fac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10d      	bne.n	8003f5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	e00c      	b.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d116      	bne.n	8003fac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e023      	b.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10d      	bne.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	e00c      	b.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d093      	beq.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800400a:	e071      	b.n	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d123      	bne.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004034:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	f043 0204 	orr.w	r2, r3, #4
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e067      	b.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406a:	d041      	beq.n	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406c:	f7fe fbae 	bl	80027cc <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d302      	bcc.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d136      	bne.n	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10c      	bne.n	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e00b      	b.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e021      	b.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10c      	bne.n	8004114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	43da      	mvns	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e00b      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	f47f af6d 	bne.w	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004148:	e034      	b.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8e3 	bl	8004316 <I2C_IsAcknowledgeFailed>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e034      	b.n	80041c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004160:	d028      	beq.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fe fb33 	bl	80027cc <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11d      	bne.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	2b80      	cmp	r3, #128	@ 0x80
 8004184:	d016      	beq.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e007      	b.n	80041c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041be:	2b80      	cmp	r3, #128	@ 0x80
 80041c0:	d1c3      	bne.n	800414a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d8:	e034      	b.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f89b 	bl	8004316 <I2C_IsAcknowledgeFailed>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e034      	b.n	8004254 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041f0:	d028      	beq.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fe faeb 	bl	80027cc <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11d      	bne.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d016      	beq.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b04      	cmp	r3, #4
 8004250:	d1c3      	bne.n	80041da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004268:	e049      	b.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	d119      	bne.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0210 	mvn.w	r2, #16
 8004280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e030      	b.n	800430e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ac:	f7fe fa8e 	bl	80027cc <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11d      	bne.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b40      	cmp	r3, #64	@ 0x40
 80042ce:	d016      	beq.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e007      	b.n	800430e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004308:	2b40      	cmp	r3, #64	@ 0x40
 800430a:	d1ae      	bne.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	d11b      	bne.n	8004366 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004336:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f043 0204 	orr.w	r2, r3, #4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af02      	add	r7, sp, #8
 800437a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e101      	b.n	800458a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f006 fc23 	bl	800abec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043b4:	d102      	bne.n	80043bc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 f81c 	bl	80073fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7c1a      	ldrb	r2, [r3, #16]
 80043ce:	f88d 2000 	strb.w	r2, [sp]
 80043d2:	3304      	adds	r3, #4
 80043d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043d6:	f002 fefb 	bl	80071d0 <USB_CoreInit>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0ce      	b.n	800458a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f003 f814 	bl	8007420 <USB_SetCurrentMode>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0bf      	b.n	800458a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e04a      	b.n	80044a6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3315      	adds	r3, #21
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3314      	adds	r3, #20
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	b298      	uxth	r0, r3
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	332e      	adds	r3, #46	@ 0x2e
 800444c:	4602      	mov	r2, r0
 800444e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3318      	adds	r3, #24
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	331c      	adds	r3, #28
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3320      	adds	r3, #32
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3324      	adds	r3, #36	@ 0x24
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	3301      	adds	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	791b      	ldrb	r3, [r3, #4]
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3af      	bcc.n	8004410 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e044      	b.n	8004540 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	3301      	adds	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	791b      	ldrb	r3, [r3, #4]
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3b5      	bcc.n	80044b6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7c1a      	ldrb	r2, [r3, #16]
 8004552:	f88d 2000 	strb.w	r2, [sp]
 8004556:	3304      	adds	r3, #4
 8004558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800455a:	f002 ffad 	bl	80074b8 <USB_DevInit>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e00c      	b.n	800458a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f003 fff1 	bl	800856a <USB_DevDisconnect>

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_PCD_Start+0x1c>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e022      	b.n	80045f4 <HAL_PCD_Start+0x62>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d105      	bne.n	80045d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f002 fefe 	bl	80073dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f003 ff9f 	bl	8008528 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b08d      	sub	sp, #52	@ 0x34
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f004 f85d 	bl	80086d2 <USB_GetMode>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 848c 	bne.w	8004f38 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f003 ffc1 	bl	80085ac <USB_ReadInterrupts>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8482 	beq.w	8004f36 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f003 ffae 	bl	80085ac <USB_ReadInterrupts>
 8004650:	4603      	mov	r3, r0
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d107      	bne.n	800466a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f002 0202 	and.w	r2, r2, #2
 8004668:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f003 ff9c 	bl	80085ac <USB_ReadInterrupts>
 8004674:	4603      	mov	r3, r0
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b10      	cmp	r3, #16
 800467c:	d161      	bne.n	8004742 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0210 	bic.w	r2, r2, #16
 800468c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	3304      	adds	r3, #4
 80046ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	0c5b      	lsrs	r3, r3, #17
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d124      	bne.n	8004704 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d035      	beq.n	8004732 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	6a38      	ldr	r0, [r7, #32]
 80046da:	f003 fdd3 	bl	8008284 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ea:	441a      	add	r2, r3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046fc:	441a      	add	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	615a      	str	r2, [r3, #20]
 8004702:	e016      	b.n	8004732 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	0c5b      	lsrs	r3, r3, #17
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	2b06      	cmp	r3, #6
 800470e:	d110      	bne.n	8004732 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004716:	2208      	movs	r2, #8
 8004718:	4619      	mov	r1, r3
 800471a:	6a38      	ldr	r0, [r7, #32]
 800471c:	f003 fdb2 	bl	8008284 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800472c:	441a      	add	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0210 	orr.w	r2, r2, #16
 8004740:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f003 ff30 	bl	80085ac <USB_ReadInterrupts>
 800474c:	4603      	mov	r3, r0
 800474e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004752:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004756:	f040 80a7 	bne.w	80048a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 ff35 	bl	80085d2 <USB_ReadDevAllOutEpInterrupt>
 8004768:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800476a:	e099      	b.n	80048a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 808e 	beq.w	8004894 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f003 ff59 	bl	800863a <USB_ReadDevOutEPInterrupt>
 8004788:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00c      	beq.n	80047ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a0:	461a      	mov	r2, r3
 80047a2:	2301      	movs	r3, #1
 80047a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80047a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fea1 	bl	80054f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c4:	461a      	mov	r2, r3
 80047c6:	2308      	movs	r3, #8
 80047c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80047ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 ff77 	bl	80056c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	2310      	movs	r3, #16
 80047ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d030      	beq.n	800485a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004800:	2b80      	cmp	r3, #128	@ 0x80
 8004802:	d109      	bne.n	8004818 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004816:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	3304      	adds	r3, #4
 800482c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d108      	bne.n	8004848 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f006 face 	bl	800ade4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	2302      	movs	r3, #2
 8004858:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	2320      	movs	r3, #32
 8004874:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488c:	461a      	mov	r2, r3
 800488e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004892:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f47f af62 	bne.w	800476c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f003 fe7d 	bl	80085ac <USB_ReadInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048bc:	f040 80db 	bne.w	8004a76 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f003 fe9e 	bl	8008606 <USB_ReadDevAllInEpInterrupt>
 80048ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80048d0:	e0cd      	b.n	8004a6e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80c2 	beq.w	8004a62 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f003 fec4 	bl	8008676 <USB_ReadDevInEPInterrupt>
 80048ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d057      	beq.n	80049aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	2201      	movs	r2, #1
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	43db      	mvns	r3, r3
 8004914:	69f9      	ldr	r1, [r7, #28]
 8004916:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800491a:	4013      	ands	r3, r2
 800491c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492a:	461a      	mov	r2, r3
 800492c:	2301      	movs	r3, #1
 800492e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	799b      	ldrb	r3, [r3, #6]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d132      	bne.n	800499e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	3320      	adds	r3, #32
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494e:	4613      	mov	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4403      	add	r3, r0
 8004958:	331c      	adds	r3, #28
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4419      	add	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004962:	4613      	mov	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4403      	add	r3, r0
 800496c:	3320      	adds	r3, #32
 800496e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d113      	bne.n	800499e <HAL_PCD_IRQHandler+0x3a2>
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3324      	adds	r3, #36	@ 0x24
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004996:	461a      	mov	r2, r3
 8004998:	2101      	movs	r1, #1
 800499a:	f003 fecb 	bl	8008734 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f006 f9a2 	bl	800acee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c0:	461a      	mov	r2, r3
 80049c2:	2308      	movs	r3, #8
 80049c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049dc:	461a      	mov	r2, r3
 80049de:	2310      	movs	r3, #16
 80049e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f8:	461a      	mov	r2, r3
 80049fa:	2340      	movs	r3, #64	@ 0x40
 80049fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d023      	beq.n	8004a50 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a0a:	6a38      	ldr	r0, [r7, #32]
 8004a0c:	f002 feb8 	bl	8007780 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3310      	adds	r3, #16
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3304      	adds	r3, #4
 8004a22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d108      	bne.n	8004a3e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f006 f9e5 	bl	800ae08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fcbb 	bl	80053d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	3301      	adds	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f af2e 	bne.w	80048d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 fd96 	bl	80085ac <USB_ReadInterrupts>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a8a:	d122      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d108      	bne.n	8004abc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fea1 	bl	80057fc <HAL_PCDEx_LPM_Callback>
 8004aba:	e002      	b.n	8004ac2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f006 f983 	bl	800adc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 fd68 	bl	80085ac <USB_ReadInterrupts>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae6:	d112      	bne.n	8004b0e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d102      	bne.n	8004afe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f006 f93f 	bl	800ad7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004b0c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f003 fd4a 	bl	80085ac <USB_ReadInterrupts>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b22:	f040 80b7 	bne.w	8004c94 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2110      	movs	r1, #16
 8004b40:	4618      	mov	r0, r3
 8004b42:	f002 fe1d 	bl	8007780 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b4a:	e046      	b.n	8004bda <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bd2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d3b2      	bcc.n	8004b4c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004bf8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	7bdb      	ldrb	r3, [r3, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c12:	f043 030b 	orr.w	r3, r3, #11
 8004c16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c28:	f043 030b 	orr.w	r3, r3, #11
 8004c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c2e:	e015      	b.n	8004c5c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c42:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004c46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c56:	f043 030b 	orr.w	r3, r3, #11
 8004c5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f003 fd58 	bl	8008734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f003 fc87 	bl	80085ac <USB_ReadInterrupts>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca8:	d123      	bne.n	8004cf2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fd1d 	bl	80086ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f002 fdda 	bl	8007872 <USB_GetDevSpeed>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681c      	ldr	r4, [r3, #0]
 8004cca:	f001 f9c7 	bl	800605c <HAL_RCC_GetHCLKFreq>
 8004cce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f002 fade 	bl	8007298 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f006 f82e 	bl	800ad3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f003 fc58 	bl	80085ac <USB_ReadInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d10a      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f006 f80b 	bl	800ad22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f002 0208 	and.w	r2, r2, #8
 8004d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f003 fc43 	bl	80085ac <USB_ReadInterrupts>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2c:	2b80      	cmp	r3, #128	@ 0x80
 8004d2e:	d123      	bne.n	8004d78 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	e014      	b.n	8004d6c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb08 	bl	8005376 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	3301      	adds	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	791b      	ldrb	r3, [r3, #4]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d3e4      	bcc.n	8004d42 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 fc15 	bl	80085ac <USB_ReadInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8c:	d13c      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d8e:	2301      	movs	r3, #1
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d92:	e02b      	b.n	8004dec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3318      	adds	r3, #24
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d115      	bne.n	8004de6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004dba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da12      	bge.n	8004de6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3317      	adds	r3, #23
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fac8 	bl	8005376 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	3301      	adds	r3, #1
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d3cd      	bcc.n	8004d94 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f003 fbcd 	bl	80085ac <USB_ReadInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e1c:	d156      	bne.n	8004ecc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e1e:	2301      	movs	r3, #1
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e22:	e045      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d12e      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	da2b      	bge.n	8004eaa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004e5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d121      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ea6:	6053      	str	r3, [r2, #4]
            break;
 8004ea8:	e008      	b.n	8004ebc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	3301      	adds	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	791b      	ldrb	r3, [r3, #4]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d3b3      	bcc.n	8004e24 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 fb6b 	bl	80085ac <USB_ReadInterrupts>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f005 ffa2 	bl	800ae2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f003 fb55 	bl	80085ac <USB_ReadInterrupts>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d115      	bne.n	8004f38 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f005 ff92 	bl	800ae48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	e000      	b.n	8004f38 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004f36:	bf00      	nop
    }
  }
}
 8004f38:	3734      	adds	r7, #52	@ 0x34
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd90      	pop	{r4, r7, pc}

08004f3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_PCD_SetAddress+0x1a>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e012      	b.n	8004f7e <HAL_PCD_SetAddress+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 fab4 	bl	80084dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4611      	mov	r1, r2
 8004f92:	461a      	mov	r2, r3
 8004f94:	4603      	mov	r3, r0
 8004f96:	70fb      	strb	r3, [r7, #3]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	803b      	strh	r3, [r7, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	da0f      	bge.n	8004fcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3310      	adds	r3, #16
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	705a      	strb	r2, [r3, #1]
 8004fca:	e00f      	b.n	8004fec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ff8:	883a      	ldrh	r2, [r7, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	78ba      	ldrb	r2, [r7, #2]
 8005002:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005016:	78bb      	ldrb	r3, [r7, #2]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d102      	bne.n	8005022 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_PCD_EP_Open+0xaa>
 800502c:	2302      	movs	r3, #2
 800502e:	e00e      	b.n	800504e <HAL_PCD_EP_Open+0xc8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	4618      	mov	r0, r3
 8005040:	f002 fc3c 	bl	80078bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800504c:	7afb      	ldrb	r3, [r7, #11]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005066:	2b00      	cmp	r3, #0
 8005068:	da0f      	bge.n	800508a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	3310      	adds	r3, #16
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	3304      	adds	r3, #4
 8005080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	705a      	strb	r2, [r3, #1]
 8005088:	e00f      	b.n	80050aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	3304      	adds	r3, #4
 80050a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_PCD_EP_Close+0x6e>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e00e      	b.n	80050e2 <HAL_PCD_EP_Close+0x8c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68f9      	ldr	r1, [r7, #12]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f002 fc7a 	bl	80079cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	460b      	mov	r3, r1
 80050f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050fa:	7afb      	ldrb	r3, [r7, #11]
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	3304      	adds	r3, #4
 8005112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2200      	movs	r2, #0
 8005124:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800512c:	7afb      	ldrb	r3, [r7, #11]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	b2da      	uxtb	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	799b      	ldrb	r3, [r3, #6]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d102      	bne.n	8005146 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	799b      	ldrb	r3, [r3, #6]
 800514e:	461a      	mov	r2, r3
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	f002 fd17 	bl	8007b84 <USB_EPStartXfer>

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	460b      	mov	r3, r1
 800519e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051a0:	7afb      	ldrb	r3, [r7, #11]
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	3310      	adds	r3, #16
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2200      	movs	r2, #0
 80051c8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2201      	movs	r2, #1
 80051ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	799b      	ldrb	r3, [r3, #6]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d102      	bne.n	80051ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	799b      	ldrb	r3, [r3, #6]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6979      	ldr	r1, [r7, #20]
 80051f6:	f002 fcc5 	bl	8007b84 <USB_EPStartXfer>

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	7912      	ldrb	r2, [r2, #4]
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e04f      	b.n	80052c2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005226:	2b00      	cmp	r3, #0
 8005228:	da0f      	bge.n	800524a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	f003 020f 	and.w	r2, r3, #15
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	3310      	adds	r3, #16
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	705a      	strb	r2, [r3, #1]
 8005248:	e00d      	b.n	8005266 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_PCD_EP_SetStall+0x82>
 8005282:	2302      	movs	r3, #2
 8005284:	e01d      	b.n	80052c2 <HAL_PCD_EP_SetStall+0xbe>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	4618      	mov	r0, r3
 8005296:	f003 f84d 	bl	8008334 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7999      	ldrb	r1, [r3, #6]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052b2:	461a      	mov	r2, r3
 80052b4:	f003 fa3e 	bl	8008734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	7912      	ldrb	r2, [r2, #4]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e042      	b.n	800536e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da0f      	bge.n	8005310 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	f003 020f 	and.w	r2, r3, #15
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	3310      	adds	r3, #16
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	3304      	adds	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	705a      	strb	r2, [r3, #1]
 800530e:	e00f      	b.n	8005330 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	3304      	adds	r3, #4
 8005328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_PCD_EP_ClrStall+0x86>
 800534c:	2302      	movs	r3, #2
 800534e:	e00e      	b.n	800536e <HAL_PCD_EP_ClrStall+0xa4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	4618      	mov	r0, r3
 8005360:	f003 f856 	bl	8008410 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005386:	2b00      	cmp	r3, #0
 8005388:	da0c      	bge.n	80053a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	f003 020f 	and.w	r2, r3, #15
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	3310      	adds	r3, #16
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	3304      	adds	r3, #4
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e00c      	b.n	80053be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	3304      	adds	r3, #4
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f002 fe75 	bl	80080b4 <USB_EPStopXfer>
 80053ca:	4603      	mov	r3, r0
 80053cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053ce:	7afb      	ldrb	r3, [r7, #11]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	@ 0x28
 80053dc:	af02      	add	r7, sp, #8
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	3310      	adds	r3, #16
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	3304      	adds	r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	429a      	cmp	r2, r3
 800540a:	d901      	bls.n	8005410 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e06b      	b.n	80054e8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	429a      	cmp	r2, r3
 8005424:	d902      	bls.n	800542c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3303      	adds	r3, #3
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005434:	e02a      	b.n	800548c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d902      	bls.n	8005452 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3303      	adds	r3, #3
 8005456:	089b      	lsrs	r3, r3, #2
 8005458:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68d9      	ldr	r1, [r3, #12]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4603      	mov	r3, r0
 800546e:	6978      	ldr	r0, [r7, #20]
 8005470:	f002 feca 	bl	8008208 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	441a      	add	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	441a      	add	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d809      	bhi.n	80054b6 <PCD_WriteEmptyTxFifo+0xde>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d203      	bcs.n	80054b6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1bf      	bne.n	8005436 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d811      	bhi.n	80054e6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	2201      	movs	r2, #1
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	43db      	mvns	r3, r3
 80054dc:	6939      	ldr	r1, [r7, #16]
 80054de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054e2:	4013      	ands	r3, r2
 80054e4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3720      	adds	r7, #32
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	333c      	adds	r3, #60	@ 0x3c
 8005508:	3304      	adds	r3, #4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	799b      	ldrb	r3, [r3, #6]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d17b      	bne.n	800561e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4a61      	ldr	r2, [pc, #388]	@ (80056b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	f240 80b9 	bls.w	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80b3 	beq.w	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005558:	6093      	str	r3, [r2, #8]
 800555a:	e0a7      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005572:	461a      	mov	r2, r3
 8005574:	2320      	movs	r3, #32
 8005576:	6093      	str	r3, [r2, #8]
 8005578:	e098      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 8093 	bne.w	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	4a4b      	ldr	r2, [pc, #300]	@ (80056b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d90f      	bls.n	80055ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	461a      	mov	r2, r3
 80055a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055aa:	6093      	str	r3, [r2, #8]
 80055ac:	e07e      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	3304      	adds	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	440b      	add	r3, r1
 80055d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d114      	bne.n	8005610 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055f8:	461a      	mov	r2, r3
 80055fa:	2101      	movs	r1, #1
 80055fc:	f003 f89a 	bl	8008734 <USB_EP0_OutStart>
 8005600:	e006      	b.n	8005610 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f005 fb4e 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
 800561c:	e046      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4a26      	ldr	r2, [pc, #152]	@ (80056bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d124      	bne.n	8005670 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005642:	6093      	str	r3, [r2, #8]
 8005644:	e032      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	461a      	mov	r2, r3
 800565e:	2320      	movs	r3, #32
 8005660:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f005 fb25 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
 800566e:	e01d      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d114      	bne.n	80056a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005698:	461a      	mov	r2, r3
 800569a:	2100      	movs	r1, #0
 800569c:	f003 f84a 	bl	8008734 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f005 fb06 	bl	800acb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	4f54300a 	.word	0x4f54300a
 80056bc:	4f54310a 	.word	0x4f54310a

080056c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	333c      	adds	r3, #60	@ 0x3c
 80056d8:	3304      	adds	r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <PCD_EP_OutSetupPacket_int+0x88>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d90e      	bls.n	8005714 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570c:	461a      	mov	r2, r3
 800570e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005712:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f005 fabd 	bl	800ac94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a0a      	ldr	r2, [pc, #40]	@ (8005748 <PCD_EP_OutSetupPacket_int+0x88>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d90c      	bls.n	800573c <PCD_EP_OutSetupPacket_int+0x7c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	799b      	ldrb	r3, [r3, #6]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d108      	bne.n	800573c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005734:	461a      	mov	r2, r3
 8005736:	2101      	movs	r1, #1
 8005738:	f002 fffc 	bl	8008734 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	4f54300a 	.word	0x4f54300a

0800574c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
 8005758:	4613      	mov	r3, r2
 800575a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800576a:	883b      	ldrh	r3, [r7, #0]
 800576c:	0419      	lsls	r1, r3, #16
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	430a      	orrs	r2, r1
 8005776:	629a      	str	r2, [r3, #40]	@ 0x28
 8005778:	e028      	b.n	80057cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4413      	add	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005788:	2300      	movs	r3, #0
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e00d      	b.n	80057aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	3340      	adds	r3, #64	@ 0x40
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	3301      	adds	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d3ec      	bcc.n	800578e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80057b4:	883b      	ldrh	r3, [r7, #0]
 80057b6:	0418      	lsls	r0, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6819      	ldr	r1, [r3, #0]
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	3b01      	subs	r3, #1
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	4302      	orrs	r2, r0
 80057c4:	3340      	adds	r3, #64	@ 0x40
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	887a      	ldrh	r2, [r7, #2]
 80057ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e267      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d075      	beq.n	800591e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005832:	4b88      	ldr	r3, [pc, #544]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b04      	cmp	r3, #4
 800583c:	d00c      	beq.n	8005858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800583e:	4b85      	ldr	r3, [pc, #532]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005846:	2b08      	cmp	r3, #8
 8005848:	d112      	bne.n	8005870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800584a:	4b82      	ldr	r3, [pc, #520]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005856:	d10b      	bne.n	8005870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	4b7e      	ldr	r3, [pc, #504]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d05b      	beq.n	800591c <HAL_RCC_OscConfig+0x108>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d157      	bne.n	800591c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e242      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005878:	d106      	bne.n	8005888 <HAL_RCC_OscConfig+0x74>
 800587a:	4b76      	ldr	r3, [pc, #472]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a75      	ldr	r2, [pc, #468]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e01d      	b.n	80058c4 <HAL_RCC_OscConfig+0xb0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005890:	d10c      	bne.n	80058ac <HAL_RCC_OscConfig+0x98>
 8005892:	4b70      	ldr	r3, [pc, #448]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6f      	ldr	r2, [pc, #444]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e00b      	b.n	80058c4 <HAL_RCC_OscConfig+0xb0>
 80058ac:	4b69      	ldr	r3, [pc, #420]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a68      	ldr	r2, [pc, #416]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	4b66      	ldr	r3, [pc, #408]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a65      	ldr	r2, [pc, #404]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d013      	beq.n	80058f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fc ff7e 	bl	80027cc <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fc ff7a 	bl	80027cc <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	@ 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e207      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0xc0>
 80058f2:	e014      	b.n	800591e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fc ff6a 	bl	80027cc <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058fc:	f7fc ff66 	bl	80027cc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	@ 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e1f3      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590e:	4b51      	ldr	r3, [pc, #324]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0xe8>
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800592a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800593e:	2b08      	cmp	r3, #8
 8005940:	d11c      	bne.n	800597c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005942:	4b44      	ldr	r3, [pc, #272]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d116      	bne.n	800597c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_RCC_OscConfig+0x152>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d001      	beq.n	8005966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e1c7      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4937      	ldr	r1, [pc, #220]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800597a:	e03a      	b.n	80059f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005984:	4b34      	ldr	r3, [pc, #208]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc ff1f 	bl	80027cc <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005992:	f7fc ff1b 	bl	80027cc <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e1a8      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4925      	ldr	r1, [pc, #148]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]
 80059c4:	e015      	b.n	80059f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c6:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc fefe 	bl	80027cc <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059d4:	f7fc fefa 	bl	80027cc <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e187      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d036      	beq.n	8005a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a06:	4b15      	ldr	r3, [pc, #84]	@ (8005a5c <HAL_RCC_OscConfig+0x248>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fc fede 	bl	80027cc <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a14:	f7fc feda 	bl	80027cc <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e167      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a26:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_RCC_OscConfig+0x240>)
 8005a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0x200>
 8005a32:	e01b      	b.n	8005a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a34:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <HAL_RCC_OscConfig+0x248>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3a:	f7fc fec7 	bl	80027cc <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a40:	e00e      	b.n	8005a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a42:	f7fc fec3 	bl	80027cc <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d907      	bls.n	8005a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e150      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
 8005a54:	40023800 	.word	0x40023800
 8005a58:	42470000 	.word	0x42470000
 8005a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a60:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ea      	bne.n	8005a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8097 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b81      	ldr	r3, [pc, #516]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	4a7c      	ldr	r2, [pc, #496]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aaa:	4b77      	ldr	r3, [pc, #476]	@ (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d118      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab6:	4b74      	ldr	r3, [pc, #464]	@ (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a73      	ldr	r2, [pc, #460]	@ (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac2:	f7fc fe83 	bl	80027cc <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aca:	f7fc fe7f 	bl	80027cc <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e10c      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c88 <HAL_RCC_OscConfig+0x474>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d106      	bne.n	8005afe <HAL_RCC_OscConfig+0x2ea>
 8005af0:	4b64      	ldr	r3, [pc, #400]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af4:	4a63      	ldr	r2, [pc, #396]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005afc:	e01c      	b.n	8005b38 <HAL_RCC_OscConfig+0x324>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x30c>
 8005b06:	4b5f      	ldr	r3, [pc, #380]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	f043 0304 	orr.w	r3, r3, #4
 8005b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b12:	4b5c      	ldr	r3, [pc, #368]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b16:	4a5b      	ldr	r2, [pc, #364]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b1e:	e00b      	b.n	8005b38 <HAL_RCC_OscConfig+0x324>
 8005b20:	4b58      	ldr	r3, [pc, #352]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b24:	4a57      	ldr	r2, [pc, #348]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b2c:	4b55      	ldr	r3, [pc, #340]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b30:	4a54      	ldr	r2, [pc, #336]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b32:	f023 0304 	bic.w	r3, r3, #4
 8005b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b40:	f7fc fe44 	bl	80027cc <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b48:	f7fc fe40 	bl	80027cc <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e0cb      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5e:	4b49      	ldr	r3, [pc, #292]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0ee      	beq.n	8005b48 <HAL_RCC_OscConfig+0x334>
 8005b6a:	e014      	b.n	8005b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b6c:	f7fc fe2e 	bl	80027cc <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b72:	e00a      	b.n	8005b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b74:	f7fc fe2a 	bl	80027cc <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e0b5      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1ee      	bne.n	8005b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9c:	4b39      	ldr	r3, [pc, #228]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	4a38      	ldr	r2, [pc, #224]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80a1 	beq.w	8005cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bb2:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d05c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d141      	bne.n	8005c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc6:	4b31      	ldr	r3, [pc, #196]	@ (8005c8c <HAL_RCC_OscConfig+0x478>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fc fdfe 	bl	80027cc <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd4:	f7fc fdfa 	bl	80027cc <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e087      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be6:	4b27      	ldr	r3, [pc, #156]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	041b      	lsls	r3, r3, #16
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	061b      	lsls	r3, r3, #24
 8005c16:	491b      	ldr	r1, [pc, #108]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_RCC_OscConfig+0x478>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fc fdd3 	bl	80027cc <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2a:	f7fc fdcf 	bl	80027cc <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e05c      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3c:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x416>
 8005c48:	e054      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <HAL_RCC_OscConfig+0x478>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fc fdbc 	bl	80027cc <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c58:	f7fc fdb8 	bl	80027cc <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e045      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x444>
 8005c76:	e03d      	b.n	8005cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e038      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40007000 	.word	0x40007000
 8005c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c90:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <HAL_RCC_OscConfig+0x4ec>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d028      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d121      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d11a      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d111      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800

08005d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0cc      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d18:	4b68      	ldr	r3, [pc, #416]	@ (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d90c      	bls.n	8005d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d26:	4b65      	ldr	r3, [pc, #404]	@ (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2e:	4b63      	ldr	r3, [pc, #396]	@ (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0b8      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d020      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d58:	4b59      	ldr	r3, [pc, #356]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	4a58      	ldr	r2, [pc, #352]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d70:	4b53      	ldr	r3, [pc, #332]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a52      	ldr	r2, [pc, #328]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7c:	4b50      	ldr	r3, [pc, #320]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	494d      	ldr	r1, [pc, #308]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d044      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d107      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da2:	4b47      	ldr	r3, [pc, #284]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d119      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e07f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d003      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e06f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e067      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005de2:	4b37      	ldr	r3, [pc, #220]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f023 0203 	bic.w	r2, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4934      	ldr	r1, [pc, #208]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005df4:	f7fc fcea 	bl	80027cc <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfa:	e00a      	b.n	8005e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dfc:	f7fc fce6 	bl	80027cc <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e04f      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 020c 	and.w	r2, r3, #12
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d1eb      	bne.n	8005dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e24:	4b25      	ldr	r3, [pc, #148]	@ (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d20c      	bcs.n	8005e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b22      	ldr	r3, [pc, #136]	@ (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b20      	ldr	r3, [pc, #128]	@ (8005ebc <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e032      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e58:	4b19      	ldr	r3, [pc, #100]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4916      	ldr	r1, [pc, #88]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e76:	4b12      	ldr	r3, [pc, #72]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	490e      	ldr	r1, [pc, #56]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e8a:	f000 f821 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	091b      	lsrs	r3, r3, #4
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	490a      	ldr	r1, [pc, #40]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e9c:	5ccb      	ldrb	r3, [r1, r3]
 8005e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea2:	4a09      	ldr	r2, [pc, #36]	@ (8005ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ea6:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <HAL_RCC_ClockConfig+0x1c8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fc fc4a 	bl	8002744 <HAL_InitTick>

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40023c00 	.word	0x40023c00
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	0800e028 	.word	0x0800e028
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	20000004 	.word	0x20000004

08005ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed4:	b090      	sub	sp, #64	@ 0x40
 8005ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005edc:	2300      	movs	r3, #0
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ee8:	4b59      	ldr	r3, [pc, #356]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d00d      	beq.n	8005f10 <HAL_RCC_GetSysClockFreq+0x40>
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	f200 80a1 	bhi.w	800603c <HAL_RCC_GetSysClockFreq+0x16c>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_RCC_GetSysClockFreq+0x34>
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d003      	beq.n	8005f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f02:	e09b      	b.n	800603c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f04:	4b53      	ldr	r3, [pc, #332]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f06:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005f08:	e09b      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f0a:	4b53      	ldr	r3, [pc, #332]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f0e:	e098      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f10:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f18:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d028      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f26:	4b4a      	ldr	r3, [pc, #296]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	099b      	lsrs	r3, r3, #6
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	623b      	str	r3, [r7, #32]
 8005f30:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4b47      	ldr	r3, [pc, #284]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f3c:	fb03 f201 	mul.w	r2, r3, r1
 8005f40:	2300      	movs	r3, #0
 8005f42:	fb00 f303 	mul.w	r3, r0, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	4a43      	ldr	r2, [pc, #268]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8005f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f50:	460a      	mov	r2, r1
 8005f52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f56:	4413      	add	r3, r2
 8005f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	61fa      	str	r2, [r7, #28]
 8005f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005f6a:	f7fa fe75 	bl	8000c58 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4613      	mov	r3, r2
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f76:	e053      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f78:	4b35      	ldr	r3, [pc, #212]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	099b      	lsrs	r3, r3, #6
 8005f7e:	2200      	movs	r2, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	617a      	str	r2, [r7, #20]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f8a:	f04f 0b00 	mov.w	fp, #0
 8005f8e:	4652      	mov	r2, sl
 8005f90:	465b      	mov	r3, fp
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	0159      	lsls	r1, r3, #5
 8005f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa0:	0150      	lsls	r0, r2, #5
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8005faa:	eb63 090b 	sbc.w	r9, r3, fp
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8005fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	00eb      	lsls	r3, r5, #3
 8005fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fd8:	00e2      	lsls	r2, r4, #3
 8005fda:	4614      	mov	r4, r2
 8005fdc:	461d      	mov	r5, r3
 8005fde:	eb14 030a 	adds.w	r3, r4, sl
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	eb45 030b 	adc.w	r3, r5, fp
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	028b      	lsls	r3, r1, #10
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006000:	4621      	mov	r1, r4
 8006002:	028a      	lsls	r2, r1, #10
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600a:	2200      	movs	r2, #0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	60fa      	str	r2, [r7, #12]
 8006010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006014:	f7fa fe20 	bl	8000c58 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4613      	mov	r3, r2
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006020:	4b0b      	ldr	r3, [pc, #44]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x180>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	3301      	adds	r3, #1
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006030:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800603a:	e002      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800603c:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x184>)
 800603e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006044:	4618      	mov	r0, r3
 8006046:	3740      	adds	r7, #64	@ 0x40
 8006048:	46bd      	mov	sp, r7
 800604a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800604e:	bf00      	nop
 8006050:	40023800 	.word	0x40023800
 8006054:	00f42400 	.word	0x00f42400
 8006058:	017d7840 	.word	0x017d7840

0800605c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006060:	4b03      	ldr	r3, [pc, #12]	@ (8006070 <HAL_RCC_GetHCLKFreq+0x14>)
 8006062:	681b      	ldr	r3, [r3, #0]
}
 8006064:	4618      	mov	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20000000 	.word	0x20000000

08006074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006078:	f7ff fff0 	bl	800605c <HAL_RCC_GetHCLKFreq>
 800607c:	4602      	mov	r2, r0
 800607e:	4b05      	ldr	r3, [pc, #20]	@ (8006094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0a9b      	lsrs	r3, r3, #10
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4903      	ldr	r1, [pc, #12]	@ (8006098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800608a:	5ccb      	ldrb	r3, [r1, r3]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006090:	4618      	mov	r0, r3
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40023800 	.word	0x40023800
 8006098:	0800e038 	.word	0x0800e038

0800609c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060a0:	f7ff ffdc 	bl	800605c <HAL_RCC_GetHCLKFreq>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	0b5b      	lsrs	r3, r3, #13
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	4903      	ldr	r1, [pc, #12]	@ (80060c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b2:	5ccb      	ldrb	r3, [r1, r3]
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40023800 	.word	0x40023800
 80060c0:	0800e038 	.word	0x0800e038

080060c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e041      	b.n	800615a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fc f8f2 	bl	80022d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f000 f9a0 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <HAL_TIM_PWM_Start+0x24>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e022      	b.n	80061ce <HAL_TIM_PWM_Start+0x6a>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b04      	cmp	r3, #4
 800618c:	d109      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x3e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	e015      	b.n	80061ce <HAL_TIM_PWM_Start+0x6a>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d109      	bne.n	80061bc <HAL_TIM_PWM_Start+0x58>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e008      	b.n	80061ce <HAL_TIM_PWM_Start+0x6a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e068      	b.n	80062a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_PWM_Start+0x82>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061e4:	e013      	b.n	800620e <HAL_TIM_PWM_Start+0xaa>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_PWM_Start+0x92>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061f4:	e00b      	b.n	800620e <HAL_TIM_PWM_Start+0xaa>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_PWM_Start+0xa2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006204:	e003      	b.n	800620e <HAL_TIM_PWM_Start+0xaa>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2201      	movs	r2, #1
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fb2e 	bl	8006878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a23      	ldr	r2, [pc, #140]	@ (80062b0 <HAL_TIM_PWM_Start+0x14c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d107      	bne.n	8006236 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1d      	ldr	r2, [pc, #116]	@ (80062b0 <HAL_TIM_PWM_Start+0x14c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d018      	beq.n	8006272 <HAL_TIM_PWM_Start+0x10e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006248:	d013      	beq.n	8006272 <HAL_TIM_PWM_Start+0x10e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <HAL_TIM_PWM_Start+0x150>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00e      	beq.n	8006272 <HAL_TIM_PWM_Start+0x10e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a17      	ldr	r2, [pc, #92]	@ (80062b8 <HAL_TIM_PWM_Start+0x154>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d009      	beq.n	8006272 <HAL_TIM_PWM_Start+0x10e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a16      	ldr	r2, [pc, #88]	@ (80062bc <HAL_TIM_PWM_Start+0x158>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d004      	beq.n	8006272 <HAL_TIM_PWM_Start+0x10e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a14      	ldr	r2, [pc, #80]	@ (80062c0 <HAL_TIM_PWM_Start+0x15c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d111      	bne.n	8006296 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b06      	cmp	r3, #6
 8006282:	d010      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006294:	e007      	b.n	80062a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40010000 	.word	0x40010000
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40000800 	.word	0x40000800
 80062bc:	40000c00 	.word	0x40000c00
 80062c0:	40014000 	.word	0x40014000

080062c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062de:	2302      	movs	r3, #2
 80062e0:	e0ae      	b.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b0c      	cmp	r3, #12
 80062ee:	f200 809f 	bhi.w	8006430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062f2:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800632d 	.word	0x0800632d
 80062fc:	08006431 	.word	0x08006431
 8006300:	08006431 	.word	0x08006431
 8006304:	08006431 	.word	0x08006431
 8006308:	0800636d 	.word	0x0800636d
 800630c:	08006431 	.word	0x08006431
 8006310:	08006431 	.word	0x08006431
 8006314:	08006431 	.word	0x08006431
 8006318:	080063af 	.word	0x080063af
 800631c:	08006431 	.word	0x08006431
 8006320:	08006431 	.word	0x08006431
 8006324:	08006431 	.word	0x08006431
 8006328:	080063ef 	.word	0x080063ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f914 	bl	8006560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0208 	orr.w	r2, r2, #8
 8006346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6999      	ldr	r1, [r3, #24]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	619a      	str	r2, [r3, #24]
      break;
 800636a:	e064      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	4618      	mov	r0, r3
 8006374:	f000 f95a 	bl	800662c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6999      	ldr	r1, [r3, #24]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	619a      	str	r2, [r3, #24]
      break;
 80063ac:	e043      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f9a5 	bl	8006704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0208 	orr.w	r2, r2, #8
 80063c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0204 	bic.w	r2, r2, #4
 80063d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69d9      	ldr	r1, [r3, #28]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	61da      	str	r2, [r3, #28]
      break;
 80063ec:	e023      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 f9ef 	bl	80067d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69d9      	ldr	r1, [r3, #28]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	021a      	lsls	r2, r3, #8
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	61da      	str	r2, [r3, #28]
      break;
 800642e:	e002      	b.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a3a      	ldr	r2, [pc, #232]	@ (8006544 <TIM_Base_SetConfig+0xfc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0x38>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0x38>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <TIM_Base_SetConfig+0x100>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0x38>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a36      	ldr	r2, [pc, #216]	@ (800654c <TIM_Base_SetConfig+0x104>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x38>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a35      	ldr	r2, [pc, #212]	@ (8006550 <TIM_Base_SetConfig+0x108>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2b      	ldr	r2, [pc, #172]	@ (8006544 <TIM_Base_SetConfig+0xfc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01b      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a0:	d017      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a28      	ldr	r2, [pc, #160]	@ (8006548 <TIM_Base_SetConfig+0x100>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a27      	ldr	r2, [pc, #156]	@ (800654c <TIM_Base_SetConfig+0x104>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00f      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a26      	ldr	r2, [pc, #152]	@ (8006550 <TIM_Base_SetConfig+0x108>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a25      	ldr	r2, [pc, #148]	@ (8006554 <TIM_Base_SetConfig+0x10c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a24      	ldr	r2, [pc, #144]	@ (8006558 <TIM_Base_SetConfig+0x110>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_Base_SetConfig+0x8a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a23      	ldr	r2, [pc, #140]	@ (800655c <TIM_Base_SetConfig+0x114>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d108      	bne.n	80064e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a0e      	ldr	r2, [pc, #56]	@ (8006544 <TIM_Base_SetConfig+0xfc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d103      	bne.n	8006518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b01      	cmp	r3, #1
 8006528:	d105      	bne.n	8006536 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	611a      	str	r2, [r3, #16]
  }
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f023 0201 	bic.w	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0302 	bic.w	r3, r3, #2
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <TIM_OC1_SetConfig+0xc8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d10c      	bne.n	80065d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0308 	bic.w	r3, r3, #8
 80065c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 0304 	bic.w	r3, r3, #4
 80065d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a13      	ldr	r2, [pc, #76]	@ (8006628 <TIM_OC1_SetConfig+0xc8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d111      	bne.n	8006602 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	621a      	str	r2, [r3, #32]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40010000 	.word	0x40010000

0800662c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f023 0210 	bic.w	r2, r3, #16
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0320 	bic.w	r3, r3, #32
 8006676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1e      	ldr	r2, [pc, #120]	@ (8006700 <TIM_OC2_SetConfig+0xd4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d10d      	bne.n	80066a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <TIM_OC2_SetConfig+0xd4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000

08006704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800674c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <TIM_OC3_SetConfig+0xd0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d10d      	bne.n	800677e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	@ (80067d4 <TIM_OC3_SetConfig+0xd0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d113      	bne.n	80067ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800678c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40010000 	.word	0x40010000

080067d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	031b      	lsls	r3, r3, #12
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a10      	ldr	r2, [pc, #64]	@ (8006874 <TIM_OC4_SetConfig+0x9c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d109      	bne.n	800684c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	019b      	lsls	r3, r3, #6
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000

08006878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	2201      	movs	r2, #1
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	43db      	mvns	r3, r3
 800689a:	401a      	ands	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d8:	2302      	movs	r3, #2
 80068da:	e050      	b.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1c      	ldr	r2, [pc, #112]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d018      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006928:	d013      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a18      	ldr	r2, [pc, #96]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00e      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a16      	ldr	r2, [pc, #88]	@ (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d009      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a13      	ldr	r2, [pc, #76]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d10c      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4313      	orrs	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40014000 	.word	0x40014000

080069a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e042      	b.n	8006a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fe28 	bl	800261c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	@ 0x24
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f97f 	bl	8006ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695a      	ldr	r2, [r3, #20]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	@ 0x28
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	f040 8081 	bne.w	8006b64 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_UART_Receive+0x2e>
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e079      	b.n	8006b66 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2222      	movs	r2, #34	@ 0x22
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fb fea1 	bl	80027cc <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa0:	d108      	bne.n	8006ab4 <HAL_UART_Receive+0x74>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e003      	b.n	8006abc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006abc:	e047      	b.n	8006b4e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2120      	movs	r1, #32
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f850 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e042      	b.n	8006b66 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	3302      	adds	r3, #2
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e01f      	b.n	8006b40 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b08:	d007      	beq.n	8006b1a <HAL_UART_Receive+0xda>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_UART_Receive+0xe8>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	e008      	b.n	8006b3a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1b2      	bne.n	8006abe <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7e:	e03b      	b.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b86:	d037      	beq.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b88:	f7fb fe20 	bl	80027cc <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e03a      	b.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d023      	beq.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b80      	cmp	r3, #128	@ 0x80
 8006bb4:	d020      	beq.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b40      	cmp	r3, #64	@ 0x40
 8006bba:	d01d      	beq.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0308 	and.w	r3, r3, #8
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d116      	bne.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f81d 	bl	8006c20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2208      	movs	r2, #8
 8006bea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e00f      	b.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4013      	ands	r3, r2
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	bf0c      	ite	eq
 8006c08:	2301      	moveq	r3, #1
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d0b4      	beq.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b095      	sub	sp, #84	@ 0x54
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c48:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e5      	bne.n	8006c28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3314      	adds	r3, #20
 8006c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f023 0301 	bic.w	r3, r3, #1
 8006c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e5      	bne.n	8006c5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d119      	bne.n	8006ccc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb8:	61ba      	str	r2, [r7, #24]
 8006cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6979      	ldr	r1, [r7, #20]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e5      	bne.n	8006c98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cda:	bf00      	nop
 8006cdc:	3754      	adds	r7, #84	@ 0x54
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cec:	b0c0      	sub	sp, #256	@ 0x100
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d04:	68d9      	ldr	r1, [r3, #12]
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	ea40 0301 	orr.w	r3, r0, r1
 8006d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d40:	f021 010c 	bic.w	r1, r1, #12
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d62:	6999      	ldr	r1, [r3, #24]
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	ea40 0301 	orr.w	r3, r0, r1
 8006d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b8f      	ldr	r3, [pc, #572]	@ (8006fb4 <UART_SetConfig+0x2cc>)
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d005      	beq.n	8006d88 <UART_SetConfig+0xa0>
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b8d      	ldr	r3, [pc, #564]	@ (8006fb8 <UART_SetConfig+0x2d0>)
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d104      	bne.n	8006d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d88:	f7ff f988 	bl	800609c <HAL_RCC_GetPCLK2Freq>
 8006d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d90:	e003      	b.n	8006d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7ff f96f 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 8006d96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da4:	f040 810c 	bne.w	8006fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006db2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	1891      	adds	r1, r2, r2
 8006dc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006dc2:	415b      	adcs	r3, r3
 8006dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006dca:	4621      	mov	r1, r4
 8006dcc:	eb12 0801 	adds.w	r8, r2, r1
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	eb43 0901 	adc.w	r9, r3, r1
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dea:	4690      	mov	r8, r2
 8006dec:	4699      	mov	r9, r3
 8006dee:	4623      	mov	r3, r4
 8006df0:	eb18 0303 	adds.w	r3, r8, r3
 8006df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006df8:	462b      	mov	r3, r5
 8006dfa:	eb49 0303 	adc.w	r3, r9, r3
 8006dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e16:	460b      	mov	r3, r1
 8006e18:	18db      	adds	r3, r3, r3
 8006e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	eb42 0303 	adc.w	r3, r2, r3
 8006e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e2c:	f7f9 ff14 	bl	8000c58 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <UART_SetConfig+0x2d4>)
 8006e36:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	011c      	lsls	r4, r3, #4
 8006e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	1891      	adds	r1, r2, r2
 8006e56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e60:	4641      	mov	r1, r8
 8006e62:	eb12 0a01 	adds.w	sl, r2, r1
 8006e66:	4649      	mov	r1, r9
 8006e68:	eb43 0b01 	adc.w	fp, r3, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e80:	4692      	mov	sl, r2
 8006e82:	469b      	mov	fp, r3
 8006e84:	4643      	mov	r3, r8
 8006e86:	eb1a 0303 	adds.w	r3, sl, r3
 8006e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	eb4b 0303 	adc.w	r3, fp, r3
 8006e94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006eac:	460b      	mov	r3, r1
 8006eae:	18db      	adds	r3, r3, r3
 8006eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	eb42 0303 	adc.w	r3, r2, r3
 8006eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ec2:	f7f9 fec9 	bl	8000c58 <__aeabi_uldivmod>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8006fbc <UART_SetConfig+0x2d4>)
 8006ece:	fba3 2301 	umull	r2, r3, r3, r1
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	2264      	movs	r2, #100	@ 0x64
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	1acb      	subs	r3, r1, r3
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ee2:	4b36      	ldr	r3, [pc, #216]	@ (8006fbc <UART_SetConfig+0x2d4>)
 8006ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ef0:	441c      	add	r4, r3
 8006ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006efc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f04:	4642      	mov	r2, r8
 8006f06:	464b      	mov	r3, r9
 8006f08:	1891      	adds	r1, r2, r2
 8006f0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f0c:	415b      	adcs	r3, r3
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f14:	4641      	mov	r1, r8
 8006f16:	1851      	adds	r1, r2, r1
 8006f18:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	414b      	adcs	r3, r1
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f2c:	4659      	mov	r1, fp
 8006f2e:	00cb      	lsls	r3, r1, #3
 8006f30:	4651      	mov	r1, sl
 8006f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f36:	4651      	mov	r1, sl
 8006f38:	00ca      	lsls	r2, r1, #3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4642      	mov	r2, r8
 8006f42:	189b      	adds	r3, r3, r2
 8006f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f48:	464b      	mov	r3, r9
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f68:	460b      	mov	r3, r1
 8006f6a:	18db      	adds	r3, r3, r3
 8006f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f6e:	4613      	mov	r3, r2
 8006f70:	eb42 0303 	adc.w	r3, r2, r3
 8006f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f7e:	f7f9 fe6b 	bl	8000c58 <__aeabi_uldivmod>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <UART_SetConfig+0x2d4>)
 8006f88:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	2164      	movs	r1, #100	@ 0x64
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	3332      	adds	r3, #50	@ 0x32
 8006f9a:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <UART_SetConfig+0x2d4>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 0207 	and.w	r2, r3, #7
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4422      	add	r2, r4
 8006fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fb0:	e106      	b.n	80071c0 <UART_SetConfig+0x4d8>
 8006fb2:	bf00      	nop
 8006fb4:	40011000 	.word	0x40011000
 8006fb8:	40011400 	.word	0x40011400
 8006fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	1891      	adds	r1, r2, r2
 8006fd8:	6239      	str	r1, [r7, #32]
 8006fda:	415b      	adcs	r3, r3
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	1854      	adds	r4, r2, r1
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	eb43 0501 	adc.w	r5, r3, r1
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	00eb      	lsls	r3, r5, #3
 8006ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ffa:	00e2      	lsls	r2, r4, #3
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	461d      	mov	r5, r3
 8007000:	4643      	mov	r3, r8
 8007002:	18e3      	adds	r3, r4, r3
 8007004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007008:	464b      	mov	r3, r9
 800700a:	eb45 0303 	adc.w	r3, r5, r3
 800700e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800701e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800702e:	4629      	mov	r1, r5
 8007030:	008b      	lsls	r3, r1, #2
 8007032:	4621      	mov	r1, r4
 8007034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007038:	4621      	mov	r1, r4
 800703a:	008a      	lsls	r2, r1, #2
 800703c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007040:	f7f9 fe0a 	bl	8000c58 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4b60      	ldr	r3, [pc, #384]	@ (80071cc <UART_SetConfig+0x4e4>)
 800704a:	fba3 2302 	umull	r2, r3, r3, r2
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	011c      	lsls	r4, r3, #4
 8007052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007056:	2200      	movs	r2, #0
 8007058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800705c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007064:	4642      	mov	r2, r8
 8007066:	464b      	mov	r3, r9
 8007068:	1891      	adds	r1, r2, r2
 800706a:	61b9      	str	r1, [r7, #24]
 800706c:	415b      	adcs	r3, r3
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007074:	4641      	mov	r1, r8
 8007076:	1851      	adds	r1, r2, r1
 8007078:	6139      	str	r1, [r7, #16]
 800707a:	4649      	mov	r1, r9
 800707c:	414b      	adcs	r3, r1
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800708c:	4659      	mov	r1, fp
 800708e:	00cb      	lsls	r3, r1, #3
 8007090:	4651      	mov	r1, sl
 8007092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007096:	4651      	mov	r1, sl
 8007098:	00ca      	lsls	r2, r1, #3
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	4603      	mov	r3, r0
 80070a0:	4642      	mov	r2, r8
 80070a2:	189b      	adds	r3, r3, r2
 80070a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070a8:	464b      	mov	r3, r9
 80070aa:	460a      	mov	r2, r1
 80070ac:	eb42 0303 	adc.w	r3, r2, r3
 80070b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070cc:	4649      	mov	r1, r9
 80070ce:	008b      	lsls	r3, r1, #2
 80070d0:	4641      	mov	r1, r8
 80070d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d6:	4641      	mov	r1, r8
 80070d8:	008a      	lsls	r2, r1, #2
 80070da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070de:	f7f9 fdbb 	bl	8000c58 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	4b38      	ldr	r3, [pc, #224]	@ (80071cc <UART_SetConfig+0x4e4>)
 80070ea:	fba3 2301 	umull	r2, r3, r3, r1
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	2264      	movs	r2, #100	@ 0x64
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	1acb      	subs	r3, r1, r3
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	3332      	adds	r3, #50	@ 0x32
 80070fc:	4a33      	ldr	r2, [pc, #204]	@ (80071cc <UART_SetConfig+0x4e4>)
 80070fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007108:	441c      	add	r4, r3
 800710a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800710e:	2200      	movs	r2, #0
 8007110:	673b      	str	r3, [r7, #112]	@ 0x70
 8007112:	677a      	str	r2, [r7, #116]	@ 0x74
 8007114:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	1891      	adds	r1, r2, r2
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	415b      	adcs	r3, r3
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007128:	4641      	mov	r1, r8
 800712a:	1851      	adds	r1, r2, r1
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	4649      	mov	r1, r9
 8007130:	414b      	adcs	r3, r1
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007140:	4659      	mov	r1, fp
 8007142:	00cb      	lsls	r3, r1, #3
 8007144:	4651      	mov	r1, sl
 8007146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800714a:	4651      	mov	r1, sl
 800714c:	00ca      	lsls	r2, r1, #3
 800714e:	4610      	mov	r0, r2
 8007150:	4619      	mov	r1, r3
 8007152:	4603      	mov	r3, r0
 8007154:	4642      	mov	r2, r8
 8007156:	189b      	adds	r3, r3, r2
 8007158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800715a:	464b      	mov	r3, r9
 800715c:	460a      	mov	r2, r1
 800715e:	eb42 0303 	adc.w	r3, r2, r3
 8007162:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	663b      	str	r3, [r7, #96]	@ 0x60
 800716e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800717c:	4649      	mov	r1, r9
 800717e:	008b      	lsls	r3, r1, #2
 8007180:	4641      	mov	r1, r8
 8007182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007186:	4641      	mov	r1, r8
 8007188:	008a      	lsls	r2, r1, #2
 800718a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800718e:	f7f9 fd63 	bl	8000c58 <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <UART_SetConfig+0x4e4>)
 8007198:	fba3 1302 	umull	r1, r3, r3, r2
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	2164      	movs	r1, #100	@ 0x64
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	3332      	adds	r3, #50	@ 0x32
 80071aa:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <UART_SetConfig+0x4e4>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4422      	add	r2, r4
 80071be:	609a      	str	r2, [r3, #8]
}
 80071c0:	bf00      	nop
 80071c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071c6:	46bd      	mov	sp, r7
 80071c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071cc:	51eb851f 	.word	0x51eb851f

080071d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d0:	b084      	sub	sp, #16
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	f107 001c 	add.w	r0, r7, #28
 80071de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d123      	bne.n	8007232 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80071fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007212:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007216:	2b01      	cmp	r3, #1
 8007218:	d105      	bne.n	8007226 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fae2 	bl	80087f0 <USB_CoreReset>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	e01b      	b.n	800726a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fad6 	bl	80087f0 <USB_CoreReset>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007248:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800724c:	2b00      	cmp	r3, #0
 800724e:	d106      	bne.n	800725e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007254:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	639a      	str	r2, [r3, #56]	@ 0x38
 800725c:	e005      	b.n	800726a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800726a:	7fbb      	ldrb	r3, [r7, #30]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d10b      	bne.n	8007288 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f043 0206 	orr.w	r2, r3, #6
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f043 0220 	orr.w	r2, r3, #32
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007294:	b004      	add	sp, #16
 8007296:	4770      	bx	lr

08007298 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d165      	bne.n	8007378 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a41      	ldr	r2, [pc, #260]	@ (80073b4 <USB_SetTurnaroundTime+0x11c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d906      	bls.n	80072c2 <USB_SetTurnaroundTime+0x2a>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4a40      	ldr	r2, [pc, #256]	@ (80073b8 <USB_SetTurnaroundTime+0x120>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d202      	bcs.n	80072c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072bc:	230f      	movs	r3, #15
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e062      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a3c      	ldr	r2, [pc, #240]	@ (80073b8 <USB_SetTurnaroundTime+0x120>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d306      	bcc.n	80072d8 <USB_SetTurnaroundTime+0x40>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	4a3b      	ldr	r2, [pc, #236]	@ (80073bc <USB_SetTurnaroundTime+0x124>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d202      	bcs.n	80072d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80072d2:	230e      	movs	r3, #14
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e057      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a38      	ldr	r2, [pc, #224]	@ (80073bc <USB_SetTurnaroundTime+0x124>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d306      	bcc.n	80072ee <USB_SetTurnaroundTime+0x56>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a37      	ldr	r2, [pc, #220]	@ (80073c0 <USB_SetTurnaroundTime+0x128>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d202      	bcs.n	80072ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80072e8:	230d      	movs	r3, #13
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e04c      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a33      	ldr	r2, [pc, #204]	@ (80073c0 <USB_SetTurnaroundTime+0x128>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d306      	bcc.n	8007304 <USB_SetTurnaroundTime+0x6c>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4a32      	ldr	r2, [pc, #200]	@ (80073c4 <USB_SetTurnaroundTime+0x12c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d802      	bhi.n	8007304 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072fe:	230c      	movs	r3, #12
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e041      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4a2f      	ldr	r2, [pc, #188]	@ (80073c4 <USB_SetTurnaroundTime+0x12c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d906      	bls.n	800731a <USB_SetTurnaroundTime+0x82>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4a2e      	ldr	r2, [pc, #184]	@ (80073c8 <USB_SetTurnaroundTime+0x130>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d802      	bhi.n	800731a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007314:	230b      	movs	r3, #11
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e036      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4a2a      	ldr	r2, [pc, #168]	@ (80073c8 <USB_SetTurnaroundTime+0x130>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d906      	bls.n	8007330 <USB_SetTurnaroundTime+0x98>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4a29      	ldr	r2, [pc, #164]	@ (80073cc <USB_SetTurnaroundTime+0x134>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d802      	bhi.n	8007330 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800732a:	230a      	movs	r3, #10
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e02b      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4a26      	ldr	r2, [pc, #152]	@ (80073cc <USB_SetTurnaroundTime+0x134>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d906      	bls.n	8007346 <USB_SetTurnaroundTime+0xae>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4a25      	ldr	r2, [pc, #148]	@ (80073d0 <USB_SetTurnaroundTime+0x138>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d202      	bcs.n	8007346 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007340:	2309      	movs	r3, #9
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e020      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a21      	ldr	r2, [pc, #132]	@ (80073d0 <USB_SetTurnaroundTime+0x138>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d306      	bcc.n	800735c <USB_SetTurnaroundTime+0xc4>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4a20      	ldr	r2, [pc, #128]	@ (80073d4 <USB_SetTurnaroundTime+0x13c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d802      	bhi.n	800735c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007356:	2308      	movs	r3, #8
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	e015      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a1d      	ldr	r2, [pc, #116]	@ (80073d4 <USB_SetTurnaroundTime+0x13c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d906      	bls.n	8007372 <USB_SetTurnaroundTime+0xda>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4a1c      	ldr	r2, [pc, #112]	@ (80073d8 <USB_SetTurnaroundTime+0x140>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d202      	bcs.n	8007372 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800736c:	2307      	movs	r3, #7
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	e00a      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007372:	2306      	movs	r3, #6
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e007      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800737e:	2309      	movs	r3, #9
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e001      	b.n	8007388 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007384:	2309      	movs	r3, #9
 8007386:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	029b      	lsls	r3, r3, #10
 800739c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	00d8acbf 	.word	0x00d8acbf
 80073b8:	00e4e1c0 	.word	0x00e4e1c0
 80073bc:	00f42400 	.word	0x00f42400
 80073c0:	01067380 	.word	0x01067380
 80073c4:	011a499f 	.word	0x011a499f
 80073c8:	01312cff 	.word	0x01312cff
 80073cc:	014ca43f 	.word	0x014ca43f
 80073d0:	016e3600 	.word	0x016e3600
 80073d4:	01a6ab1f 	.word	0x01a6ab1f
 80073d8:	01e84800 	.word	0x01e84800

080073dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f043 0201 	orr.w	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f023 0201 	bic.w	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d115      	bne.n	800746e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800744e:	200a      	movs	r0, #10
 8007450:	f7fb f9c8 	bl	80027e4 <HAL_Delay>
      ms += 10U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	330a      	adds	r3, #10
 8007458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 f939 	bl	80086d2 <USB_GetMode>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d01e      	beq.n	80074a4 <USB_SetCurrentMode+0x84>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2bc7      	cmp	r3, #199	@ 0xc7
 800746a:	d9f0      	bls.n	800744e <USB_SetCurrentMode+0x2e>
 800746c:	e01a      	b.n	80074a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d115      	bne.n	80074a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007480:	200a      	movs	r0, #10
 8007482:	f7fb f9af 	bl	80027e4 <HAL_Delay>
      ms += 10U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	330a      	adds	r3, #10
 800748a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f920 	bl	80086d2 <USB_GetMode>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <USB_SetCurrentMode+0x84>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2bc7      	cmp	r3, #199	@ 0xc7
 800749c:	d9f0      	bls.n	8007480 <USB_SetCurrentMode+0x60>
 800749e:	e001      	b.n	80074a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e005      	b.n	80074b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80074a8:	d101      	bne.n	80074ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074b8:	b084      	sub	sp, #16
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b086      	sub	sp, #24
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80074c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	e009      	b.n	80074ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	3340      	adds	r3, #64	@ 0x40
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b0e      	cmp	r3, #14
 80074f0:	d9f2      	bls.n	80074d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11c      	bne.n	8007534 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007508:	f043 0302 	orr.w	r3, r3, #2
 800750c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	@ 0x38
 8007532:	e00b      	b.n	800754c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007544:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007552:	461a      	mov	r2, r3
 8007554:	2300      	movs	r3, #0
 8007556:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007558:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10d      	bne.n	800757c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007568:	2100      	movs	r1, #0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f968 	bl	8007840 <USB_SetDevSpeed>
 8007570:	e008      	b.n	8007584 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007572:	2101      	movs	r1, #1
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f963 	bl	8007840 <USB_SetDevSpeed>
 800757a:	e003      	b.n	8007584 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800757c:	2103      	movs	r1, #3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f95e 	bl	8007840 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007584:	2110      	movs	r1, #16
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8fa 	bl	8007780 <USB_FlushTxFifo>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f924 	bl	80077e4 <USB_FlushRxFifo>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ac:	461a      	mov	r2, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b8:	461a      	mov	r2, r3
 80075ba:	2300      	movs	r3, #0
 80075bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c4:	461a      	mov	r2, r3
 80075c6:	2300      	movs	r3, #0
 80075c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	e043      	b.n	8007658 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075e6:	d118      	bne.n	800761a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fa:	461a      	mov	r2, r3
 80075fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e013      	b.n	800762c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007610:	461a      	mov	r2, r3
 8007612:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	e008      	b.n	800762c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007626:	461a      	mov	r2, r3
 8007628:	2300      	movs	r3, #0
 800762a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007638:	461a      	mov	r2, r3
 800763a:	2300      	movs	r3, #0
 800763c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800764a:	461a      	mov	r2, r3
 800764c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007650:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	3301      	adds	r3, #1
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800765c:	461a      	mov	r2, r3
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4293      	cmp	r3, r2
 8007662:	d3b5      	bcc.n	80075d0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	e043      	b.n	80076f2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800767c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007680:	d118      	bne.n	80076b4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007694:	461a      	mov	r2, r3
 8007696:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e013      	b.n	80076c6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076aa:	461a      	mov	r2, r3
 80076ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	e008      	b.n	80076c6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c0:	461a      	mov	r2, r3
 80076c2:	2300      	movs	r3, #0
 80076c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d2:	461a      	mov	r2, r3
 80076d4:	2300      	movs	r3, #0
 80076d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e4:	461a      	mov	r2, r3
 80076e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	3301      	adds	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076f6:	461a      	mov	r2, r3
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d3b5      	bcc.n	800766a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800770c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007710:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800771e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f043 0210 	orr.w	r2, r3, #16
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	4b10      	ldr	r3, [pc, #64]	@ (800777c <USB_DevInit+0x2c4>)
 800773a:	4313      	orrs	r3, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007740:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f043 0208 	orr.w	r2, r3, #8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007754:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007758:	2b01      	cmp	r3, #1
 800775a:	d107      	bne.n	800776c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007764:	f043 0304 	orr.w	r3, r3, #4
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007778:	b004      	add	sp, #16
 800777a:	4770      	bx	lr
 800777c:	803c3800 	.word	0x803c3800

08007780 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800779a:	d901      	bls.n	80077a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e01b      	b.n	80077d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	daf2      	bge.n	800778e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	019b      	lsls	r3, r3, #6
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c4:	d901      	bls.n	80077ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e006      	b.n	80077d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d0f0      	beq.n	80077b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077fc:	d901      	bls.n	8007802 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e018      	b.n	8007834 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	daf2      	bge.n	80077f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2210      	movs	r2, #16
 8007812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007820:	d901      	bls.n	8007826 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e006      	b.n	8007834 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b10      	cmp	r3, #16
 8007830:	d0f0      	beq.n	8007814 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007860:	4313      	orrs	r3, r2
 8007862:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 0306 	and.w	r3, r3, #6
 800788a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
 8007896:	e00a      	b.n	80078ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d002      	beq.n	80078a4 <USB_GetDevSpeed+0x32>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	d102      	bne.n	80078aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078a4:	2302      	movs	r3, #2
 80078a6:	75fb      	strb	r3, [r7, #23]
 80078a8:	e001      	b.n	80078ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078aa:	230f      	movs	r3, #15
 80078ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	371c      	adds	r7, #28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d13a      	bne.n	800794e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	2101      	movs	r1, #1
 80078ea:	fa01 f303 	lsl.w	r3, r1, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	68f9      	ldr	r1, [r7, #12]
 80078f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d155      	bne.n	80079bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	791b      	ldrb	r3, [r3, #4]
 800792a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800792c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	059b      	lsls	r3, r3, #22
 8007932:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007934:	4313      	orrs	r3, r2
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	0151      	lsls	r1, r2, #5
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	440a      	add	r2, r1
 800793e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	e036      	b.n	80079bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	2101      	movs	r1, #1
 8007960:	fa01 f303 	lsl.w	r3, r1, r3
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800796c:	4313      	orrs	r3, r2
 800796e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11a      	bne.n	80079bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079a2:	430b      	orrs	r3, r1
 80079a4:	4313      	orrs	r3, r2
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d161      	bne.n	8007aac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079fe:	d11f      	bne.n	8007a40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 030f 	and.w	r3, r3, #15
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f303 	lsl.w	r3, r1, r3
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a60:	4013      	ands	r3, r2
 8007a62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	2101      	movs	r1, #1
 8007a76:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a84:	4013      	ands	r3, r2
 8007a86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	0159      	lsls	r1, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	440b      	add	r3, r1
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4b35      	ldr	r3, [pc, #212]	@ (8007b7c <USB_DeactivateEndpoint+0x1b0>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	600b      	str	r3, [r1, #0]
 8007aaa:	e060      	b.n	8007b6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ac2:	d11f      	bne.n	8007b04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ade:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ae2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	2101      	movs	r1, #1
 8007b16:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b24:	4013      	ands	r3, r2
 8007b26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b2e:	69da      	ldr	r2, [r3, #28]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	2101      	movs	r1, #1
 8007b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	43db      	mvns	r3, r3
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b48:	4013      	ands	r3, r2
 8007b4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	0159      	lsls	r1, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	440b      	add	r3, r1
 8007b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b66:	4619      	mov	r1, r3
 8007b68:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <USB_DeactivateEndpoint+0x1b4>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	ec337800 	.word	0xec337800
 8007b80:	eff37800 	.word	0xeff37800

08007b84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	@ 0x28
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f040 817a 	bne.w	8007e9a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d132      	bne.n	8007c14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bc8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007bcc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007bd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c0c:	0cdb      	lsrs	r3, r3, #19
 8007c0e:	04db      	lsls	r3, r3, #19
 8007c10:	6113      	str	r3, [r2, #16]
 8007c12:	e092      	b.n	8007d3a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c2e:	0cdb      	lsrs	r3, r3, #19
 8007c30:	04db      	lsls	r3, r3, #19
 8007c32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c56:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d11a      	bne.n	8007c94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d903      	bls.n	8007c72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c90:	6113      	str	r3, [r2, #16]
 8007c92:	e01b      	b.n	8007ccc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6919      	ldr	r1, [r3, #16]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	440b      	add	r3, r1
 8007cac:	1e59      	subs	r1, r3, #1
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cb6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007cb8:	4ba2      	ldr	r3, [pc, #648]	@ (8007f44 <USB_EPStartXfer+0x3c0>)
 8007cba:	400b      	ands	r3, r1
 8007cbc:	69b9      	ldr	r1, [r7, #24]
 8007cbe:	0148      	lsls	r0, r1, #5
 8007cc0:	69f9      	ldr	r1, [r7, #28]
 8007cc2:	4401      	add	r1, r0
 8007cc4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ce2:	69b9      	ldr	r1, [r7, #24]
 8007ce4:	0148      	lsls	r0, r1, #5
 8007ce6:	69f9      	ldr	r1, [r7, #28]
 8007ce8:	4401      	add	r1, r0
 8007cea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	791b      	ldrb	r3, [r3, #4]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d11f      	bne.n	8007d3a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d14:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007d18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d14b      	bne.n	8007dd8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d009      	beq.n	8007d5c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d54:	461a      	mov	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	791b      	ldrb	r3, [r3, #4]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d128      	bne.n	8007db6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d110      	bne.n	8007d96 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	e00f      	b.n	8007db6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e165      	b.n	80080a4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007df2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007df6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	791b      	ldrb	r3, [r3, #4]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d015      	beq.n	8007e2c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 814d 	beq.w	80080a4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e26:	4313      	orrs	r3, r2
 8007e28:	634b      	str	r3, [r1, #52]	@ 0x34
 8007e2a:	e13b      	b.n	80080a4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d110      	bne.n	8007e5e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e00f      	b.n	8007e7e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	68d9      	ldr	r1, [r3, #12]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	b298      	uxth	r0, r3
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	4603      	mov	r3, r0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 f9b8 	bl	8008208 <USB_WritePacket>
 8007e98:	e104      	b.n	80080a4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb4:	0cdb      	lsrs	r3, r3, #19
 8007eb6:	04db      	lsls	r3, r3, #19
 8007eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ed8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007edc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d131      	bne.n	8007f48 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f12:	69b9      	ldr	r1, [r7, #24]
 8007f14:	0148      	lsls	r0, r1, #5
 8007f16:	69f9      	ldr	r1, [r7, #28]
 8007f18:	4401      	add	r1, r0
 8007f1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f40:	6113      	str	r3, [r2, #16]
 8007f42:	e061      	b.n	8008008 <USB_EPStartXfer+0x484>
 8007f44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d123      	bne.n	8007f98 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5c:	691a      	ldr	r2, [r3, #16]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f66:	69b9      	ldr	r1, [r7, #24]
 8007f68:	0148      	lsls	r0, r1, #5
 8007f6a:	69f9      	ldr	r1, [r7, #28]
 8007f6c:	4401      	add	r1, r0
 8007f6e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f72:	4313      	orrs	r3, r2
 8007f74:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f94:	6113      	str	r3, [r2, #16]
 8007f96:	e037      	b.n	8008008 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	1e5a      	subs	r2, r3, #1
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	8afa      	ldrh	r2, [r7, #22]
 8007fb4:	fb03 f202 	mul.w	r2, r3, r2
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	8afb      	ldrh	r3, [r7, #22]
 8007fcc:	04d9      	lsls	r1, r3, #19
 8007fce:	4b38      	ldr	r3, [pc, #224]	@ (80080b0 <USB_EPStartXfer+0x52c>)
 8007fd0:	400b      	ands	r3, r1
 8007fd2:	69b9      	ldr	r1, [r7, #24]
 8007fd4:	0148      	lsls	r0, r1, #5
 8007fd6:	69f9      	ldr	r1, [r7, #28]
 8007fd8:	4401      	add	r1, r0
 8007fda:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff8:	69b9      	ldr	r1, [r7, #24]
 8007ffa:	0148      	lsls	r0, r1, #5
 8007ffc:	69f9      	ldr	r1, [r7, #28]
 8007ffe:	4401      	add	r1, r0
 8008000:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008004:	4313      	orrs	r3, r2
 8008006:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d10d      	bne.n	800802a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d009      	beq.n	800802a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	68d9      	ldr	r1, [r3, #12]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008026:	460a      	mov	r2, r1
 8008028:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	791b      	ldrb	r3, [r3, #4]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d128      	bne.n	8008084 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803e:	2b00      	cmp	r3, #0
 8008040:	d110      	bne.n	8008064 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	440a      	add	r2, r1
 8008058:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800805c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	e00f      	b.n	8008084 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	440a      	add	r2, r1
 800807a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800807e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008082:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800809e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	1ff80000 	.word	0x1ff80000

080080b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d14a      	bne.n	8008168 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ea:	f040 8086 	bne.w	80081fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800810c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008110:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008142:	4293      	cmp	r3, r2
 8008144:	d902      	bls.n	800814c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
          break;
 800814a:	e056      	b.n	80081fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008164:	d0e7      	beq.n	8008136 <USB_EPStopXfer+0x82>
 8008166:	e048      	b.n	80081fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800817c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008180:	d13b      	bne.n	80081fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	7812      	ldrb	r2, [r2, #0]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	440a      	add	r2, r1
 800819c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	7812      	ldrb	r2, [r2, #0]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3301      	adds	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d902      	bls.n	80081e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]
          break;
 80081de:	e00c      	b.n	80081fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081f8:	d0e7      	beq.n	80081ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008208:	b480      	push	{r7}
 800820a:	b089      	sub	sp, #36	@ 0x24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4611      	mov	r1, r2
 8008214:	461a      	mov	r2, r3
 8008216:	460b      	mov	r3, r1
 8008218:	71fb      	strb	r3, [r7, #7]
 800821a:	4613      	mov	r3, r2
 800821c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008226:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d123      	bne.n	8008276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800822e:	88bb      	ldrh	r3, [r7, #4]
 8008230:	3303      	adds	r3, #3
 8008232:	089b      	lsrs	r3, r3, #2
 8008234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	e018      	b.n	800826e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	031a      	lsls	r2, r3, #12
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	4413      	add	r3, r2
 8008244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008248:	461a      	mov	r2, r3
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	3301      	adds	r3, #1
 8008254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	3301      	adds	r3, #1
 800825a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	3301      	adds	r3, #1
 8008260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	3301      	adds	r3, #1
 8008266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	3301      	adds	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	429a      	cmp	r2, r3
 8008274:	d3e2      	bcc.n	800823c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3724      	adds	r7, #36	@ 0x24
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008284:	b480      	push	{r7}
 8008286:	b08b      	sub	sp, #44	@ 0x2c
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	089b      	lsrs	r3, r3, #2
 800829e:	b29b      	uxth	r3, r3
 80082a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	623b      	str	r3, [r7, #32]
 80082ae:	e014      	b.n	80082da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	3301      	adds	r3, #1
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	3301      	adds	r3, #1
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	3301      	adds	r3, #1
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	3301      	adds	r3, #1
 80082d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	3301      	adds	r3, #1
 80082d8:	623b      	str	r3, [r7, #32]
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d3e6      	bcc.n	80082b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082e2:	8bfb      	ldrh	r3, [r7, #30]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01e      	beq.n	8008326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082f2:	461a      	mov	r2, r3
 80082f4:	f107 0310 	add.w	r3, r7, #16
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	b2da      	uxtb	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	701a      	strb	r2, [r3, #0]
      i++;
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	3301      	adds	r3, #1
 8008312:	623b      	str	r3, [r7, #32]
      pDest++;
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	3301      	adds	r3, #1
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800831a:	8bfb      	ldrh	r3, [r7, #30]
 800831c:	3b01      	subs	r3, #1
 800831e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008320:	8bfb      	ldrh	r3, [r7, #30]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1ea      	bne.n	80082fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008328:	4618      	mov	r0, r3
 800832a:	372c      	adds	r7, #44	@ 0x2c
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	785b      	ldrb	r3, [r3, #1]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d12c      	bne.n	80083aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	db12      	blt.n	8008388 <USB_EPSetStall+0x54>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00f      	beq.n	8008388 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008382:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008386:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	e02b      	b.n	8008402 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	db12      	blt.n	80083e2 <USB_EPSetStall+0xae>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00f      	beq.n	80083e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008400:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d128      	bne.n	800847e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008446:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800844a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	791b      	ldrb	r3, [r3, #4]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d003      	beq.n	800845c <USB_EPClearStall+0x4c>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d138      	bne.n	80084ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	e027      	b.n	80084ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	440a      	add	r2, r1
 8008494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008498:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800849c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d003      	beq.n	80084ae <USB_EPClearStall+0x9e>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	791b      	ldrb	r3, [r3, #4]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d10f      	bne.n	80084ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80084fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008510:	68f9      	ldr	r1, [r7, #12]
 8008512:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008516:	4313      	orrs	r3, r2
 8008518:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008542:	f023 0303 	bic.w	r3, r3, #3
 8008546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008556:	f023 0302 	bic.w	r3, r3, #2
 800855a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800856a:	b480      	push	{r7}
 800856c:	b085      	sub	sp, #20
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008584:	f023 0303 	bic.w	r3, r3, #3
 8008588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008598:	f043 0302 	orr.w	r3, r3, #2
 800859c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085c4:	68fb      	ldr	r3, [r7, #12]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	4013      	ands	r3, r2
 80085f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	0c1b      	lsrs	r3, r3, #16
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	4013      	ands	r3, r2
 8008628:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	b29b      	uxth	r3, r3
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4013      	ands	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008668:	68bb      	ldr	r3, [r7, #8]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008676:	b480      	push	{r7}
 8008678:	b087      	sub	sp, #28
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008698:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	f003 030f 	and.w	r3, r3, #15
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	fa22 f303 	lsr.w	r3, r2, r3
 80086a6:	01db      	lsls	r3, r3, #7
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4013      	ands	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086c4:	68bb      	ldr	r3, [r7, #8]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f003 0301 	and.w	r3, r3, #1
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008708:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800870c:	f023 0307 	bic.w	r3, r3, #7
 8008710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	460b      	mov	r3, r1
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	333c      	adds	r3, #60	@ 0x3c
 800874a:	3304      	adds	r3, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4a26      	ldr	r2, [pc, #152]	@ (80087ec <USB_EP0_OutStart+0xb8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d90a      	bls.n	800876e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008768:	d101      	bne.n	800876e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e037      	b.n	80087de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	2300      	movs	r3, #0
 8008778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800878c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800879c:	f043 0318 	orr.w	r3, r3, #24
 80087a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087b0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80087b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d10f      	bne.n	80087dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80087da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	4f54300a 	.word	0x4f54300a

080087f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008808:	d901      	bls.n	800880e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e01b      	b.n	8008846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	daf2      	bge.n	80087fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008832:	d901      	bls.n	8008838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e006      	b.n	8008846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b01      	cmp	r3, #1
 8008842:	d0f0      	beq.n	8008826 <USB_CoreReset+0x36>

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008860:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008864:	f002 fc88 	bl	800b178 <USBD_static_malloc>
 8008868:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d109      	bne.n	8008884 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32b0      	adds	r2, #176	@ 0xb0
 800887a:	2100      	movs	r1, #0
 800887c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008880:	2302      	movs	r3, #2
 8008882:	e0d4      	b.n	8008a2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008884:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f003 f9f2 	bl	800bc74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32b0      	adds	r2, #176	@ 0xb0
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	32b0      	adds	r2, #176	@ 0xb0
 80088aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7c1b      	ldrb	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d138      	bne.n	800892e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088bc:	4b5e      	ldr	r3, [pc, #376]	@ (8008a38 <USBD_CDC_Init+0x1e4>)
 80088be:	7819      	ldrb	r1, [r3, #0]
 80088c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088c4:	2202      	movs	r2, #2
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 fb33 	bl	800af32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008a38 <USBD_CDC_Init+0x1e4>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 020f 	and.w	r2, r3, #15
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	3324      	adds	r3, #36	@ 0x24
 80088e2:	2201      	movs	r2, #1
 80088e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088e6:	4b55      	ldr	r3, [pc, #340]	@ (8008a3c <USBD_CDC_Init+0x1e8>)
 80088e8:	7819      	ldrb	r1, [r3, #0]
 80088ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088ee:	2202      	movs	r2, #2
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 fb1e 	bl	800af32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088f6:	4b51      	ldr	r3, [pc, #324]	@ (8008a3c <USBD_CDC_Init+0x1e8>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	f003 020f 	and.w	r2, r3, #15
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800890e:	2201      	movs	r2, #1
 8008910:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008912:	4b4b      	ldr	r3, [pc, #300]	@ (8008a40 <USBD_CDC_Init+0x1ec>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	3326      	adds	r3, #38	@ 0x26
 8008928:	2210      	movs	r2, #16
 800892a:	801a      	strh	r2, [r3, #0]
 800892c:	e035      	b.n	800899a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800892e:	4b42      	ldr	r3, [pc, #264]	@ (8008a38 <USBD_CDC_Init+0x1e4>)
 8008930:	7819      	ldrb	r1, [r3, #0]
 8008932:	2340      	movs	r3, #64	@ 0x40
 8008934:	2202      	movs	r2, #2
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f002 fafb 	bl	800af32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800893c:	4b3e      	ldr	r3, [pc, #248]	@ (8008a38 <USBD_CDC_Init+0x1e4>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f003 020f 	and.w	r2, r3, #15
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	440b      	add	r3, r1
 8008950:	3324      	adds	r3, #36	@ 0x24
 8008952:	2201      	movs	r2, #1
 8008954:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008956:	4b39      	ldr	r3, [pc, #228]	@ (8008a3c <USBD_CDC_Init+0x1e8>)
 8008958:	7819      	ldrb	r1, [r3, #0]
 800895a:	2340      	movs	r3, #64	@ 0x40
 800895c:	2202      	movs	r2, #2
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f002 fae7 	bl	800af32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008964:	4b35      	ldr	r3, [pc, #212]	@ (8008a3c <USBD_CDC_Init+0x1e8>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	f003 020f 	and.w	r2, r3, #15
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800897c:	2201      	movs	r2, #1
 800897e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008980:	4b2f      	ldr	r3, [pc, #188]	@ (8008a40 <USBD_CDC_Init+0x1ec>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	3326      	adds	r3, #38	@ 0x26
 8008996:	2210      	movs	r2, #16
 8008998:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800899a:	4b29      	ldr	r3, [pc, #164]	@ (8008a40 <USBD_CDC_Init+0x1ec>)
 800899c:	7819      	ldrb	r1, [r3, #0]
 800899e:	2308      	movs	r3, #8
 80089a0:	2203      	movs	r2, #3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f002 fac5 	bl	800af32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089a8:	4b25      	ldr	r3, [pc, #148]	@ (8008a40 <USBD_CDC_Init+0x1ec>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 020f 	and.w	r2, r3, #15
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	3324      	adds	r3, #36	@ 0x24
 80089be:	2201      	movs	r2, #1
 80089c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	33b0      	adds	r3, #176	@ 0xb0
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089f8:	2302      	movs	r3, #2
 80089fa:	e018      	b.n	8008a2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7c1b      	ldrb	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a04:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <USBD_CDC_Init+0x1e8>)
 8008a06:	7819      	ldrb	r1, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f002 fb7c 	bl	800b110 <USBD_LL_PrepareReceive>
 8008a18:	e008      	b.n	8008a2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a1a:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <USBD_CDC_Init+0x1e8>)
 8008a1c:	7819      	ldrb	r1, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a24:	2340      	movs	r3, #64	@ 0x40
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f002 fb72 	bl	800b110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000093 	.word	0x20000093
 8008a3c:	20000094 	.word	0x20000094
 8008a40:	20000095 	.word	0x20000095

08008a44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a50:	4b3a      	ldr	r3, [pc, #232]	@ (8008b3c <USBD_CDC_DeInit+0xf8>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f002 fa91 	bl	800af7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a5c:	4b37      	ldr	r3, [pc, #220]	@ (8008b3c <USBD_CDC_DeInit+0xf8>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3324      	adds	r3, #36	@ 0x24
 8008a72:	2200      	movs	r2, #0
 8008a74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a76:	4b32      	ldr	r3, [pc, #200]	@ (8008b40 <USBD_CDC_DeInit+0xfc>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f002 fa7e 	bl	800af7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a82:	4b2f      	ldr	r3, [pc, #188]	@ (8008b40 <USBD_CDC_DeInit+0xfc>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f003 020f 	and.w	r2, r3, #15
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a9e:	4b29      	ldr	r3, [pc, #164]	@ (8008b44 <USBD_CDC_DeInit+0x100>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f002 fa6a 	bl	800af7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008aaa:	4b26      	ldr	r3, [pc, #152]	@ (8008b44 <USBD_CDC_DeInit+0x100>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f003 020f 	and.w	r2, r3, #15
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	3324      	adds	r3, #36	@ 0x24
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b44 <USBD_CDC_DeInit+0x100>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3326      	adds	r3, #38	@ 0x26
 8008ada:	2200      	movs	r2, #0
 8008adc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	32b0      	adds	r2, #176	@ 0xb0
 8008ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01f      	beq.n	8008b30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	33b0      	adds	r3, #176	@ 0xb0
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	32b0      	adds	r2, #176	@ 0xb0
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 fb3e 	bl	800b194 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32b0      	adds	r2, #176	@ 0xb0
 8008b22:	2100      	movs	r1, #0
 8008b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000093 	.word	0x20000093
 8008b40:	20000094 	.word	0x20000094
 8008b44:	20000095 	.word	0x20000095

08008b48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	32b0      	adds	r2, #176	@ 0xb0
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e0bf      	b.n	8008cf8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d050      	beq.n	8008c26 <USBD_CDC_Setup+0xde>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	f040 80af 	bne.w	8008ce8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	88db      	ldrh	r3, [r3, #6]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d03a      	beq.n	8008c08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da1b      	bge.n	8008bd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	33b0      	adds	r3, #176	@ 0xb0
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	88d2      	ldrh	r2, [r2, #6]
 8008bb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	88db      	ldrh	r3, [r3, #6]
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	bf28      	it	cs
 8008bc2:	2307      	movcs	r3, #7
 8008bc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	89fa      	ldrh	r2, [r7, #14]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 fd87 	bl	800a6e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bd2:	e090      	b.n	8008cf6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	785a      	ldrb	r2, [r3, #1]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008be4:	d803      	bhi.n	8008bee <USBD_CDC_Setup+0xa6>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88db      	ldrh	r3, [r3, #6]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	e000      	b.n	8008bf0 <USBD_CDC_Setup+0xa8>
 8008bee:	2240      	movs	r2, #64	@ 0x40
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bf6:	6939      	ldr	r1, [r7, #16]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fd99 	bl	800a738 <USBD_CtlPrepareRx>
      break;
 8008c06:	e076      	b.n	8008cf6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	33b0      	adds	r3, #176	@ 0xb0
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	7850      	ldrb	r0, [r2, #1]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	4798      	blx	r3
      break;
 8008c24:	e067      	b.n	8008cf6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b0b      	cmp	r3, #11
 8008c2c:	d851      	bhi.n	8008cd2 <USBD_CDC_Setup+0x18a>
 8008c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <USBD_CDC_Setup+0xec>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c65 	.word	0x08008c65
 8008c38:	08008ce1 	.word	0x08008ce1
 8008c3c:	08008cd3 	.word	0x08008cd3
 8008c40:	08008cd3 	.word	0x08008cd3
 8008c44:	08008cd3 	.word	0x08008cd3
 8008c48:	08008cd3 	.word	0x08008cd3
 8008c4c:	08008cd3 	.word	0x08008cd3
 8008c50:	08008cd3 	.word	0x08008cd3
 8008c54:	08008cd3 	.word	0x08008cd3
 8008c58:	08008cd3 	.word	0x08008cd3
 8008c5c:	08008c8f 	.word	0x08008c8f
 8008c60:	08008cb9 	.word	0x08008cb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	d107      	bne.n	8008c80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c70:	f107 030a 	add.w	r3, r7, #10
 8008c74:	2202      	movs	r2, #2
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fd31 	bl	800a6e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c7e:	e032      	b.n	8008ce6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 fcbb 	bl	800a5fe <USBD_CtlError>
            ret = USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	75fb      	strb	r3, [r7, #23]
          break;
 8008c8c:	e02b      	b.n	8008ce6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d107      	bne.n	8008caa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c9a:	f107 030d 	add.w	r3, r7, #13
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fd1c 	bl	800a6e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ca8:	e01d      	b.n	8008ce6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fca6 	bl	800a5fe <USBD_CtlError>
            ret = USBD_FAIL;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cb6:	e016      	b.n	8008ce6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d00f      	beq.n	8008ce4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fc99 	bl	800a5fe <USBD_CtlError>
            ret = USBD_FAIL;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cd0:	e008      	b.n	8008ce4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 fc92 	bl	800a5fe <USBD_CtlError>
          ret = USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008cde:	e002      	b.n	8008ce6 <USBD_CDC_Setup+0x19e>
          break;
 8008ce0:	bf00      	nop
 8008ce2:	e008      	b.n	8008cf6 <USBD_CDC_Setup+0x1ae>
          break;
 8008ce4:	bf00      	nop
      }
      break;
 8008ce6:	e006      	b.n	8008cf6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fc87 	bl	800a5fe <USBD_CtlError>
      ret = USBD_FAIL;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	32b0      	adds	r2, #176	@ 0xb0
 8008d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e065      	b.n	8008df6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	32b0      	adds	r2, #176	@ 0xb0
 8008d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	f003 020f 	and.w	r2, r3, #15
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	3318      	adds	r3, #24
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d02f      	beq.n	8008db4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	f003 020f 	and.w	r2, r3, #15
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	3318      	adds	r3, #24
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	78fb      	ldrb	r3, [r7, #3]
 8008d6c:	f003 010f 	and.w	r1, r3, #15
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	460b      	mov	r3, r1
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	440b      	add	r3, r1
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4403      	add	r3, r0
 8008d7c:	331c      	adds	r3, #28
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d84:	fb01 f303 	mul.w	r3, r1, r3
 8008d88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d112      	bne.n	8008db4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	3318      	adds	r3, #24
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008da6:	78f9      	ldrb	r1, [r7, #3]
 8008da8:	2300      	movs	r3, #0
 8008daa:	2200      	movs	r2, #0
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f002 f98e 	bl	800b0ce <USBD_LL_Transmit>
 8008db2:	e01f      	b.n	8008df4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	33b0      	adds	r3, #176	@ 0xb0
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	33b0      	adds	r3, #176	@ 0xb0
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	32b0      	adds	r2, #176	@ 0xb0
 8008e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	32b0      	adds	r2, #176	@ 0xb0
 8008e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e01a      	b.n	8008e66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f002 f98c 	bl	800b152 <USBD_LL_GetRxDataSize>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	33b0      	adds	r3, #176	@ 0xb0
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008e60:	4611      	mov	r1, r2
 8008e62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	32b0      	adds	r2, #176	@ 0xb0
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e024      	b.n	8008eda <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	33b0      	adds	r3, #176	@ 0xb0
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d019      	beq.n	8008ed8 <USBD_CDC_EP0_RxReady+0x6a>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008eaa:	2bff      	cmp	r3, #255	@ 0xff
 8008eac:	d014      	beq.n	8008ed8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	33b0      	adds	r3, #176	@ 0xb0
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ec6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ece:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	22ff      	movs	r2, #255	@ 0xff
 8008ed4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008eec:	2182      	movs	r1, #130	@ 0x82
 8008eee:	4818      	ldr	r0, [pc, #96]	@ (8008f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ef0:	f000 fd4f 	bl	8009992 <USBD_GetEpDesc>
 8008ef4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	4815      	ldr	r0, [pc, #84]	@ (8008f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008efa:	f000 fd4a 	bl	8009992 <USBD_GetEpDesc>
 8008efe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f00:	2181      	movs	r1, #129	@ 0x81
 8008f02:	4813      	ldr	r0, [pc, #76]	@ (8008f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f04:	f000 fd45 	bl	8009992 <USBD_GetEpDesc>
 8008f08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2210      	movs	r2, #16
 8008f14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d006      	beq.n	8008f2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f24:	711a      	strb	r2, [r3, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d006      	beq.n	8008f3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f38:	711a      	strb	r2, [r3, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2243      	movs	r2, #67	@ 0x43
 8008f42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f44:	4b02      	ldr	r3, [pc, #8]	@ (8008f50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000050 	.word	0x20000050

08008f54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f5c:	2182      	movs	r1, #130	@ 0x82
 8008f5e:	4818      	ldr	r0, [pc, #96]	@ (8008fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f60:	f000 fd17 	bl	8009992 <USBD_GetEpDesc>
 8008f64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f66:	2101      	movs	r1, #1
 8008f68:	4815      	ldr	r0, [pc, #84]	@ (8008fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f6a:	f000 fd12 	bl	8009992 <USBD_GetEpDesc>
 8008f6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f70:	2181      	movs	r1, #129	@ 0x81
 8008f72:	4813      	ldr	r0, [pc, #76]	@ (8008fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f74:	f000 fd0d 	bl	8009992 <USBD_GetEpDesc>
 8008f78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	2210      	movs	r2, #16
 8008f84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d006      	beq.n	8008f9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	711a      	strb	r2, [r3, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f042 0202 	orr.w	r2, r2, #2
 8008f98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d006      	beq.n	8008fae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	711a      	strb	r2, [r3, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f042 0202 	orr.w	r2, r2, #2
 8008fac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2243      	movs	r2, #67	@ 0x43
 8008fb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fb4:	4b02      	ldr	r3, [pc, #8]	@ (8008fc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000050 	.word	0x20000050

08008fc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fcc:	2182      	movs	r1, #130	@ 0x82
 8008fce:	4818      	ldr	r0, [pc, #96]	@ (8009030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fd0:	f000 fcdf 	bl	8009992 <USBD_GetEpDesc>
 8008fd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4815      	ldr	r0, [pc, #84]	@ (8009030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fda:	f000 fcda 	bl	8009992 <USBD_GetEpDesc>
 8008fde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fe0:	2181      	movs	r1, #129	@ 0x81
 8008fe2:	4813      	ldr	r0, [pc, #76]	@ (8009030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fe4:	f000 fcd5 	bl	8009992 <USBD_GetEpDesc>
 8008fe8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2210      	movs	r2, #16
 8008ff4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009004:	711a      	strb	r2, [r3, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d006      	beq.n	800901e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009018:	711a      	strb	r2, [r3, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2243      	movs	r2, #67	@ 0x43
 8009022:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009024:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000050 	.word	0x20000050

08009034 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	220a      	movs	r2, #10
 8009040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009042:	4b03      	ldr	r3, [pc, #12]	@ (8009050 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	2000000c 	.word	0x2000000c

08009054 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	e009      	b.n	800907c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	33b0      	adds	r3, #176	@ 0xb0
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	32b0      	adds	r2, #176	@ 0xb0
 800909e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e008      	b.n	80090c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	32b0      	adds	r2, #176	@ 0xb0
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e004      	b.n	80090fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
	...

08009108 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32b0      	adds	r2, #176	@ 0xb0
 800911a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800912a:	2303      	movs	r3, #3
 800912c:	e025      	b.n	800917a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009134:	2b00      	cmp	r3, #0
 8009136:	d11f      	bne.n	8009178 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2201      	movs	r2, #1
 800913c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009140:	4b10      	ldr	r3, [pc, #64]	@ (8009184 <USBD_CDC_TransmitPacket+0x7c>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	f003 020f 	and.w	r2, r3, #15
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4403      	add	r3, r0
 800915a:	3318      	adds	r3, #24
 800915c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800915e:	4b09      	ldr	r3, [pc, #36]	@ (8009184 <USBD_CDC_TransmitPacket+0x7c>)
 8009160:	7819      	ldrb	r1, [r3, #0]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 ffad 	bl	800b0ce <USBD_LL_Transmit>

    ret = USBD_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000093 	.word	0x20000093

08009188 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	32b0      	adds	r2, #176	@ 0xb0
 800919a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32b0      	adds	r2, #176	@ 0xb0
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e018      	b.n	80091e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7c1b      	ldrb	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <USBD_CDC_ReceivePacket+0x68>)
 80091c0:	7819      	ldrb	r1, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 ff9f 	bl	800b110 <USBD_LL_PrepareReceive>
 80091d2:	e008      	b.n	80091e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091d4:	4b06      	ldr	r3, [pc, #24]	@ (80091f0 <USBD_CDC_ReceivePacket+0x68>)
 80091d6:	7819      	ldrb	r1, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091de:	2340      	movs	r3, #64	@ 0x40
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 ff95 	bl	800b110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000094 	.word	0x20000094

080091f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	e01f      	b.n	800924c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	79fa      	ldrb	r2, [r7, #7]
 800923e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f001 fe0f 	bl	800ae64 <USBD_LL_Init>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]

  return ret;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e025      	b.n	80092b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32ae      	adds	r2, #174	@ 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00f      	beq.n	80092a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	32ae      	adds	r2, #174	@ 0xae
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009298:	f107 020e 	add.w	r2, r7, #14
 800929c:	4610      	mov	r0, r2
 800929e:	4798      	blx	r3
 80092a0:	4602      	mov	r2, r0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fe17 	bl	800aefc <USBD_LL_Start>
 80092ce:	4603      	mov	r3, r0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	4798      	blx	r3
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	4611      	mov	r1, r2
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800934c:	2303      	movs	r3, #3
 800934e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f90c 	bl	800a58a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009380:	461a      	mov	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	2b02      	cmp	r3, #2
 8009394:	d01a      	beq.n	80093cc <USBD_LL_SetupStage+0x72>
 8009396:	2b02      	cmp	r3, #2
 8009398:	d822      	bhi.n	80093e0 <USBD_LL_SetupStage+0x86>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <USBD_LL_SetupStage+0x4a>
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d00a      	beq.n	80093b8 <USBD_LL_SetupStage+0x5e>
 80093a2:	e01d      	b.n	80093e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fb63 	bl	8009a78 <USBD_StdDevReq>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]
      break;
 80093b6:	e020      	b.n	80093fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fbcb 	bl	8009b5c <USBD_StdItfReq>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ca:	e016      	b.n	80093fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc2d 	bl	8009c34 <USBD_StdEPReq>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]
      break;
 80093de:	e00c      	b.n	80093fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fde4 	bl	800afbc <USBD_LL_StallEP>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
      break;
 80093f8:	bf00      	nop
  }

  return ret;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	460b      	mov	r3, r1
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009416:	7afb      	ldrb	r3, [r7, #11]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d16e      	bne.n	80094fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009422:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800942a:	2b03      	cmp	r3, #3
 800942c:	f040 8098 	bne.w	8009560 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	429a      	cmp	r2, r3
 800943a:	d913      	bls.n	8009464 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	1ad2      	subs	r2, r2, r3
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	4293      	cmp	r3, r2
 8009454:	bf28      	it	cs
 8009456:	4613      	movcs	r3, r2
 8009458:	461a      	mov	r2, r3
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f001 f988 	bl	800a772 <USBD_CtlContinueRx>
 8009462:	e07d      	b.n	8009560 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	2b02      	cmp	r3, #2
 8009470:	d014      	beq.n	800949c <USBD_LL_DataOutStage+0x98>
 8009472:	2b02      	cmp	r3, #2
 8009474:	d81d      	bhi.n	80094b2 <USBD_LL_DataOutStage+0xae>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <USBD_LL_DataOutStage+0x7c>
 800947a:	2b01      	cmp	r3, #1
 800947c:	d003      	beq.n	8009486 <USBD_LL_DataOutStage+0x82>
 800947e:	e018      	b.n	80094b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	75bb      	strb	r3, [r7, #22]
            break;
 8009484:	e018      	b.n	80094b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800948c:	b2db      	uxtb	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fa64 	bl	800995e <USBD_CoreFindIF>
 8009496:	4603      	mov	r3, r0
 8009498:	75bb      	strb	r3, [r7, #22]
            break;
 800949a:	e00d      	b.n	80094b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	4619      	mov	r1, r3
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fa66 	bl	8009978 <USBD_CoreFindEP>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75bb      	strb	r3, [r7, #22]
            break;
 80094b0:	e002      	b.n	80094b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75bb      	strb	r3, [r7, #22]
            break;
 80094b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094b8:	7dbb      	ldrb	r3, [r7, #22]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d119      	bne.n	80094f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d113      	bne.n	80094f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094ca:	7dba      	ldrb	r2, [r7, #22]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	32ae      	adds	r2, #174	@ 0xae
 80094d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80094da:	7dba      	ldrb	r2, [r7, #22]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094e2:	7dba      	ldrb	r2, [r7, #22]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	32ae      	adds	r2, #174	@ 0xae
 80094e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f001 f94e 	bl	800a794 <USBD_CtlSendStatus>
 80094f8:	e032      	b.n	8009560 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fa37 	bl	8009978 <USBD_CoreFindEP>
 800950a:	4603      	mov	r3, r0
 800950c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800950e:	7dbb      	ldrb	r3, [r7, #22]
 8009510:	2bff      	cmp	r3, #255	@ 0xff
 8009512:	d025      	beq.n	8009560 <USBD_LL_DataOutStage+0x15c>
 8009514:	7dbb      	ldrb	r3, [r7, #22]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d122      	bne.n	8009560 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d117      	bne.n	8009556 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009526:	7dba      	ldrb	r2, [r7, #22]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	32ae      	adds	r2, #174	@ 0xae
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00f      	beq.n	8009556 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009536:	7dba      	ldrb	r2, [r7, #22]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800953e:	7dba      	ldrb	r2, [r7, #22]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	32ae      	adds	r2, #174	@ 0xae
 8009544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	7afa      	ldrb	r2, [r7, #11]
 800954c:	4611      	mov	r1, r2
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	e000      	b.n	8009562 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b086      	sub	sp, #24
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	460b      	mov	r3, r1
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d16f      	bne.n	800965e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3314      	adds	r3, #20
 8009582:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800958a:	2b02      	cmp	r3, #2
 800958c:	d15a      	bne.n	8009644 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	429a      	cmp	r2, r3
 8009598:	d914      	bls.n	80095c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	1ad2      	subs	r2, r2, r3
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	461a      	mov	r2, r3
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 f8b0 	bl	800a716 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095b6:	2300      	movs	r3, #0
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f001 fda7 	bl	800b110 <USBD_LL_PrepareReceive>
 80095c2:	e03f      	b.n	8009644 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d11c      	bne.n	800960a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095d8:	429a      	cmp	r2, r3
 80095da:	d316      	bcc.n	800960a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d20f      	bcs.n	800960a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095ea:	2200      	movs	r2, #0
 80095ec:	2100      	movs	r1, #0
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 f891 	bl	800a716 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f001 fd84 	bl	800b110 <USBD_LL_PrepareReceive>
 8009608:	e01c      	b.n	8009644 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b03      	cmp	r3, #3
 8009614:	d10f      	bne.n	8009636 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009636:	2180      	movs	r1, #128	@ 0x80
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f001 fcbf 	bl	800afbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f001 f8bb 	bl	800a7ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d03a      	beq.n	80096c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fe42 	bl	80092d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800965c:	e032      	b.n	80096c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009664:	b2db      	uxtb	r3, r3
 8009666:	4619      	mov	r1, r3
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f985 	bl	8009978 <USBD_CoreFindEP>
 800966e:	4603      	mov	r3, r0
 8009670:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	2bff      	cmp	r3, #255	@ 0xff
 8009676:	d025      	beq.n	80096c4 <USBD_LL_DataInStage+0x15a>
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d122      	bne.n	80096c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b03      	cmp	r3, #3
 8009688:	d11c      	bne.n	80096c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800968a:	7dfa      	ldrb	r2, [r7, #23]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	32ae      	adds	r2, #174	@ 0xae
 8009690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d014      	beq.n	80096c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800969a:	7dfa      	ldrb	r2, [r7, #23]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096a2:	7dfa      	ldrb	r2, [r7, #23]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	32ae      	adds	r2, #174	@ 0xae
 80096a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	7afa      	ldrb	r2, [r7, #11]
 80096b0:	4611      	mov	r1, r2
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	4798      	blx	r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096ba:	7dbb      	ldrb	r3, [r7, #22]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80096c0:	7dbb      	ldrb	r3, [r7, #22]
 80096c2:	e000      	b.n	80096c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d014      	beq.n	8009734 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00e      	beq.n	8009734 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6852      	ldr	r2, [r2, #4]
 8009722:	b2d2      	uxtb	r2, r2
 8009724:	4611      	mov	r1, r2
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009730:	2303      	movs	r3, #3
 8009732:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009734:	2340      	movs	r3, #64	@ 0x40
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 fbf9 	bl	800af32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2240      	movs	r2, #64	@ 0x40
 800974c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009750:	2340      	movs	r3, #64	@ 0x40
 8009752:	2200      	movs	r2, #0
 8009754:	2180      	movs	r1, #128	@ 0x80
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fbeb 	bl	800af32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2240      	movs	r2, #64	@ 0x40
 8009766:	621a      	str	r2, [r3, #32]

  return ret;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d006      	beq.n	80097b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2204      	movs	r2, #4
 80097b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d106      	bne.n	80097ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b03      	cmp	r3, #3
 800980c:	d110      	bne.n	8009830 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	32ae      	adds	r2, #174	@ 0xae
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009858:	2303      	movs	r3, #3
 800985a:	e01c      	b.n	8009896 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b03      	cmp	r3, #3
 8009866:	d115      	bne.n	8009894 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	32ae      	adds	r2, #174	@ 0xae
 8009872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	32ae      	adds	r2, #174	@ 0xae
 8009886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	78fa      	ldrb	r2, [r7, #3]
 800988e:	4611      	mov	r1, r2
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	32ae      	adds	r2, #174	@ 0xae
 80098b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098bc:	2303      	movs	r3, #3
 80098be:	e01c      	b.n	80098fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d115      	bne.n	80098f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	32ae      	adds	r2, #174	@ 0xae
 80098d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00b      	beq.n	80098f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	32ae      	adds	r2, #174	@ 0xae
 80098ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	4611      	mov	r1, r2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00e      	beq.n	8009954 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6852      	ldr	r2, [r2, #4]
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	4611      	mov	r1, r2
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	4798      	blx	r3
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009950:	2303      	movs	r3, #3
 8009952:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800996a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800996c:	4618      	mov	r0, r3
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009984:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b086      	sub	sp, #24
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	885b      	ldrh	r3, [r3, #2]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d91f      	bls.n	80099f8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099be:	e013      	b.n	80099e8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099c0:	f107 030a 	add.w	r3, r7, #10
 80099c4:	4619      	mov	r1, r3
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f000 f81b 	bl	8009a02 <USBD_GetNextDesc>
 80099cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	d108      	bne.n	80099e8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	789b      	ldrb	r3, [r3, #2]
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d008      	beq.n	80099f6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	885b      	ldrh	r3, [r3, #2]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	897b      	ldrh	r3, [r7, #10]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d8e5      	bhi.n	80099c0 <USBD_GetEpDesc+0x2e>
 80099f4:	e000      	b.n	80099f8 <USBD_GetEpDesc+0x66>
          break;
 80099f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099f8:	693b      	ldr	r3, [r7, #16]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	4413      	add	r3, r2
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4413      	add	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b087      	sub	sp, #28
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a58:	8a3b      	ldrh	r3, [r7, #16]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	b21a      	sxth	r2, r3
 8009a5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	b21b      	sxth	r3, r3
 8009a66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a68:	89fb      	ldrh	r3, [r7, #14]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
	...

08009a78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a8e:	2b40      	cmp	r3, #64	@ 0x40
 8009a90:	d005      	beq.n	8009a9e <USBD_StdDevReq+0x26>
 8009a92:	2b40      	cmp	r3, #64	@ 0x40
 8009a94:	d857      	bhi.n	8009b46 <USBD_StdDevReq+0xce>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00f      	beq.n	8009aba <USBD_StdDevReq+0x42>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d153      	bne.n	8009b46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	32ae      	adds	r2, #174	@ 0xae
 8009aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	4798      	blx	r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab8:	e04a      	b.n	8009b50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	2b09      	cmp	r3, #9
 8009ac0:	d83b      	bhi.n	8009b3a <USBD_StdDevReq+0xc2>
 8009ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac8 <USBD_StdDevReq+0x50>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009b31 	.word	0x08009b31
 8009ad0:	08009b3b 	.word	0x08009b3b
 8009ad4:	08009b27 	.word	0x08009b27
 8009ad8:	08009b3b 	.word	0x08009b3b
 8009adc:	08009afb 	.word	0x08009afb
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b3b 	.word	0x08009b3b
 8009ae8:	08009b13 	.word	0x08009b13
 8009aec:	08009b05 	.word	0x08009b05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa3c 	bl	8009f70 <USBD_GetDescriptor>
          break;
 8009af8:	e024      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fba1 	bl	800a244 <USBD_SetAddress>
          break;
 8009b02:	e01f      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fbe0 	bl	800a2cc <USBD_SetConfig>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b10:	e018      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fc83 	bl	800a420 <USBD_GetConfig>
          break;
 8009b1a:	e013      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fcb4 	bl	800a48c <USBD_GetStatus>
          break;
 8009b24:	e00e      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fce3 	bl	800a4f4 <USBD_SetFeature>
          break;
 8009b2e:	e009      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fd07 	bl	800a546 <USBD_ClrFeature>
          break;
 8009b38:	e004      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fd5e 	bl	800a5fe <USBD_CtlError>
          break;
 8009b42:	bf00      	nop
      }
      break;
 8009b44:	e004      	b.n	8009b50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fd58 	bl	800a5fe <USBD_CtlError>
      break;
 8009b4e:	bf00      	nop
  }

  return ret;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop

08009b5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b72:	2b40      	cmp	r3, #64	@ 0x40
 8009b74:	d005      	beq.n	8009b82 <USBD_StdItfReq+0x26>
 8009b76:	2b40      	cmp	r3, #64	@ 0x40
 8009b78:	d852      	bhi.n	8009c20 <USBD_StdItfReq+0xc4>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <USBD_StdItfReq+0x26>
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d14e      	bne.n	8009c20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d840      	bhi.n	8009c12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	889b      	ldrh	r3, [r3, #4]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d836      	bhi.n	8009c08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	889b      	ldrh	r3, [r3, #4]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff fedb 	bl	800995e <USBD_CoreFindIF>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2bff      	cmp	r3, #255	@ 0xff
 8009bb0:	d01d      	beq.n	8009bee <USBD_StdItfReq+0x92>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d11a      	bne.n	8009bee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bb8:	7bba      	ldrb	r2, [r7, #14]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32ae      	adds	r2, #174	@ 0xae
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00f      	beq.n	8009be8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009bc8:	7bba      	ldrb	r2, [r7, #14]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bd0:	7bba      	ldrb	r2, [r7, #14]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	@ 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009be6:	e004      	b.n	8009bf2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009be8:	2303      	movs	r3, #3
 8009bea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bec:	e001      	b.n	8009bf2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	88db      	ldrh	r3, [r3, #6]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d110      	bne.n	8009c1c <USBD_StdItfReq+0xc0>
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fdc7 	bl	800a794 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c06:	e009      	b.n	8009c1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fcf7 	bl	800a5fe <USBD_CtlError>
          break;
 8009c10:	e004      	b.n	8009c1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fcf2 	bl	800a5fe <USBD_CtlError>
          break;
 8009c1a:	e000      	b.n	8009c1e <USBD_StdItfReq+0xc2>
          break;
 8009c1c:	bf00      	nop
      }
      break;
 8009c1e:	e004      	b.n	8009c2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fceb 	bl	800a5fe <USBD_CtlError>
      break;
 8009c28:	bf00      	nop
  }

  return ret;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	889b      	ldrh	r3, [r3, #4]
 8009c46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c50:	2b40      	cmp	r3, #64	@ 0x40
 8009c52:	d007      	beq.n	8009c64 <USBD_StdEPReq+0x30>
 8009c54:	2b40      	cmp	r3, #64	@ 0x40
 8009c56:	f200 817f 	bhi.w	8009f58 <USBD_StdEPReq+0x324>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02a      	beq.n	8009cb4 <USBD_StdEPReq+0x80>
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	f040 817a 	bne.w	8009f58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fe85 	bl	8009978 <USBD_CoreFindEP>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c72:	7b7b      	ldrb	r3, [r7, #13]
 8009c74:	2bff      	cmp	r3, #255	@ 0xff
 8009c76:	f000 8174 	beq.w	8009f62 <USBD_StdEPReq+0x32e>
 8009c7a:	7b7b      	ldrb	r3, [r7, #13]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8170 	bne.w	8009f62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c82:	7b7a      	ldrb	r2, [r7, #13]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c8a:	7b7a      	ldrb	r2, [r7, #13]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	32ae      	adds	r2, #174	@ 0xae
 8009c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 8163 	beq.w	8009f62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c9c:	7b7a      	ldrb	r2, [r7, #13]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	32ae      	adds	r2, #174	@ 0xae
 8009ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cb2:	e156      	b.n	8009f62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	785b      	ldrb	r3, [r3, #1]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d008      	beq.n	8009cce <USBD_StdEPReq+0x9a>
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	f300 8145 	bgt.w	8009f4c <USBD_StdEPReq+0x318>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 809b 	beq.w	8009dfe <USBD_StdEPReq+0x1ca>
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d03c      	beq.n	8009d46 <USBD_StdEPReq+0x112>
 8009ccc:	e13e      	b.n	8009f4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d002      	beq.n	8009ce0 <USBD_StdEPReq+0xac>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d016      	beq.n	8009d0c <USBD_StdEPReq+0xd8>
 8009cde:	e02c      	b.n	8009d3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00d      	beq.n	8009d02 <USBD_StdEPReq+0xce>
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b80      	cmp	r3, #128	@ 0x80
 8009cea:	d00a      	beq.n	8009d02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 f963 	bl	800afbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cf6:	2180      	movs	r1, #128	@ 0x80
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 f95f 	bl	800afbc <USBD_LL_StallEP>
 8009cfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d00:	e020      	b.n	8009d44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fc7a 	bl	800a5fe <USBD_CtlError>
              break;
 8009d0a:	e01b      	b.n	8009d44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	885b      	ldrh	r3, [r3, #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10e      	bne.n	8009d32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <USBD_StdEPReq+0xfe>
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b80      	cmp	r3, #128	@ 0x80
 8009d1e:	d008      	beq.n	8009d32 <USBD_StdEPReq+0xfe>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	88db      	ldrh	r3, [r3, #6]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 f945 	bl	800afbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fd2e 	bl	800a794 <USBD_CtlSendStatus>

              break;
 8009d38:	e004      	b.n	8009d44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fc5e 	bl	800a5fe <USBD_CtlError>
              break;
 8009d42:	bf00      	nop
          }
          break;
 8009d44:	e107      	b.n	8009f56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d002      	beq.n	8009d58 <USBD_StdEPReq+0x124>
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d016      	beq.n	8009d84 <USBD_StdEPReq+0x150>
 8009d56:	e04b      	b.n	8009df0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00d      	beq.n	8009d7a <USBD_StdEPReq+0x146>
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b80      	cmp	r3, #128	@ 0x80
 8009d62:	d00a      	beq.n	8009d7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f927 	bl	800afbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d6e:	2180      	movs	r1, #128	@ 0x80
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 f923 	bl	800afbc <USBD_LL_StallEP>
 8009d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d78:	e040      	b.n	8009dfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc3e 	bl	800a5fe <USBD_CtlError>
              break;
 8009d82:	e03b      	b.n	8009dfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d136      	bne.n	8009dfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 f92d 	bl	800affa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fcf7 	bl	800a794 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fde4 	bl	8009978 <USBD_CoreFindEP>
 8009db0:	4603      	mov	r3, r0
 8009db2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009db4:	7b7b      	ldrb	r3, [r7, #13]
 8009db6:	2bff      	cmp	r3, #255	@ 0xff
 8009db8:	d01f      	beq.n	8009dfa <USBD_StdEPReq+0x1c6>
 8009dba:	7b7b      	ldrb	r3, [r7, #13]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d11c      	bne.n	8009dfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009dc0:	7b7a      	ldrb	r2, [r7, #13]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009dc8:	7b7a      	ldrb	r2, [r7, #13]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32ae      	adds	r2, #174	@ 0xae
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d010      	beq.n	8009dfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dd8:	7b7a      	ldrb	r2, [r7, #13]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32ae      	adds	r2, #174	@ 0xae
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009dee:	e004      	b.n	8009dfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fc03 	bl	800a5fe <USBD_CtlError>
              break;
 8009df8:	e000      	b.n	8009dfc <USBD_StdEPReq+0x1c8>
              break;
 8009dfa:	bf00      	nop
          }
          break;
 8009dfc:	e0ab      	b.n	8009f56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d002      	beq.n	8009e10 <USBD_StdEPReq+0x1dc>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d032      	beq.n	8009e74 <USBD_StdEPReq+0x240>
 8009e0e:	e097      	b.n	8009f40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <USBD_StdEPReq+0x1f2>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b80      	cmp	r3, #128	@ 0x80
 8009e1a:	d004      	beq.n	8009e26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fbed 	bl	800a5fe <USBD_CtlError>
                break;
 8009e24:	e091      	b.n	8009f4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da0b      	bge.n	8009e46 <USBD_StdEPReq+0x212>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	3304      	adds	r3, #4
 8009e44:	e00b      	b.n	8009e5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc37 	bl	800a6e0 <USBD_CtlSendData>
              break;
 8009e72:	e06a      	b.n	8009f4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	da11      	bge.n	8009ea0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	f003 020f 	and.w	r2, r3, #15
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3324      	adds	r3, #36	@ 0x24
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d117      	bne.n	8009ec6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fbb0 	bl	800a5fe <USBD_CtlError>
                  break;
 8009e9e:	e054      	b.n	8009f4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 020f 	and.w	r2, r3, #15
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fb9d 	bl	800a5fe <USBD_CtlError>
                  break;
 8009ec4:	e041      	b.n	8009f4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	da0b      	bge.n	8009ee6 <USBD_StdEPReq+0x2b2>
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	3310      	adds	r3, #16
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	e00b      	b.n	8009efe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	4413      	add	r3, r2
 8009efc:	3304      	adds	r3, #4
 8009efe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <USBD_StdEPReq+0x2d8>
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b80      	cmp	r3, #128	@ 0x80
 8009f0a:	d103      	bne.n	8009f14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e00e      	b.n	8009f32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 f88d 	bl	800b038 <USBD_LL_IsStallEP>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e002      	b.n	8009f32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2202      	movs	r2, #2
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fbd1 	bl	800a6e0 <USBD_CtlSendData>
              break;
 8009f3e:	e004      	b.n	8009f4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb5b 	bl	800a5fe <USBD_CtlError>
              break;
 8009f48:	bf00      	nop
          }
          break;
 8009f4a:	e004      	b.n	8009f56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb55 	bl	800a5fe <USBD_CtlError>
          break;
 8009f54:	bf00      	nop
      }
      break;
 8009f56:	e005      	b.n	8009f64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb4f 	bl	800a5fe <USBD_CtlError>
      break;
 8009f60:	e000      	b.n	8009f64 <USBD_StdEPReq+0x330>
      break;
 8009f62:	bf00      	nop
  }

  return ret;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	885b      	ldrh	r3, [r3, #2]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b06      	cmp	r3, #6
 8009f92:	f200 8128 	bhi.w	800a1e6 <USBD_GetDescriptor+0x276>
 8009f96:	a201      	add	r2, pc, #4	@ (adr r2, 8009f9c <USBD_GetDescriptor+0x2c>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fb9 	.word	0x08009fb9
 8009fa0:	08009fd1 	.word	0x08009fd1
 8009fa4:	0800a011 	.word	0x0800a011
 8009fa8:	0800a1e7 	.word	0x0800a1e7
 8009fac:	0800a1e7 	.word	0x0800a1e7
 8009fb0:	0800a187 	.word	0x0800a187
 8009fb4:	0800a1b3 	.word	0x0800a1b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	7c12      	ldrb	r2, [r2, #16]
 8009fc4:	f107 0108 	add.w	r1, r7, #8
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4798      	blx	r3
 8009fcc:	60f8      	str	r0, [r7, #12]
      break;
 8009fce:	e112      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7c1b      	ldrb	r3, [r3, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10d      	bne.n	8009ff4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe0:	f107 0208 	add.w	r2, r7, #8
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
 8009fe8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	2202      	movs	r2, #2
 8009ff0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ff2:	e100      	b.n	800a1f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffc:	f107 0208 	add.w	r2, r7, #8
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
 800a004:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3301      	adds	r3, #1
 800a00a:	2202      	movs	r2, #2
 800a00c:	701a      	strb	r2, [r3, #0]
      break;
 800a00e:	e0f2      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	885b      	ldrh	r3, [r3, #2]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b05      	cmp	r3, #5
 800a018:	f200 80ac 	bhi.w	800a174 <USBD_GetDescriptor+0x204>
 800a01c:	a201      	add	r2, pc, #4	@ (adr r2, 800a024 <USBD_GetDescriptor+0xb4>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a03d 	.word	0x0800a03d
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a0a5 	.word	0x0800a0a5
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a10d 	.word	0x0800a10d
 800a038:	0800a141 	.word	0x0800a141
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	7c12      	ldrb	r2, [r2, #16]
 800a054:	f107 0108 	add.w	r1, r7, #8
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a05e:	e091      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 facb 	bl	800a5fe <USBD_CtlError>
            err++;
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	3301      	adds	r3, #1
 800a06c:	72fb      	strb	r3, [r7, #11]
          break;
 800a06e:	e089      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	7c12      	ldrb	r2, [r2, #16]
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a092:	e077      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fab1 	bl	800a5fe <USBD_CtlError>
            err++;
 800a09c:	7afb      	ldrb	r3, [r7, #11]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0a2:	e06f      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7c12      	ldrb	r2, [r2, #16]
 800a0bc:	f107 0108 	add.w	r1, r7, #8
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0c6:	e05d      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa97 	bl	800a5fe <USBD_CtlError>
            err++;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0d6:	e055      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00b      	beq.n	800a0fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	7c12      	ldrb	r2, [r2, #16]
 800a0f0:	f107 0108 	add.w	r1, r7, #8
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
 800a0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0fa:	e043      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa7d 	bl	800a5fe <USBD_CtlError>
            err++;
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	3301      	adds	r3, #1
 800a108:	72fb      	strb	r3, [r7, #11]
          break;
 800a10a:	e03b      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	7c12      	ldrb	r2, [r2, #16]
 800a124:	f107 0108 	add.w	r1, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12e:	e029      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa63 	bl	800a5fe <USBD_CtlError>
            err++;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	3301      	adds	r3, #1
 800a13c:	72fb      	strb	r3, [r7, #11]
          break;
 800a13e:	e021      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7c12      	ldrb	r2, [r2, #16]
 800a158:	f107 0108 	add.w	r1, r7, #8
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
 800a160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a162:	e00f      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa49 	bl	800a5fe <USBD_CtlError>
            err++;
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	3301      	adds	r3, #1
 800a170:	72fb      	strb	r3, [r7, #11]
          break;
 800a172:	e007      	b.n	800a184 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa41 	bl	800a5fe <USBD_CtlError>
          err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a182:	bf00      	nop
      }
      break;
 800a184:	e037      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	7c1b      	ldrb	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a196:	f107 0208 	add.w	r2, r7, #8
 800a19a:	4610      	mov	r0, r2
 800a19c:	4798      	blx	r3
 800a19e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1a0:	e029      	b.n	800a1f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fa2a 	bl	800a5fe <USBD_CtlError>
        err++;
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b0:	e021      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	7c1b      	ldrb	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10d      	bne.n	800a1d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c2:	f107 0208 	add.w	r2, r7, #8
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4798      	blx	r3
 800a1ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	2207      	movs	r2, #7
 800a1d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1d4:	e00f      	b.n	800a1f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa10 	bl	800a5fe <USBD_CtlError>
        err++;
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e4:	e007      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa08 	bl	800a5fe <USBD_CtlError>
      err++;
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f4:	bf00      	nop
  }

  if (err != 0U)
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d11e      	bne.n	800a23a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	88db      	ldrh	r3, [r3, #6]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d016      	beq.n	800a232 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a204:	893b      	ldrh	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00e      	beq.n	800a228 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	88da      	ldrh	r2, [r3, #6]
 800a20e:	893b      	ldrh	r3, [r7, #8]
 800a210:	4293      	cmp	r3, r2
 800a212:	bf28      	it	cs
 800a214:	4613      	movcs	r3, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a21a:	893b      	ldrh	r3, [r7, #8]
 800a21c:	461a      	mov	r2, r3
 800a21e:	68f9      	ldr	r1, [r7, #12]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa5d 	bl	800a6e0 <USBD_CtlSendData>
 800a226:	e009      	b.n	800a23c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f9e7 	bl	800a5fe <USBD_CtlError>
 800a230:	e004      	b.n	800a23c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 faae 	bl	800a794 <USBD_CtlSendStatus>
 800a238:	e000      	b.n	800a23c <USBD_GetDescriptor+0x2cc>
    return;
 800a23a:	bf00      	nop
  }
}
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop

0800a244 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	889b      	ldrh	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d131      	bne.n	800a2ba <USBD_SetAddress+0x76>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	88db      	ldrh	r3, [r3, #6]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d12d      	bne.n	800a2ba <USBD_SetAddress+0x76>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	2b7f      	cmp	r3, #127	@ 0x7f
 800a264:	d829      	bhi.n	800a2ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	885b      	ldrh	r3, [r3, #2]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a270:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d104      	bne.n	800a288 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f9bc 	bl	800a5fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a286:	e01d      	b.n	800a2c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7bfa      	ldrb	r2, [r7, #15]
 800a28c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fefb 	bl	800b090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa7a 	bl	800a794 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	e009      	b.n	800a2c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b8:	e004      	b.n	800a2c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f99e 	bl	800a5fe <USBD_CtlError>
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	4b4e      	ldr	r3, [pc, #312]	@ (800a41c <USBD_SetConfig+0x150>)
 800a2e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2e4:	4b4d      	ldr	r3, [pc, #308]	@ (800a41c <USBD_SetConfig+0x150>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d905      	bls.n	800a2f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f985 	bl	800a5fe <USBD_CtlError>
    return USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e08c      	b.n	800a412 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d002      	beq.n	800a30a <USBD_SetConfig+0x3e>
 800a304:	2b03      	cmp	r3, #3
 800a306:	d029      	beq.n	800a35c <USBD_SetConfig+0x90>
 800a308:	e075      	b.n	800a3f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a30a:	4b44      	ldr	r3, [pc, #272]	@ (800a41c <USBD_SetConfig+0x150>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d020      	beq.n	800a354 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a312:	4b42      	ldr	r3, [pc, #264]	@ (800a41c <USBD_SetConfig+0x150>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a31c:	4b3f      	ldr	r3, [pc, #252]	@ (800a41c <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fe ffe3 	bl	80092ee <USBD_SetClassConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f962 	bl	800a5fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2202      	movs	r2, #2
 800a33e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a342:	e065      	b.n	800a410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fa25 	bl	800a794 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2203      	movs	r2, #3
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a352:	e05d      	b.n	800a410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fa1d 	bl	800a794 <USBD_CtlSendStatus>
      break;
 800a35a:	e059      	b.n	800a410 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a35c:	4b2f      	ldr	r3, [pc, #188]	@ (800a41c <USBD_SetConfig+0x150>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d112      	bne.n	800a38a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2202      	movs	r2, #2
 800a368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a36c:	4b2b      	ldr	r3, [pc, #172]	@ (800a41c <USBD_SetConfig+0x150>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a376:	4b29      	ldr	r3, [pc, #164]	@ (800a41c <USBD_SetConfig+0x150>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7fe ffd2 	bl	8009326 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa06 	bl	800a794 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a388:	e042      	b.n	800a410 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a38a:	4b24      	ldr	r3, [pc, #144]	@ (800a41c <USBD_SetConfig+0x150>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	429a      	cmp	r2, r3
 800a396:	d02a      	beq.n	800a3ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7fe ffc0 	bl	8009326 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a41c <USBD_SetConfig+0x150>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a41c <USBD_SetConfig+0x150>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7fe ff99 	bl	80092ee <USBD_SetClassConfig>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00f      	beq.n	800a3e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f918 	bl	800a5fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fe ffa5 	bl	8009326 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a3e4:	e014      	b.n	800a410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f9d4 	bl	800a794 <USBD_CtlSendStatus>
      break;
 800a3ec:	e010      	b.n	800a410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f9d0 	bl	800a794 <USBD_CtlSendStatus>
      break;
 800a3f4:	e00c      	b.n	800a410 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f900 	bl	800a5fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3fe:	4b07      	ldr	r3, [pc, #28]	@ (800a41c <USBD_SetConfig+0x150>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7fe ff8e 	bl	8009326 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a40a:	2303      	movs	r3, #3
 800a40c:	73fb      	strb	r3, [r7, #15]
      break;
 800a40e:	bf00      	nop
  }

  return ret;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20000638 	.word	0x20000638

0800a420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	88db      	ldrh	r3, [r3, #6]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d004      	beq.n	800a43c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8e2 	bl	800a5fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a43a:	e023      	b.n	800a484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	dc02      	bgt.n	800a44e <USBD_GetConfig+0x2e>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dc03      	bgt.n	800a454 <USBD_GetConfig+0x34>
 800a44c:	e015      	b.n	800a47a <USBD_GetConfig+0x5a>
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d00b      	beq.n	800a46a <USBD_GetConfig+0x4a>
 800a452:	e012      	b.n	800a47a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3308      	adds	r3, #8
 800a45e:	2201      	movs	r2, #1
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f93c 	bl	800a6e0 <USBD_CtlSendData>
        break;
 800a468:	e00c      	b.n	800a484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3304      	adds	r3, #4
 800a46e:	2201      	movs	r2, #1
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f934 	bl	800a6e0 <USBD_CtlSendData>
        break;
 800a478:	e004      	b.n	800a484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f8be 	bl	800a5fe <USBD_CtlError>
        break;
 800a482:	bf00      	nop
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d81e      	bhi.n	800a4e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	88db      	ldrh	r3, [r3, #6]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d004      	beq.n	800a4b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f8a5 	bl	800a5fe <USBD_CtlError>
        break;
 800a4b4:	e01a      	b.n	800a4ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f043 0202 	orr.w	r2, r3, #2
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f900 	bl	800a6e0 <USBD_CtlSendData>
      break;
 800a4e0:	e004      	b.n	800a4ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f88a 	bl	800a5fe <USBD_CtlError>
      break;
 800a4ea:	bf00      	nop
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	885b      	ldrh	r3, [r3, #2]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d107      	bne.n	800a516 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f940 	bl	800a794 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a514:	e013      	b.n	800a53e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d10b      	bne.n	800a536 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	889b      	ldrh	r3, [r3, #4]
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	b29b      	uxth	r3, r3
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f930 	bl	800a794 <USBD_CtlSendStatus>
}
 800a534:	e003      	b.n	800a53e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f860 	bl	800a5fe <USBD_CtlError>
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a556:	b2db      	uxtb	r3, r3
 800a558:	3b01      	subs	r3, #1
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d80b      	bhi.n	800a576 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	885b      	ldrh	r3, [r3, #2]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d10c      	bne.n	800a580 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f910 	bl	800a794 <USBD_CtlSendStatus>
      }
      break;
 800a574:	e004      	b.n	800a580 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f840 	bl	800a5fe <USBD_CtlError>
      break;
 800a57e:	e000      	b.n	800a582 <USBD_ClrFeature+0x3c>
      break;
 800a580:	bf00      	nop
  }
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	781a      	ldrb	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff fa40 	bl	8009a3a <SWAPBYTE>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	461a      	mov	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fa33 	bl	8009a3a <SWAPBYTE>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7ff fa26 	bl	8009a3a <SWAPBYTE>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	80da      	strh	r2, [r3, #6]
}
 800a5f6:	bf00      	nop
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a608:	2180      	movs	r1, #128	@ 0x80
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fcd6 	bl	800afbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a610:	2100      	movs	r1, #0
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fcd2 	bl	800afbc <USBD_LL_StallEP>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d036      	beq.n	800a6a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a63a:	6938      	ldr	r0, [r7, #16]
 800a63c:	f000 f836 	bl	800a6ac <USBD_GetLen>
 800a640:	4603      	mov	r3, r0
 800a642:	3301      	adds	r3, #1
 800a644:	b29b      	uxth	r3, r3
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	4413      	add	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7812      	ldrb	r2, [r2, #0]
 800a658:	701a      	strb	r2, [r3, #0]
  idx++;
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	3301      	adds	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	4413      	add	r3, r2
 800a666:	2203      	movs	r2, #3
 800a668:	701a      	strb	r2, [r3, #0]
  idx++;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	3301      	adds	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a670:	e013      	b.n	800a69a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4413      	add	r3, r2
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	7812      	ldrb	r2, [r2, #0]
 800a67c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3301      	adds	r3, #1
 800a682:	613b      	str	r3, [r7, #16]
    idx++;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	3301      	adds	r3, #1
 800a688:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	4413      	add	r3, r2
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
    idx++;
 800a694:	7dfb      	ldrb	r3, [r7, #23]
 800a696:	3301      	adds	r3, #1
 800a698:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e7      	bne.n	800a672 <USBD_GetString+0x52>
 800a6a2:	e000      	b.n	800a6a6 <USBD_GetString+0x86>
    return;
 800a6a4:	bf00      	nop
  }
}
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6bc:	e005      	b.n	800a6ca <USBD_GetLen+0x1e>
  {
    len++;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1f5      	bne.n	800a6be <USBD_GetLen+0x12>
  }

  return len;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	2100      	movs	r1, #0
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fce1 	bl	800b0ce <USBD_LL_Transmit>

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	2100      	movs	r1, #0
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 fcd0 	bl	800b0ce <USBD_LL_Transmit>

  return USBD_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2203      	movs	r2, #3
 800a748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	2100      	movs	r1, #0
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fcd4 	bl	800b110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fcc3 	bl	800b110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fc8f 	bl	800b0ce <USBD_LL_Transmit>

  return USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b082      	sub	sp, #8
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2205      	movs	r2, #5
 800a7c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fc9d 	bl	800b110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4912      	ldr	r1, [pc, #72]	@ (800a830 <MX_USB_DEVICE_Init+0x50>)
 800a7e8:	4812      	ldr	r0, [pc, #72]	@ (800a834 <MX_USB_DEVICE_Init+0x54>)
 800a7ea:	f7fe fd03 	bl	80091f4 <USBD_Init>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7f4:	f7f7 fb40 	bl	8001e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7f8:	490f      	ldr	r1, [pc, #60]	@ (800a838 <MX_USB_DEVICE_Init+0x58>)
 800a7fa:	480e      	ldr	r0, [pc, #56]	@ (800a834 <MX_USB_DEVICE_Init+0x54>)
 800a7fc:	f7fe fd2a 	bl	8009254 <USBD_RegisterClass>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a806:	f7f7 fb37 	bl	8001e78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a80a:	490c      	ldr	r1, [pc, #48]	@ (800a83c <MX_USB_DEVICE_Init+0x5c>)
 800a80c:	4809      	ldr	r0, [pc, #36]	@ (800a834 <MX_USB_DEVICE_Init+0x54>)
 800a80e:	f7fe fc21 	bl	8009054 <USBD_CDC_RegisterInterface>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a818:	f7f7 fb2e 	bl	8001e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a81c:	4805      	ldr	r0, [pc, #20]	@ (800a834 <MX_USB_DEVICE_Init+0x54>)
 800a81e:	f7fe fd4f 	bl	80092c0 <USBD_Start>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a828:	f7f7 fb26 	bl	8001e78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a82c:	bf00      	nop
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	200000ac 	.word	0x200000ac
 800a834:	2000063c 	.word	0x2000063c
 800a838:	20000018 	.word	0x20000018
 800a83c:	20000098 	.word	0x20000098

0800a840 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a844:	2200      	movs	r2, #0
 800a846:	4905      	ldr	r1, [pc, #20]	@ (800a85c <CDC_Init_FS+0x1c>)
 800a848:	4805      	ldr	r0, [pc, #20]	@ (800a860 <CDC_Init_FS+0x20>)
 800a84a:	f7fe fc1d 	bl	8009088 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a84e:	4905      	ldr	r1, [pc, #20]	@ (800a864 <CDC_Init_FS+0x24>)
 800a850:	4803      	ldr	r0, [pc, #12]	@ (800a860 <CDC_Init_FS+0x20>)
 800a852:	f7fe fc3b 	bl	80090cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a856:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a858:	4618      	mov	r0, r3
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	20000d18 	.word	0x20000d18
 800a860:	2000063c 	.word	0x2000063c
 800a864:	20000918 	.word	0x20000918

0800a868 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a86c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a86e:	4618      	mov	r0, r3
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
 800a884:	4613      	mov	r3, r2
 800a886:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b23      	cmp	r3, #35	@ 0x23
 800a88c:	d84a      	bhi.n	800a924 <CDC_Control_FS+0xac>
 800a88e:	a201      	add	r2, pc, #4	@ (adr r2, 800a894 <CDC_Control_FS+0x1c>)
 800a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a894:	0800a925 	.word	0x0800a925
 800a898:	0800a925 	.word	0x0800a925
 800a89c:	0800a925 	.word	0x0800a925
 800a8a0:	0800a925 	.word	0x0800a925
 800a8a4:	0800a925 	.word	0x0800a925
 800a8a8:	0800a925 	.word	0x0800a925
 800a8ac:	0800a925 	.word	0x0800a925
 800a8b0:	0800a925 	.word	0x0800a925
 800a8b4:	0800a925 	.word	0x0800a925
 800a8b8:	0800a925 	.word	0x0800a925
 800a8bc:	0800a925 	.word	0x0800a925
 800a8c0:	0800a925 	.word	0x0800a925
 800a8c4:	0800a925 	.word	0x0800a925
 800a8c8:	0800a925 	.word	0x0800a925
 800a8cc:	0800a925 	.word	0x0800a925
 800a8d0:	0800a925 	.word	0x0800a925
 800a8d4:	0800a925 	.word	0x0800a925
 800a8d8:	0800a925 	.word	0x0800a925
 800a8dc:	0800a925 	.word	0x0800a925
 800a8e0:	0800a925 	.word	0x0800a925
 800a8e4:	0800a925 	.word	0x0800a925
 800a8e8:	0800a925 	.word	0x0800a925
 800a8ec:	0800a925 	.word	0x0800a925
 800a8f0:	0800a925 	.word	0x0800a925
 800a8f4:	0800a925 	.word	0x0800a925
 800a8f8:	0800a925 	.word	0x0800a925
 800a8fc:	0800a925 	.word	0x0800a925
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a925 	.word	0x0800a925
 800a908:	0800a925 	.word	0x0800a925
 800a90c:	0800a925 	.word	0x0800a925
 800a910:	0800a925 	.word	0x0800a925
 800a914:	0800a925 	.word	0x0800a925
 800a918:	0800a925 	.word	0x0800a925
 800a91c:	0800a925 	.word	0x0800a925
 800a920:	0800a925 	.word	0x0800a925
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a924:	bf00      	nop
  }

  return (USBD_OK);
 800a926:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	4805      	ldr	r0, [pc, #20]	@ (800a958 <CDC_Receive_FS+0x24>)
 800a942:	f7fe fbc3 	bl	80090cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a946:	4804      	ldr	r0, [pc, #16]	@ (800a958 <CDC_Receive_FS+0x24>)
 800a948:	f7fe fc1e 	bl	8009188 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a94c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	2000063c 	.word	0x2000063c

0800a95c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a96c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a4 <CDC_Transmit_FS+0x48>)
 800a96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a972:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a97e:	2301      	movs	r3, #1
 800a980:	e00b      	b.n	800a99a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a982:	887b      	ldrh	r3, [r7, #2]
 800a984:	461a      	mov	r2, r3
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4806      	ldr	r0, [pc, #24]	@ (800a9a4 <CDC_Transmit_FS+0x48>)
 800a98a:	f7fe fb7d 	bl	8009088 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a98e:	4805      	ldr	r0, [pc, #20]	@ (800a9a4 <CDC_Transmit_FS+0x48>)
 800a990:	f7fe fbba 	bl	8009108 <USBD_CDC_TransmitPacket>
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	2000063c 	.word	0x2000063c

0800a9a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6039      	str	r1, [r7, #0]
 800a9d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2212      	movs	r2, #18
 800a9dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9de:	4b03      	ldr	r3, [pc, #12]	@ (800a9ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	200000c8 	.word	0x200000c8

0800a9f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	6039      	str	r1, [r7, #0]
 800a9fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2204      	movs	r2, #4
 800aa00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa02:	4b03      	ldr	r3, [pc, #12]	@ (800aa10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	200000dc 	.word	0x200000dc

0800aa14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d105      	bne.n	800aa32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	4907      	ldr	r1, [pc, #28]	@ (800aa48 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa2a:	4808      	ldr	r0, [pc, #32]	@ (800aa4c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa2c:	f7ff fdf8 	bl	800a620 <USBD_GetString>
 800aa30:	e004      	b.n	800aa3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4904      	ldr	r1, [pc, #16]	@ (800aa48 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa36:	4805      	ldr	r0, [pc, #20]	@ (800aa4c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa38:	f7ff fdf2 	bl	800a620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20001118 	.word	0x20001118
 800aa4c:	0800dfe0 	.word	0x0800dfe0

0800aa50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	4904      	ldr	r1, [pc, #16]	@ (800aa70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa60:	4804      	ldr	r0, [pc, #16]	@ (800aa74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa62:	f7ff fddd 	bl	800a620 <USBD_GetString>
  return USBD_StrDesc;
 800aa66:	4b02      	ldr	r3, [pc, #8]	@ (800aa70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20001118 	.word	0x20001118
 800aa74:	0800dff8 	.word	0x0800dff8

0800aa78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	221a      	movs	r2, #26
 800aa88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa8a:	f000 f843 	bl	800ab14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa8e:	4b02      	ldr	r3, [pc, #8]	@ (800aa98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200000e0 	.word	0x200000e0

0800aa9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	4907      	ldr	r1, [pc, #28]	@ (800aad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aab2:	4808      	ldr	r0, [pc, #32]	@ (800aad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aab4:	f7ff fdb4 	bl	800a620 <USBD_GetString>
 800aab8:	e004      	b.n	800aac4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4904      	ldr	r1, [pc, #16]	@ (800aad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aabe:	4805      	ldr	r0, [pc, #20]	@ (800aad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac0:	f7ff fdae 	bl	800a620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aac4:	4b02      	ldr	r3, [pc, #8]	@ (800aad0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20001118 	.word	0x20001118
 800aad4:	0800e00c 	.word	0x0800e00c

0800aad8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aae4:	79fb      	ldrb	r3, [r7, #7]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d105      	bne.n	800aaf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	4907      	ldr	r1, [pc, #28]	@ (800ab0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaee:	4808      	ldr	r0, [pc, #32]	@ (800ab10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf0:	f7ff fd96 	bl	800a620 <USBD_GetString>
 800aaf4:	e004      	b.n	800ab00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	4904      	ldr	r1, [pc, #16]	@ (800ab0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aafa:	4805      	ldr	r0, [pc, #20]	@ (800ab10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aafc:	f7ff fd90 	bl	800a620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab00:	4b02      	ldr	r3, [pc, #8]	@ (800ab0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20001118 	.word	0x20001118
 800ab10:	0800e018 	.word	0x0800e018

0800ab14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab58 <Get_SerialNum+0x44>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab20:	4b0e      	ldr	r3, [pc, #56]	@ (800ab5c <Get_SerialNum+0x48>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab26:	4b0e      	ldr	r3, [pc, #56]	@ (800ab60 <Get_SerialNum+0x4c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d009      	beq.n	800ab4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	4909      	ldr	r1, [pc, #36]	@ (800ab64 <Get_SerialNum+0x50>)
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 f814 	bl	800ab6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab44:	2204      	movs	r2, #4
 800ab46:	4908      	ldr	r1, [pc, #32]	@ (800ab68 <Get_SerialNum+0x54>)
 800ab48:	68b8      	ldr	r0, [r7, #8]
 800ab4a:	f000 f80f 	bl	800ab6c <IntToUnicode>
  }
}
 800ab4e:	bf00      	nop
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	1fff7a10 	.word	0x1fff7a10
 800ab5c:	1fff7a14 	.word	0x1fff7a14
 800ab60:	1fff7a18 	.word	0x1fff7a18
 800ab64:	200000e2 	.word	0x200000e2
 800ab68:	200000f2 	.word	0x200000f2

0800ab6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]
 800ab82:	e027      	b.n	800abd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	0f1b      	lsrs	r3, r3, #28
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d80b      	bhi.n	800aba4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	0f1b      	lsrs	r3, r3, #28
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	4619      	mov	r1, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	440b      	add	r3, r1
 800ab9c:	3230      	adds	r2, #48	@ 0x30
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	e00a      	b.n	800abba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	0f1b      	lsrs	r3, r3, #28
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4619      	mov	r1, r3
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	440b      	add	r3, r1
 800abb4:	3237      	adds	r2, #55	@ 0x37
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	3301      	adds	r3, #1
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	4413      	add	r3, r2
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	3301      	adds	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
 800abd4:	7dfa      	ldrb	r2, [r7, #23]
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d3d3      	bcc.n	800ab84 <IntToUnicode+0x18>
  }
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
	...

0800abec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08a      	sub	sp, #40	@ 0x28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abf4:	f107 0314 	add.w	r3, r7, #20
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	605a      	str	r2, [r3, #4]
 800abfe:	609a      	str	r2, [r3, #8]
 800ac00:	60da      	str	r2, [r3, #12]
 800ac02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac0c:	d13a      	bne.n	800ac84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac0e:	2300      	movs	r3, #0
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	4b1e      	ldr	r3, [pc, #120]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac16:	4a1d      	ldr	r2, [pc, #116]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac18:	f043 0301 	orr.w	r3, r3, #1
 800ac1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac1e:	4b1b      	ldr	r3, [pc, #108]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	613b      	str	r3, [r7, #16]
 800ac28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ac2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac30:	2302      	movs	r3, #2
 800ac32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac3c:	230a      	movs	r3, #10
 800ac3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac40:	f107 0314 	add.w	r3, r7, #20
 800ac44:	4619      	mov	r1, r3
 800ac46:	4812      	ldr	r0, [pc, #72]	@ (800ac90 <HAL_PCD_MspInit+0xa4>)
 800ac48:	f7f8 f9ec 	bl	8003024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac50:	4a0e      	ldr	r2, [pc, #56]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac56:	6353      	str	r3, [r2, #52]	@ 0x34
 800ac58:	2300      	movs	r3, #0
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac60:	4a0a      	ldr	r2, [pc, #40]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac66:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac68:	4b08      	ldr	r3, [pc, #32]	@ (800ac8c <HAL_PCD_MspInit+0xa0>)
 800ac6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac74:	2200      	movs	r2, #0
 800ac76:	2100      	movs	r1, #0
 800ac78:	2043      	movs	r0, #67	@ 0x43
 800ac7a:	f7f7 feb2 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac7e:	2043      	movs	r0, #67	@ 0x43
 800ac80:	f7f7 fecb 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac84:	bf00      	nop
 800ac86:	3728      	adds	r7, #40	@ 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40023800 	.word	0x40023800
 800ac90:	40020000 	.word	0x40020000

0800ac94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fe fb55 	bl	800935a <USBD_LL_SetupStage>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800acca:	78fa      	ldrb	r2, [r7, #3]
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	78fb      	ldrb	r3, [r7, #3]
 800ace0:	4619      	mov	r1, r3
 800ace2:	f7fe fb8f 	bl	8009404 <USBD_LL_DataOutStage>
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ad00:	78fa      	ldrb	r2, [r7, #3]
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	4613      	mov	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	3320      	adds	r3, #32
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	4619      	mov	r1, r3
 800ad16:	f7fe fc28 	bl	800956a <USBD_LL_DataInStage>
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fd62 	bl	80097fa <USBD_LL_SOF>
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad46:	2301      	movs	r3, #1
 800ad48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	79db      	ldrb	r3, [r3, #7]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d001      	beq.n	800ad56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad52:	f7f7 f891 	bl	8001e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad5c:	7bfa      	ldrb	r2, [r7, #15]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fe fd06 	bl	8009772 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fe fcae 	bl	80096ce <USBD_LL_Reset>
}
 800ad72:	bf00      	nop
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe fd01 	bl	8009792 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7adb      	ldrb	r3, [r3, #11]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adb0:	4b04      	ldr	r3, [pc, #16]	@ (800adc4 <HAL_PCD_SuspendCallback+0x48>)
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	4a03      	ldr	r2, [pc, #12]	@ (800adc4 <HAL_PCD_SuspendCallback+0x48>)
 800adb6:	f043 0306 	orr.w	r3, r3, #6
 800adba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800adbc:	bf00      	nop
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	e000ed00 	.word	0xe000ed00

0800adc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fcf7 	bl	80097ca <USBD_LL_Resume>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adf6:	78fa      	ldrb	r2, [r7, #3]
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fd4f 	bl	800989e <USBD_LL_IsoOUTIncomplete>
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae1a:	78fa      	ldrb	r2, [r7, #3]
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe fd0b 	bl	800983a <USBD_LL_IsoINIncomplete>
}
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fd61 	bl	8009902 <USBD_LL_DevConnected>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fe fd5e 	bl	8009918 <USBD_LL_DevDisconnected>
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d13c      	bne.n	800aeee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae74:	4a20      	ldr	r2, [pc, #128]	@ (800aef8 <USBD_LL_Init+0x94>)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a1e      	ldr	r2, [pc, #120]	@ (800aef8 <USBD_LL_Init+0x94>)
 800ae80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae84:	4b1c      	ldr	r3, [pc, #112]	@ (800aef8 <USBD_LL_Init+0x94>)
 800ae86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae8c:	4b1a      	ldr	r3, [pc, #104]	@ (800aef8 <USBD_LL_Init+0x94>)
 800ae8e:	2204      	movs	r2, #4
 800ae90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae92:	4b19      	ldr	r3, [pc, #100]	@ (800aef8 <USBD_LL_Init+0x94>)
 800ae94:	2202      	movs	r2, #2
 800ae96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae98:	4b17      	ldr	r3, [pc, #92]	@ (800aef8 <USBD_LL_Init+0x94>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae9e:	4b16      	ldr	r3, [pc, #88]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aea0:	2202      	movs	r2, #2
 800aea2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aea4:	4b14      	ldr	r3, [pc, #80]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aeaa:	4b13      	ldr	r3, [pc, #76]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aeb0:	4b11      	ldr	r3, [pc, #68]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aeb6:	4b10      	ldr	r3, [pc, #64]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aebc:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aec2:	480d      	ldr	r0, [pc, #52]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aec4:	f7f9 fa56 	bl	8004374 <HAL_PCD_Init>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aece:	f7f6 ffd3 	bl	8001e78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aed2:	2180      	movs	r1, #128	@ 0x80
 800aed4:	4808      	ldr	r0, [pc, #32]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aed6:	f7fa fc80 	bl	80057da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aeda:	2240      	movs	r2, #64	@ 0x40
 800aedc:	2100      	movs	r1, #0
 800aede:	4806      	ldr	r0, [pc, #24]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aee0:	f7fa fc34 	bl	800574c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aee4:	2280      	movs	r2, #128	@ 0x80
 800aee6:	2101      	movs	r1, #1
 800aee8:	4803      	ldr	r0, [pc, #12]	@ (800aef8 <USBD_LL_Init+0x94>)
 800aeea:	f7fa fc2f 	bl	800574c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	20001318 	.word	0x20001318

0800aefc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af12:	4618      	mov	r0, r3
 800af14:	f7f9 fb3d 	bl	8004592 <HAL_PCD_Start>
 800af18:	4603      	mov	r3, r0
 800af1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f942 	bl	800b1a8 <USBD_Get_USB_Status>
 800af24:	4603      	mov	r3, r0
 800af26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af28:	7bbb      	ldrb	r3, [r7, #14]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	461a      	mov	r2, r3
 800af40:	4603      	mov	r3, r0
 800af42:	70fb      	strb	r3, [r7, #3]
 800af44:	460b      	mov	r3, r1
 800af46:	70bb      	strb	r3, [r7, #2]
 800af48:	4613      	mov	r3, r2
 800af4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af5a:	78bb      	ldrb	r3, [r7, #2]
 800af5c:	883a      	ldrh	r2, [r7, #0]
 800af5e:	78f9      	ldrb	r1, [r7, #3]
 800af60:	f7fa f811 	bl	8004f86 <HAL_PCD_EP_Open>
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f91c 	bl	800b1a8 <USBD_Get_USB_Status>
 800af70:	4603      	mov	r3, r0
 800af72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af74:	7bbb      	ldrb	r3, [r7, #14]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af98:	78fa      	ldrb	r2, [r7, #3]
 800af9a:	4611      	mov	r1, r2
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fa f85a 	bl	8005056 <HAL_PCD_EP_Close>
 800afa2:	4603      	mov	r3, r0
 800afa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 f8fd 	bl	800b1a8 <USBD_Get_USB_Status>
 800afae:	4603      	mov	r3, r0
 800afb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	460b      	mov	r3, r1
 800afc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afd6:	78fa      	ldrb	r2, [r7, #3]
 800afd8:	4611      	mov	r1, r2
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fa f912 	bl	8005204 <HAL_PCD_EP_SetStall>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f8de 	bl	800b1a8 <USBD_Get_USB_Status>
 800afec:	4603      	mov	r3, r0
 800afee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	4611      	mov	r1, r2
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fa f956 	bl	80052ca <HAL_PCD_EP_ClrStall>
 800b01e:	4603      	mov	r3, r0
 800b020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 f8bf 	bl	800b1a8 <USBD_Get_USB_Status>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b04a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b04c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b050:	2b00      	cmp	r3, #0
 800b052:	da0b      	bge.n	800b06c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	4613      	mov	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	3316      	adds	r3, #22
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	e00b      	b.n	800b084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b072:	68f9      	ldr	r1, [r7, #12]
 800b074:	4613      	mov	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b082:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0aa:	78fa      	ldrb	r2, [r7, #3]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f9 ff45 	bl	8004f3e <HAL_PCD_SetAddress>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f874 	bl	800b1a8 <USBD_Get_USB_Status>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b086      	sub	sp, #24
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b0ec:	7af9      	ldrb	r1, [r7, #11]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	f7fa f84d 	bl	8005190 <HAL_PCD_EP_Transmit>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f853 	bl	800b1a8 <USBD_Get_USB_Status>
 800b102:	4603      	mov	r3, r0
 800b104:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b106:	7dbb      	ldrb	r3, [r7, #22]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	460b      	mov	r3, r1
 800b11e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b12e:	7af9      	ldrb	r1, [r7, #11]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	f7f9 ffd9 	bl	80050ea <HAL_PCD_EP_Receive>
 800b138:	4603      	mov	r3, r0
 800b13a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f832 	bl	800b1a8 <USBD_Get_USB_Status>
 800b144:	4603      	mov	r3, r0
 800b146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b148:	7dbb      	ldrb	r3, [r7, #22]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b164:	78fa      	ldrb	r2, [r7, #3]
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f9 fff9 	bl	8005160 <HAL_PCD_EP_GetRxCount>
 800b16e:	4603      	mov	r3, r0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b180:	4b03      	ldr	r3, [pc, #12]	@ (800b190 <USBD_static_malloc+0x18>)
}
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	200017fc 	.word	0x200017fc

0800b194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]

}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d817      	bhi.n	800b1ec <USBD_Get_USB_Status+0x44>
 800b1bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c4 <USBD_Get_USB_Status+0x1c>)
 800b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c2:	bf00      	nop
 800b1c4:	0800b1d5 	.word	0x0800b1d5
 800b1c8:	0800b1db 	.word	0x0800b1db
 800b1cc:	0800b1e1 	.word	0x0800b1e1
 800b1d0:	0800b1e7 	.word	0x0800b1e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d8:	e00b      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1de:	e008      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e4:	e005      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ea:	e002      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f0:	bf00      	nop
  }
  return usb_status;
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <__cvt>:
 800b200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b204:	ec57 6b10 	vmov	r6, r7, d0
 800b208:	2f00      	cmp	r7, #0
 800b20a:	460c      	mov	r4, r1
 800b20c:	4619      	mov	r1, r3
 800b20e:	463b      	mov	r3, r7
 800b210:	bfbb      	ittet	lt
 800b212:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b216:	461f      	movlt	r7, r3
 800b218:	2300      	movge	r3, #0
 800b21a:	232d      	movlt	r3, #45	@ 0x2d
 800b21c:	700b      	strb	r3, [r1, #0]
 800b21e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b220:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b224:	4691      	mov	r9, r2
 800b226:	f023 0820 	bic.w	r8, r3, #32
 800b22a:	bfbc      	itt	lt
 800b22c:	4632      	movlt	r2, r6
 800b22e:	4616      	movlt	r6, r2
 800b230:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b234:	d005      	beq.n	800b242 <__cvt+0x42>
 800b236:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b23a:	d100      	bne.n	800b23e <__cvt+0x3e>
 800b23c:	3401      	adds	r4, #1
 800b23e:	2102      	movs	r1, #2
 800b240:	e000      	b.n	800b244 <__cvt+0x44>
 800b242:	2103      	movs	r1, #3
 800b244:	ab03      	add	r3, sp, #12
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	ab02      	add	r3, sp, #8
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	ec47 6b10 	vmov	d0, r6, r7
 800b250:	4653      	mov	r3, sl
 800b252:	4622      	mov	r2, r4
 800b254:	f000 fdd0 	bl	800bdf8 <_dtoa_r>
 800b258:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b25c:	4605      	mov	r5, r0
 800b25e:	d119      	bne.n	800b294 <__cvt+0x94>
 800b260:	f019 0f01 	tst.w	r9, #1
 800b264:	d00e      	beq.n	800b284 <__cvt+0x84>
 800b266:	eb00 0904 	add.w	r9, r0, r4
 800b26a:	2200      	movs	r2, #0
 800b26c:	2300      	movs	r3, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 800b276:	b108      	cbz	r0, 800b27c <__cvt+0x7c>
 800b278:	f8cd 900c 	str.w	r9, [sp, #12]
 800b27c:	2230      	movs	r2, #48	@ 0x30
 800b27e:	9b03      	ldr	r3, [sp, #12]
 800b280:	454b      	cmp	r3, r9
 800b282:	d31e      	bcc.n	800b2c2 <__cvt+0xc2>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b288:	1b5b      	subs	r3, r3, r5
 800b28a:	4628      	mov	r0, r5
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	b004      	add	sp, #16
 800b290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b294:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b298:	eb00 0904 	add.w	r9, r0, r4
 800b29c:	d1e5      	bne.n	800b26a <__cvt+0x6a>
 800b29e:	7803      	ldrb	r3, [r0, #0]
 800b2a0:	2b30      	cmp	r3, #48	@ 0x30
 800b2a2:	d10a      	bne.n	800b2ba <__cvt+0xba>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 fc14 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2b0:	b918      	cbnz	r0, 800b2ba <__cvt+0xba>
 800b2b2:	f1c4 0401 	rsb	r4, r4, #1
 800b2b6:	f8ca 4000 	str.w	r4, [sl]
 800b2ba:	f8da 3000 	ldr.w	r3, [sl]
 800b2be:	4499      	add	r9, r3
 800b2c0:	e7d3      	b.n	800b26a <__cvt+0x6a>
 800b2c2:	1c59      	adds	r1, r3, #1
 800b2c4:	9103      	str	r1, [sp, #12]
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	e7d9      	b.n	800b27e <__cvt+0x7e>

0800b2ca <__exponent>:
 800b2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	bfba      	itte	lt
 800b2d0:	4249      	neglt	r1, r1
 800b2d2:	232d      	movlt	r3, #45	@ 0x2d
 800b2d4:	232b      	movge	r3, #43	@ 0x2b
 800b2d6:	2909      	cmp	r1, #9
 800b2d8:	7002      	strb	r2, [r0, #0]
 800b2da:	7043      	strb	r3, [r0, #1]
 800b2dc:	dd29      	ble.n	800b332 <__exponent+0x68>
 800b2de:	f10d 0307 	add.w	r3, sp, #7
 800b2e2:	461d      	mov	r5, r3
 800b2e4:	270a      	movs	r7, #10
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2ec:	fb07 1416 	mls	r4, r7, r6, r1
 800b2f0:	3430      	adds	r4, #48	@ 0x30
 800b2f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	2c63      	cmp	r4, #99	@ 0x63
 800b2fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b2fe:	4631      	mov	r1, r6
 800b300:	dcf1      	bgt.n	800b2e6 <__exponent+0x1c>
 800b302:	3130      	adds	r1, #48	@ 0x30
 800b304:	1e94      	subs	r4, r2, #2
 800b306:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b30a:	1c41      	adds	r1, r0, #1
 800b30c:	4623      	mov	r3, r4
 800b30e:	42ab      	cmp	r3, r5
 800b310:	d30a      	bcc.n	800b328 <__exponent+0x5e>
 800b312:	f10d 0309 	add.w	r3, sp, #9
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	42ac      	cmp	r4, r5
 800b31a:	bf88      	it	hi
 800b31c:	2300      	movhi	r3, #0
 800b31e:	3302      	adds	r3, #2
 800b320:	4403      	add	r3, r0
 800b322:	1a18      	subs	r0, r3, r0
 800b324:	b003      	add	sp, #12
 800b326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b328:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b32c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b330:	e7ed      	b.n	800b30e <__exponent+0x44>
 800b332:	2330      	movs	r3, #48	@ 0x30
 800b334:	3130      	adds	r1, #48	@ 0x30
 800b336:	7083      	strb	r3, [r0, #2]
 800b338:	70c1      	strb	r1, [r0, #3]
 800b33a:	1d03      	adds	r3, r0, #4
 800b33c:	e7f1      	b.n	800b322 <__exponent+0x58>
	...

0800b340 <_printf_float>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	b08d      	sub	sp, #52	@ 0x34
 800b346:	460c      	mov	r4, r1
 800b348:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b34c:	4616      	mov	r6, r2
 800b34e:	461f      	mov	r7, r3
 800b350:	4605      	mov	r5, r0
 800b352:	f000 fc97 	bl	800bc84 <_localeconv_r>
 800b356:	6803      	ldr	r3, [r0, #0]
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f4 ff90 	bl	8000280 <strlen>
 800b360:	2300      	movs	r3, #0
 800b362:	930a      	str	r3, [sp, #40]	@ 0x28
 800b364:	f8d8 3000 	ldr.w	r3, [r8]
 800b368:	9005      	str	r0, [sp, #20]
 800b36a:	3307      	adds	r3, #7
 800b36c:	f023 0307 	bic.w	r3, r3, #7
 800b370:	f103 0208 	add.w	r2, r3, #8
 800b374:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b378:	f8d4 b000 	ldr.w	fp, [r4]
 800b37c:	f8c8 2000 	str.w	r2, [r8]
 800b380:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b384:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b38e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b396:	4b9c      	ldr	r3, [pc, #624]	@ (800b608 <_printf_float+0x2c8>)
 800b398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b39c:	f7f5 fbce 	bl	8000b3c <__aeabi_dcmpun>
 800b3a0:	bb70      	cbnz	r0, 800b400 <_printf_float+0xc0>
 800b3a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3a6:	4b98      	ldr	r3, [pc, #608]	@ (800b608 <_printf_float+0x2c8>)
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3ac:	f7f5 fba8 	bl	8000b00 <__aeabi_dcmple>
 800b3b0:	bb30      	cbnz	r0, 800b400 <_printf_float+0xc0>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	f7f5 fb97 	bl	8000aec <__aeabi_dcmplt>
 800b3be:	b110      	cbz	r0, 800b3c6 <_printf_float+0x86>
 800b3c0:	232d      	movs	r3, #45	@ 0x2d
 800b3c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c6:	4a91      	ldr	r2, [pc, #580]	@ (800b60c <_printf_float+0x2cc>)
 800b3c8:	4b91      	ldr	r3, [pc, #580]	@ (800b610 <_printf_float+0x2d0>)
 800b3ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3ce:	bf94      	ite	ls
 800b3d0:	4690      	movls	r8, r2
 800b3d2:	4698      	movhi	r8, r3
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	f02b 0304 	bic.w	r3, fp, #4
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	f04f 0900 	mov.w	r9, #0
 800b3e2:	9700      	str	r7, [sp, #0]
 800b3e4:	4633      	mov	r3, r6
 800b3e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 f9d2 	bl	800b794 <_printf_common>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f040 808d 	bne.w	800b510 <_printf_float+0x1d0>
 800b3f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3fa:	b00d      	add	sp, #52	@ 0x34
 800b3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b400:	4642      	mov	r2, r8
 800b402:	464b      	mov	r3, r9
 800b404:	4640      	mov	r0, r8
 800b406:	4649      	mov	r1, r9
 800b408:	f7f5 fb98 	bl	8000b3c <__aeabi_dcmpun>
 800b40c:	b140      	cbz	r0, 800b420 <_printf_float+0xe0>
 800b40e:	464b      	mov	r3, r9
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfbc      	itt	lt
 800b414:	232d      	movlt	r3, #45	@ 0x2d
 800b416:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b41a:	4a7e      	ldr	r2, [pc, #504]	@ (800b614 <_printf_float+0x2d4>)
 800b41c:	4b7e      	ldr	r3, [pc, #504]	@ (800b618 <_printf_float+0x2d8>)
 800b41e:	e7d4      	b.n	800b3ca <_printf_float+0x8a>
 800b420:	6863      	ldr	r3, [r4, #4]
 800b422:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b426:	9206      	str	r2, [sp, #24]
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	d13b      	bne.n	800b4a4 <_printf_float+0x164>
 800b42c:	2306      	movs	r3, #6
 800b42e:	6063      	str	r3, [r4, #4]
 800b430:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b434:	2300      	movs	r3, #0
 800b436:	6022      	str	r2, [r4, #0]
 800b438:	9303      	str	r3, [sp, #12]
 800b43a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b43c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b440:	ab09      	add	r3, sp, #36	@ 0x24
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	6861      	ldr	r1, [r4, #4]
 800b446:	ec49 8b10 	vmov	d0, r8, r9
 800b44a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b44e:	4628      	mov	r0, r5
 800b450:	f7ff fed6 	bl	800b200 <__cvt>
 800b454:	9b06      	ldr	r3, [sp, #24]
 800b456:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b458:	2b47      	cmp	r3, #71	@ 0x47
 800b45a:	4680      	mov	r8, r0
 800b45c:	d129      	bne.n	800b4b2 <_printf_float+0x172>
 800b45e:	1cc8      	adds	r0, r1, #3
 800b460:	db02      	blt.n	800b468 <_printf_float+0x128>
 800b462:	6863      	ldr	r3, [r4, #4]
 800b464:	4299      	cmp	r1, r3
 800b466:	dd41      	ble.n	800b4ec <_printf_float+0x1ac>
 800b468:	f1aa 0a02 	sub.w	sl, sl, #2
 800b46c:	fa5f fa8a 	uxtb.w	sl, sl
 800b470:	3901      	subs	r1, #1
 800b472:	4652      	mov	r2, sl
 800b474:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b478:	9109      	str	r1, [sp, #36]	@ 0x24
 800b47a:	f7ff ff26 	bl	800b2ca <__exponent>
 800b47e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b480:	1813      	adds	r3, r2, r0
 800b482:	2a01      	cmp	r2, #1
 800b484:	4681      	mov	r9, r0
 800b486:	6123      	str	r3, [r4, #16]
 800b488:	dc02      	bgt.n	800b490 <_printf_float+0x150>
 800b48a:	6822      	ldr	r2, [r4, #0]
 800b48c:	07d2      	lsls	r2, r2, #31
 800b48e:	d501      	bpl.n	800b494 <_printf_float+0x154>
 800b490:	3301      	adds	r3, #1
 800b492:	6123      	str	r3, [r4, #16]
 800b494:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0a2      	beq.n	800b3e2 <_printf_float+0xa2>
 800b49c:	232d      	movs	r3, #45	@ 0x2d
 800b49e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4a2:	e79e      	b.n	800b3e2 <_printf_float+0xa2>
 800b4a4:	9a06      	ldr	r2, [sp, #24]
 800b4a6:	2a47      	cmp	r2, #71	@ 0x47
 800b4a8:	d1c2      	bne.n	800b430 <_printf_float+0xf0>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1c0      	bne.n	800b430 <_printf_float+0xf0>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e7bd      	b.n	800b42e <_printf_float+0xee>
 800b4b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4b6:	d9db      	bls.n	800b470 <_printf_float+0x130>
 800b4b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4bc:	d118      	bne.n	800b4f0 <_printf_float+0x1b0>
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	6863      	ldr	r3, [r4, #4]
 800b4c2:	dd0b      	ble.n	800b4dc <_printf_float+0x19c>
 800b4c4:	6121      	str	r1, [r4, #16]
 800b4c6:	b913      	cbnz	r3, 800b4ce <_printf_float+0x18e>
 800b4c8:	6822      	ldr	r2, [r4, #0]
 800b4ca:	07d0      	lsls	r0, r2, #31
 800b4cc:	d502      	bpl.n	800b4d4 <_printf_float+0x194>
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	440b      	add	r3, r1
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4d6:	f04f 0900 	mov.w	r9, #0
 800b4da:	e7db      	b.n	800b494 <_printf_float+0x154>
 800b4dc:	b913      	cbnz	r3, 800b4e4 <_printf_float+0x1a4>
 800b4de:	6822      	ldr	r2, [r4, #0]
 800b4e0:	07d2      	lsls	r2, r2, #31
 800b4e2:	d501      	bpl.n	800b4e8 <_printf_float+0x1a8>
 800b4e4:	3302      	adds	r3, #2
 800b4e6:	e7f4      	b.n	800b4d2 <_printf_float+0x192>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e7f2      	b.n	800b4d2 <_printf_float+0x192>
 800b4ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4f2:	4299      	cmp	r1, r3
 800b4f4:	db05      	blt.n	800b502 <_printf_float+0x1c2>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	6121      	str	r1, [r4, #16]
 800b4fa:	07d8      	lsls	r0, r3, #31
 800b4fc:	d5ea      	bpl.n	800b4d4 <_printf_float+0x194>
 800b4fe:	1c4b      	adds	r3, r1, #1
 800b500:	e7e7      	b.n	800b4d2 <_printf_float+0x192>
 800b502:	2900      	cmp	r1, #0
 800b504:	bfd4      	ite	le
 800b506:	f1c1 0202 	rsble	r2, r1, #2
 800b50a:	2201      	movgt	r2, #1
 800b50c:	4413      	add	r3, r2
 800b50e:	e7e0      	b.n	800b4d2 <_printf_float+0x192>
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	055a      	lsls	r2, r3, #21
 800b514:	d407      	bmi.n	800b526 <_printf_float+0x1e6>
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	4642      	mov	r2, r8
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b8      	blx	r7
 800b520:	3001      	adds	r0, #1
 800b522:	d12b      	bne.n	800b57c <_printf_float+0x23c>
 800b524:	e767      	b.n	800b3f6 <_printf_float+0xb6>
 800b526:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b52a:	f240 80dd 	bls.w	800b6e8 <_printf_float+0x3a8>
 800b52e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b532:	2200      	movs	r2, #0
 800b534:	2300      	movs	r3, #0
 800b536:	f7f5 facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d033      	beq.n	800b5a6 <_printf_float+0x266>
 800b53e:	4a37      	ldr	r2, [pc, #220]	@ (800b61c <_printf_float+0x2dc>)
 800b540:	2301      	movs	r3, #1
 800b542:	4631      	mov	r1, r6
 800b544:	4628      	mov	r0, r5
 800b546:	47b8      	blx	r7
 800b548:	3001      	adds	r0, #1
 800b54a:	f43f af54 	beq.w	800b3f6 <_printf_float+0xb6>
 800b54e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b552:	4543      	cmp	r3, r8
 800b554:	db02      	blt.n	800b55c <_printf_float+0x21c>
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	07d8      	lsls	r0, r3, #31
 800b55a:	d50f      	bpl.n	800b57c <_printf_float+0x23c>
 800b55c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b560:	4631      	mov	r1, r6
 800b562:	4628      	mov	r0, r5
 800b564:	47b8      	blx	r7
 800b566:	3001      	adds	r0, #1
 800b568:	f43f af45 	beq.w	800b3f6 <_printf_float+0xb6>
 800b56c:	f04f 0900 	mov.w	r9, #0
 800b570:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b574:	f104 0a1a 	add.w	sl, r4, #26
 800b578:	45c8      	cmp	r8, r9
 800b57a:	dc09      	bgt.n	800b590 <_printf_float+0x250>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	079b      	lsls	r3, r3, #30
 800b580:	f100 8103 	bmi.w	800b78a <_printf_float+0x44a>
 800b584:	68e0      	ldr	r0, [r4, #12]
 800b586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b588:	4298      	cmp	r0, r3
 800b58a:	bfb8      	it	lt
 800b58c:	4618      	movlt	r0, r3
 800b58e:	e734      	b.n	800b3fa <_printf_float+0xba>
 800b590:	2301      	movs	r3, #1
 800b592:	4652      	mov	r2, sl
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	47b8      	blx	r7
 800b59a:	3001      	adds	r0, #1
 800b59c:	f43f af2b 	beq.w	800b3f6 <_printf_float+0xb6>
 800b5a0:	f109 0901 	add.w	r9, r9, #1
 800b5a4:	e7e8      	b.n	800b578 <_printf_float+0x238>
 800b5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dc39      	bgt.n	800b620 <_printf_float+0x2e0>
 800b5ac:	4a1b      	ldr	r2, [pc, #108]	@ (800b61c <_printf_float+0x2dc>)
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f43f af1d 	beq.w	800b3f6 <_printf_float+0xb6>
 800b5bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b5c0:	ea59 0303 	orrs.w	r3, r9, r3
 800b5c4:	d102      	bne.n	800b5cc <_printf_float+0x28c>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	07d9      	lsls	r1, r3, #31
 800b5ca:	d5d7      	bpl.n	800b57c <_printf_float+0x23c>
 800b5cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	47b8      	blx	r7
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	f43f af0d 	beq.w	800b3f6 <_printf_float+0xb6>
 800b5dc:	f04f 0a00 	mov.w	sl, #0
 800b5e0:	f104 0b1a 	add.w	fp, r4, #26
 800b5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e6:	425b      	negs	r3, r3
 800b5e8:	4553      	cmp	r3, sl
 800b5ea:	dc01      	bgt.n	800b5f0 <_printf_float+0x2b0>
 800b5ec:	464b      	mov	r3, r9
 800b5ee:	e793      	b.n	800b518 <_printf_float+0x1d8>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	465a      	mov	r2, fp
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	47b8      	blx	r7
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	f43f aefb 	beq.w	800b3f6 <_printf_float+0xb6>
 800b600:	f10a 0a01 	add.w	sl, sl, #1
 800b604:	e7ee      	b.n	800b5e4 <_printf_float+0x2a4>
 800b606:	bf00      	nop
 800b608:	7fefffff 	.word	0x7fefffff
 800b60c:	0800e048 	.word	0x0800e048
 800b610:	0800e04c 	.word	0x0800e04c
 800b614:	0800e050 	.word	0x0800e050
 800b618:	0800e054 	.word	0x0800e054
 800b61c:	0800e058 	.word	0x0800e058
 800b620:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b622:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b626:	4553      	cmp	r3, sl
 800b628:	bfa8      	it	ge
 800b62a:	4653      	movge	r3, sl
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	4699      	mov	r9, r3
 800b630:	dc36      	bgt.n	800b6a0 <_printf_float+0x360>
 800b632:	f04f 0b00 	mov.w	fp, #0
 800b636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b63a:	f104 021a 	add.w	r2, r4, #26
 800b63e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b640:	9306      	str	r3, [sp, #24]
 800b642:	eba3 0309 	sub.w	r3, r3, r9
 800b646:	455b      	cmp	r3, fp
 800b648:	dc31      	bgt.n	800b6ae <_printf_float+0x36e>
 800b64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b64c:	459a      	cmp	sl, r3
 800b64e:	dc3a      	bgt.n	800b6c6 <_printf_float+0x386>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	07da      	lsls	r2, r3, #31
 800b654:	d437      	bmi.n	800b6c6 <_printf_float+0x386>
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	ebaa 0903 	sub.w	r9, sl, r3
 800b65c:	9b06      	ldr	r3, [sp, #24]
 800b65e:	ebaa 0303 	sub.w	r3, sl, r3
 800b662:	4599      	cmp	r9, r3
 800b664:	bfa8      	it	ge
 800b666:	4699      	movge	r9, r3
 800b668:	f1b9 0f00 	cmp.w	r9, #0
 800b66c:	dc33      	bgt.n	800b6d6 <_printf_float+0x396>
 800b66e:	f04f 0800 	mov.w	r8, #0
 800b672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b676:	f104 0b1a 	add.w	fp, r4, #26
 800b67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67c:	ebaa 0303 	sub.w	r3, sl, r3
 800b680:	eba3 0309 	sub.w	r3, r3, r9
 800b684:	4543      	cmp	r3, r8
 800b686:	f77f af79 	ble.w	800b57c <_printf_float+0x23c>
 800b68a:	2301      	movs	r3, #1
 800b68c:	465a      	mov	r2, fp
 800b68e:	4631      	mov	r1, r6
 800b690:	4628      	mov	r0, r5
 800b692:	47b8      	blx	r7
 800b694:	3001      	adds	r0, #1
 800b696:	f43f aeae 	beq.w	800b3f6 <_printf_float+0xb6>
 800b69a:	f108 0801 	add.w	r8, r8, #1
 800b69e:	e7ec      	b.n	800b67a <_printf_float+0x33a>
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d1c2      	bne.n	800b632 <_printf_float+0x2f2>
 800b6ac:	e6a3      	b.n	800b3f6 <_printf_float+0xb6>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	9206      	str	r2, [sp, #24]
 800b6b6:	47b8      	blx	r7
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	f43f ae9c 	beq.w	800b3f6 <_printf_float+0xb6>
 800b6be:	9a06      	ldr	r2, [sp, #24]
 800b6c0:	f10b 0b01 	add.w	fp, fp, #1
 800b6c4:	e7bb      	b.n	800b63e <_printf_float+0x2fe>
 800b6c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d1c0      	bne.n	800b656 <_printf_float+0x316>
 800b6d4:	e68f      	b.n	800b3f6 <_printf_float+0xb6>
 800b6d6:	9a06      	ldr	r2, [sp, #24]
 800b6d8:	464b      	mov	r3, r9
 800b6da:	4442      	add	r2, r8
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b8      	blx	r7
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	d1c3      	bne.n	800b66e <_printf_float+0x32e>
 800b6e6:	e686      	b.n	800b3f6 <_printf_float+0xb6>
 800b6e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6ec:	f1ba 0f01 	cmp.w	sl, #1
 800b6f0:	dc01      	bgt.n	800b6f6 <_printf_float+0x3b6>
 800b6f2:	07db      	lsls	r3, r3, #31
 800b6f4:	d536      	bpl.n	800b764 <_printf_float+0x424>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	47b8      	blx	r7
 800b700:	3001      	adds	r0, #1
 800b702:	f43f ae78 	beq.w	800b3f6 <_printf_float+0xb6>
 800b706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	f43f ae70 	beq.w	800b3f6 <_printf_float+0xb6>
 800b716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b71a:	2200      	movs	r2, #0
 800b71c:	2300      	movs	r3, #0
 800b71e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b722:	f7f5 f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b726:	b9c0      	cbnz	r0, 800b75a <_printf_float+0x41a>
 800b728:	4653      	mov	r3, sl
 800b72a:	f108 0201 	add.w	r2, r8, #1
 800b72e:	4631      	mov	r1, r6
 800b730:	4628      	mov	r0, r5
 800b732:	47b8      	blx	r7
 800b734:	3001      	adds	r0, #1
 800b736:	d10c      	bne.n	800b752 <_printf_float+0x412>
 800b738:	e65d      	b.n	800b3f6 <_printf_float+0xb6>
 800b73a:	2301      	movs	r3, #1
 800b73c:	465a      	mov	r2, fp
 800b73e:	4631      	mov	r1, r6
 800b740:	4628      	mov	r0, r5
 800b742:	47b8      	blx	r7
 800b744:	3001      	adds	r0, #1
 800b746:	f43f ae56 	beq.w	800b3f6 <_printf_float+0xb6>
 800b74a:	f108 0801 	add.w	r8, r8, #1
 800b74e:	45d0      	cmp	r8, sl
 800b750:	dbf3      	blt.n	800b73a <_printf_float+0x3fa>
 800b752:	464b      	mov	r3, r9
 800b754:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b758:	e6df      	b.n	800b51a <_printf_float+0x1da>
 800b75a:	f04f 0800 	mov.w	r8, #0
 800b75e:	f104 0b1a 	add.w	fp, r4, #26
 800b762:	e7f4      	b.n	800b74e <_printf_float+0x40e>
 800b764:	2301      	movs	r3, #1
 800b766:	4642      	mov	r2, r8
 800b768:	e7e1      	b.n	800b72e <_printf_float+0x3ee>
 800b76a:	2301      	movs	r3, #1
 800b76c:	464a      	mov	r2, r9
 800b76e:	4631      	mov	r1, r6
 800b770:	4628      	mov	r0, r5
 800b772:	47b8      	blx	r7
 800b774:	3001      	adds	r0, #1
 800b776:	f43f ae3e 	beq.w	800b3f6 <_printf_float+0xb6>
 800b77a:	f108 0801 	add.w	r8, r8, #1
 800b77e:	68e3      	ldr	r3, [r4, #12]
 800b780:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b782:	1a5b      	subs	r3, r3, r1
 800b784:	4543      	cmp	r3, r8
 800b786:	dcf0      	bgt.n	800b76a <_printf_float+0x42a>
 800b788:	e6fc      	b.n	800b584 <_printf_float+0x244>
 800b78a:	f04f 0800 	mov.w	r8, #0
 800b78e:	f104 0919 	add.w	r9, r4, #25
 800b792:	e7f4      	b.n	800b77e <_printf_float+0x43e>

0800b794 <_printf_common>:
 800b794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b798:	4616      	mov	r6, r2
 800b79a:	4698      	mov	r8, r3
 800b79c:	688a      	ldr	r2, [r1, #8]
 800b79e:	690b      	ldr	r3, [r1, #16]
 800b7a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	bfb8      	it	lt
 800b7a8:	4613      	movlt	r3, r2
 800b7aa:	6033      	str	r3, [r6, #0]
 800b7ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	b10a      	cbz	r2, 800b7ba <_printf_common+0x26>
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	6033      	str	r3, [r6, #0]
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	0699      	lsls	r1, r3, #26
 800b7be:	bf42      	ittt	mi
 800b7c0:	6833      	ldrmi	r3, [r6, #0]
 800b7c2:	3302      	addmi	r3, #2
 800b7c4:	6033      	strmi	r3, [r6, #0]
 800b7c6:	6825      	ldr	r5, [r4, #0]
 800b7c8:	f015 0506 	ands.w	r5, r5, #6
 800b7cc:	d106      	bne.n	800b7dc <_printf_common+0x48>
 800b7ce:	f104 0a19 	add.w	sl, r4, #25
 800b7d2:	68e3      	ldr	r3, [r4, #12]
 800b7d4:	6832      	ldr	r2, [r6, #0]
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	42ab      	cmp	r3, r5
 800b7da:	dc26      	bgt.n	800b82a <_printf_common+0x96>
 800b7dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7e0:	6822      	ldr	r2, [r4, #0]
 800b7e2:	3b00      	subs	r3, #0
 800b7e4:	bf18      	it	ne
 800b7e6:	2301      	movne	r3, #1
 800b7e8:	0692      	lsls	r2, r2, #26
 800b7ea:	d42b      	bmi.n	800b844 <_printf_common+0xb0>
 800b7ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7f0:	4641      	mov	r1, r8
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	47c8      	blx	r9
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d01e      	beq.n	800b838 <_printf_common+0xa4>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	6922      	ldr	r2, [r4, #16]
 800b7fe:	f003 0306 	and.w	r3, r3, #6
 800b802:	2b04      	cmp	r3, #4
 800b804:	bf02      	ittt	eq
 800b806:	68e5      	ldreq	r5, [r4, #12]
 800b808:	6833      	ldreq	r3, [r6, #0]
 800b80a:	1aed      	subeq	r5, r5, r3
 800b80c:	68a3      	ldr	r3, [r4, #8]
 800b80e:	bf0c      	ite	eq
 800b810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b814:	2500      	movne	r5, #0
 800b816:	4293      	cmp	r3, r2
 800b818:	bfc4      	itt	gt
 800b81a:	1a9b      	subgt	r3, r3, r2
 800b81c:	18ed      	addgt	r5, r5, r3
 800b81e:	2600      	movs	r6, #0
 800b820:	341a      	adds	r4, #26
 800b822:	42b5      	cmp	r5, r6
 800b824:	d11a      	bne.n	800b85c <_printf_common+0xc8>
 800b826:	2000      	movs	r0, #0
 800b828:	e008      	b.n	800b83c <_printf_common+0xa8>
 800b82a:	2301      	movs	r3, #1
 800b82c:	4652      	mov	r2, sl
 800b82e:	4641      	mov	r1, r8
 800b830:	4638      	mov	r0, r7
 800b832:	47c8      	blx	r9
 800b834:	3001      	adds	r0, #1
 800b836:	d103      	bne.n	800b840 <_printf_common+0xac>
 800b838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b840:	3501      	adds	r5, #1
 800b842:	e7c6      	b.n	800b7d2 <_printf_common+0x3e>
 800b844:	18e1      	adds	r1, r4, r3
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	2030      	movs	r0, #48	@ 0x30
 800b84a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b84e:	4422      	add	r2, r4
 800b850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b858:	3302      	adds	r3, #2
 800b85a:	e7c7      	b.n	800b7ec <_printf_common+0x58>
 800b85c:	2301      	movs	r3, #1
 800b85e:	4622      	mov	r2, r4
 800b860:	4641      	mov	r1, r8
 800b862:	4638      	mov	r0, r7
 800b864:	47c8      	blx	r9
 800b866:	3001      	adds	r0, #1
 800b868:	d0e6      	beq.n	800b838 <_printf_common+0xa4>
 800b86a:	3601      	adds	r6, #1
 800b86c:	e7d9      	b.n	800b822 <_printf_common+0x8e>
	...

0800b870 <_printf_i>:
 800b870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b874:	7e0f      	ldrb	r7, [r1, #24]
 800b876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b878:	2f78      	cmp	r7, #120	@ 0x78
 800b87a:	4691      	mov	r9, r2
 800b87c:	4680      	mov	r8, r0
 800b87e:	460c      	mov	r4, r1
 800b880:	469a      	mov	sl, r3
 800b882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b886:	d807      	bhi.n	800b898 <_printf_i+0x28>
 800b888:	2f62      	cmp	r7, #98	@ 0x62
 800b88a:	d80a      	bhi.n	800b8a2 <_printf_i+0x32>
 800b88c:	2f00      	cmp	r7, #0
 800b88e:	f000 80d2 	beq.w	800ba36 <_printf_i+0x1c6>
 800b892:	2f58      	cmp	r7, #88	@ 0x58
 800b894:	f000 80b9 	beq.w	800ba0a <_printf_i+0x19a>
 800b898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b89c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8a0:	e03a      	b.n	800b918 <_printf_i+0xa8>
 800b8a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8a6:	2b15      	cmp	r3, #21
 800b8a8:	d8f6      	bhi.n	800b898 <_printf_i+0x28>
 800b8aa:	a101      	add	r1, pc, #4	@ (adr r1, 800b8b0 <_printf_i+0x40>)
 800b8ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8b0:	0800b909 	.word	0x0800b909
 800b8b4:	0800b91d 	.word	0x0800b91d
 800b8b8:	0800b899 	.word	0x0800b899
 800b8bc:	0800b899 	.word	0x0800b899
 800b8c0:	0800b899 	.word	0x0800b899
 800b8c4:	0800b899 	.word	0x0800b899
 800b8c8:	0800b91d 	.word	0x0800b91d
 800b8cc:	0800b899 	.word	0x0800b899
 800b8d0:	0800b899 	.word	0x0800b899
 800b8d4:	0800b899 	.word	0x0800b899
 800b8d8:	0800b899 	.word	0x0800b899
 800b8dc:	0800ba1d 	.word	0x0800ba1d
 800b8e0:	0800b947 	.word	0x0800b947
 800b8e4:	0800b9d7 	.word	0x0800b9d7
 800b8e8:	0800b899 	.word	0x0800b899
 800b8ec:	0800b899 	.word	0x0800b899
 800b8f0:	0800ba3f 	.word	0x0800ba3f
 800b8f4:	0800b899 	.word	0x0800b899
 800b8f8:	0800b947 	.word	0x0800b947
 800b8fc:	0800b899 	.word	0x0800b899
 800b900:	0800b899 	.word	0x0800b899
 800b904:	0800b9df 	.word	0x0800b9df
 800b908:	6833      	ldr	r3, [r6, #0]
 800b90a:	1d1a      	adds	r2, r3, #4
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6032      	str	r2, [r6, #0]
 800b910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b918:	2301      	movs	r3, #1
 800b91a:	e09d      	b.n	800ba58 <_printf_i+0x1e8>
 800b91c:	6833      	ldr	r3, [r6, #0]
 800b91e:	6820      	ldr	r0, [r4, #0]
 800b920:	1d19      	adds	r1, r3, #4
 800b922:	6031      	str	r1, [r6, #0]
 800b924:	0606      	lsls	r6, r0, #24
 800b926:	d501      	bpl.n	800b92c <_printf_i+0xbc>
 800b928:	681d      	ldr	r5, [r3, #0]
 800b92a:	e003      	b.n	800b934 <_printf_i+0xc4>
 800b92c:	0645      	lsls	r5, r0, #25
 800b92e:	d5fb      	bpl.n	800b928 <_printf_i+0xb8>
 800b930:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b934:	2d00      	cmp	r5, #0
 800b936:	da03      	bge.n	800b940 <_printf_i+0xd0>
 800b938:	232d      	movs	r3, #45	@ 0x2d
 800b93a:	426d      	negs	r5, r5
 800b93c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b940:	4859      	ldr	r0, [pc, #356]	@ (800baa8 <_printf_i+0x238>)
 800b942:	230a      	movs	r3, #10
 800b944:	e011      	b.n	800b96a <_printf_i+0xfa>
 800b946:	6821      	ldr	r1, [r4, #0]
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	0608      	lsls	r0, r1, #24
 800b94c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b950:	d402      	bmi.n	800b958 <_printf_i+0xe8>
 800b952:	0649      	lsls	r1, r1, #25
 800b954:	bf48      	it	mi
 800b956:	b2ad      	uxthmi	r5, r5
 800b958:	2f6f      	cmp	r7, #111	@ 0x6f
 800b95a:	4853      	ldr	r0, [pc, #332]	@ (800baa8 <_printf_i+0x238>)
 800b95c:	6033      	str	r3, [r6, #0]
 800b95e:	bf14      	ite	ne
 800b960:	230a      	movne	r3, #10
 800b962:	2308      	moveq	r3, #8
 800b964:	2100      	movs	r1, #0
 800b966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b96a:	6866      	ldr	r6, [r4, #4]
 800b96c:	60a6      	str	r6, [r4, #8]
 800b96e:	2e00      	cmp	r6, #0
 800b970:	bfa2      	ittt	ge
 800b972:	6821      	ldrge	r1, [r4, #0]
 800b974:	f021 0104 	bicge.w	r1, r1, #4
 800b978:	6021      	strge	r1, [r4, #0]
 800b97a:	b90d      	cbnz	r5, 800b980 <_printf_i+0x110>
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	d04b      	beq.n	800ba18 <_printf_i+0x1a8>
 800b980:	4616      	mov	r6, r2
 800b982:	fbb5 f1f3 	udiv	r1, r5, r3
 800b986:	fb03 5711 	mls	r7, r3, r1, r5
 800b98a:	5dc7      	ldrb	r7, [r0, r7]
 800b98c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b990:	462f      	mov	r7, r5
 800b992:	42bb      	cmp	r3, r7
 800b994:	460d      	mov	r5, r1
 800b996:	d9f4      	bls.n	800b982 <_printf_i+0x112>
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d10b      	bne.n	800b9b4 <_printf_i+0x144>
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	07df      	lsls	r7, r3, #31
 800b9a0:	d508      	bpl.n	800b9b4 <_printf_i+0x144>
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	bfde      	ittt	le
 800b9aa:	2330      	movle	r3, #48	@ 0x30
 800b9ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b9b4:	1b92      	subs	r2, r2, r6
 800b9b6:	6122      	str	r2, [r4, #16]
 800b9b8:	f8cd a000 	str.w	sl, [sp]
 800b9bc:	464b      	mov	r3, r9
 800b9be:	aa03      	add	r2, sp, #12
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	f7ff fee6 	bl	800b794 <_printf_common>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d14a      	bne.n	800ba62 <_printf_i+0x1f2>
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9d0:	b004      	add	sp, #16
 800b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	4833      	ldr	r0, [pc, #204]	@ (800baac <_printf_i+0x23c>)
 800b9e0:	2778      	movs	r7, #120	@ 0x78
 800b9e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	6831      	ldr	r1, [r6, #0]
 800b9ea:	061f      	lsls	r7, r3, #24
 800b9ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9f0:	d402      	bmi.n	800b9f8 <_printf_i+0x188>
 800b9f2:	065f      	lsls	r7, r3, #25
 800b9f4:	bf48      	it	mi
 800b9f6:	b2ad      	uxthmi	r5, r5
 800b9f8:	6031      	str	r1, [r6, #0]
 800b9fa:	07d9      	lsls	r1, r3, #31
 800b9fc:	bf44      	itt	mi
 800b9fe:	f043 0320 	orrmi.w	r3, r3, #32
 800ba02:	6023      	strmi	r3, [r4, #0]
 800ba04:	b11d      	cbz	r5, 800ba0e <_printf_i+0x19e>
 800ba06:	2310      	movs	r3, #16
 800ba08:	e7ac      	b.n	800b964 <_printf_i+0xf4>
 800ba0a:	4827      	ldr	r0, [pc, #156]	@ (800baa8 <_printf_i+0x238>)
 800ba0c:	e7e9      	b.n	800b9e2 <_printf_i+0x172>
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	f023 0320 	bic.w	r3, r3, #32
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	e7f6      	b.n	800ba06 <_printf_i+0x196>
 800ba18:	4616      	mov	r6, r2
 800ba1a:	e7bd      	b.n	800b998 <_printf_i+0x128>
 800ba1c:	6833      	ldr	r3, [r6, #0]
 800ba1e:	6825      	ldr	r5, [r4, #0]
 800ba20:	6961      	ldr	r1, [r4, #20]
 800ba22:	1d18      	adds	r0, r3, #4
 800ba24:	6030      	str	r0, [r6, #0]
 800ba26:	062e      	lsls	r6, r5, #24
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	d501      	bpl.n	800ba30 <_printf_i+0x1c0>
 800ba2c:	6019      	str	r1, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <_printf_i+0x1c6>
 800ba30:	0668      	lsls	r0, r5, #25
 800ba32:	d5fb      	bpl.n	800ba2c <_printf_i+0x1bc>
 800ba34:	8019      	strh	r1, [r3, #0]
 800ba36:	2300      	movs	r3, #0
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	4616      	mov	r6, r2
 800ba3c:	e7bc      	b.n	800b9b8 <_printf_i+0x148>
 800ba3e:	6833      	ldr	r3, [r6, #0]
 800ba40:	1d1a      	adds	r2, r3, #4
 800ba42:	6032      	str	r2, [r6, #0]
 800ba44:	681e      	ldr	r6, [r3, #0]
 800ba46:	6862      	ldr	r2, [r4, #4]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7f4 fbc8 	bl	80001e0 <memchr>
 800ba50:	b108      	cbz	r0, 800ba56 <_printf_i+0x1e6>
 800ba52:	1b80      	subs	r0, r0, r6
 800ba54:	6060      	str	r0, [r4, #4]
 800ba56:	6863      	ldr	r3, [r4, #4]
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba60:	e7aa      	b.n	800b9b8 <_printf_i+0x148>
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	4632      	mov	r2, r6
 800ba66:	4649      	mov	r1, r9
 800ba68:	4640      	mov	r0, r8
 800ba6a:	47d0      	blx	sl
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d0ad      	beq.n	800b9cc <_printf_i+0x15c>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	079b      	lsls	r3, r3, #30
 800ba74:	d413      	bmi.n	800ba9e <_printf_i+0x22e>
 800ba76:	68e0      	ldr	r0, [r4, #12]
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	4298      	cmp	r0, r3
 800ba7c:	bfb8      	it	lt
 800ba7e:	4618      	movlt	r0, r3
 800ba80:	e7a6      	b.n	800b9d0 <_printf_i+0x160>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	47d0      	blx	sl
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d09d      	beq.n	800b9cc <_printf_i+0x15c>
 800ba90:	3501      	adds	r5, #1
 800ba92:	68e3      	ldr	r3, [r4, #12]
 800ba94:	9903      	ldr	r1, [sp, #12]
 800ba96:	1a5b      	subs	r3, r3, r1
 800ba98:	42ab      	cmp	r3, r5
 800ba9a:	dcf2      	bgt.n	800ba82 <_printf_i+0x212>
 800ba9c:	e7eb      	b.n	800ba76 <_printf_i+0x206>
 800ba9e:	2500      	movs	r5, #0
 800baa0:	f104 0619 	add.w	r6, r4, #25
 800baa4:	e7f5      	b.n	800ba92 <_printf_i+0x222>
 800baa6:	bf00      	nop
 800baa8:	0800e05a 	.word	0x0800e05a
 800baac:	0800e06b 	.word	0x0800e06b

0800bab0 <siprintf>:
 800bab0:	b40e      	push	{r1, r2, r3}
 800bab2:	b500      	push	{lr}
 800bab4:	b09c      	sub	sp, #112	@ 0x70
 800bab6:	ab1d      	add	r3, sp, #116	@ 0x74
 800bab8:	9002      	str	r0, [sp, #8]
 800baba:	9006      	str	r0, [sp, #24]
 800babc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bac0:	4809      	ldr	r0, [pc, #36]	@ (800bae8 <siprintf+0x38>)
 800bac2:	9107      	str	r1, [sp, #28]
 800bac4:	9104      	str	r1, [sp, #16]
 800bac6:	4909      	ldr	r1, [pc, #36]	@ (800baec <siprintf+0x3c>)
 800bac8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bacc:	9105      	str	r1, [sp, #20]
 800bace:	6800      	ldr	r0, [r0, #0]
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	a902      	add	r1, sp, #8
 800bad4:	f000 ffb0 	bl	800ca38 <_svfiprintf_r>
 800bad8:	9b02      	ldr	r3, [sp, #8]
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	b01c      	add	sp, #112	@ 0x70
 800bae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bae4:	b003      	add	sp, #12
 800bae6:	4770      	bx	lr
 800bae8:	20000108 	.word	0x20000108
 800baec:	ffff0208 	.word	0xffff0208

0800baf0 <std>:
 800baf0:	2300      	movs	r3, #0
 800baf2:	b510      	push	{r4, lr}
 800baf4:	4604      	mov	r4, r0
 800baf6:	e9c0 3300 	strd	r3, r3, [r0]
 800bafa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bafe:	6083      	str	r3, [r0, #8]
 800bb00:	8181      	strh	r1, [r0, #12]
 800bb02:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb04:	81c2      	strh	r2, [r0, #14]
 800bb06:	6183      	str	r3, [r0, #24]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	305c      	adds	r0, #92	@ 0x5c
 800bb0e:	f000 f8b1 	bl	800bc74 <memset>
 800bb12:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <std+0x58>)
 800bb14:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb16:	4b0d      	ldr	r3, [pc, #52]	@ (800bb4c <std+0x5c>)
 800bb18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb50 <std+0x60>)
 800bb1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <std+0x64>)
 800bb20:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <std+0x68>)
 800bb24:	6224      	str	r4, [r4, #32]
 800bb26:	429c      	cmp	r4, r3
 800bb28:	d006      	beq.n	800bb38 <std+0x48>
 800bb2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb2e:	4294      	cmp	r4, r2
 800bb30:	d002      	beq.n	800bb38 <std+0x48>
 800bb32:	33d0      	adds	r3, #208	@ 0xd0
 800bb34:	429c      	cmp	r4, r3
 800bb36:	d105      	bne.n	800bb44 <std+0x54>
 800bb38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb40:	f000 b8ce 	b.w	800bce0 <__retarget_lock_init_recursive>
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	bf00      	nop
 800bb48:	0800d5f9 	.word	0x0800d5f9
 800bb4c:	0800d61b 	.word	0x0800d61b
 800bb50:	0800d653 	.word	0x0800d653
 800bb54:	0800d677 	.word	0x0800d677
 800bb58:	20001a1c 	.word	0x20001a1c

0800bb5c <stdio_exit_handler>:
 800bb5c:	4a02      	ldr	r2, [pc, #8]	@ (800bb68 <stdio_exit_handler+0xc>)
 800bb5e:	4903      	ldr	r1, [pc, #12]	@ (800bb6c <stdio_exit_handler+0x10>)
 800bb60:	4803      	ldr	r0, [pc, #12]	@ (800bb70 <stdio_exit_handler+0x14>)
 800bb62:	f000 b869 	b.w	800bc38 <_fwalk_sglue>
 800bb66:	bf00      	nop
 800bb68:	200000fc 	.word	0x200000fc
 800bb6c:	0800ce8d 	.word	0x0800ce8d
 800bb70:	2000010c 	.word	0x2000010c

0800bb74 <cleanup_stdio>:
 800bb74:	6841      	ldr	r1, [r0, #4]
 800bb76:	4b0c      	ldr	r3, [pc, #48]	@ (800bba8 <cleanup_stdio+0x34>)
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	b510      	push	{r4, lr}
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	d001      	beq.n	800bb84 <cleanup_stdio+0x10>
 800bb80:	f001 f984 	bl	800ce8c <_fflush_r>
 800bb84:	68a1      	ldr	r1, [r4, #8]
 800bb86:	4b09      	ldr	r3, [pc, #36]	@ (800bbac <cleanup_stdio+0x38>)
 800bb88:	4299      	cmp	r1, r3
 800bb8a:	d002      	beq.n	800bb92 <cleanup_stdio+0x1e>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f001 f97d 	bl	800ce8c <_fflush_r>
 800bb92:	68e1      	ldr	r1, [r4, #12]
 800bb94:	4b06      	ldr	r3, [pc, #24]	@ (800bbb0 <cleanup_stdio+0x3c>)
 800bb96:	4299      	cmp	r1, r3
 800bb98:	d004      	beq.n	800bba4 <cleanup_stdio+0x30>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba0:	f001 b974 	b.w	800ce8c <_fflush_r>
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	bf00      	nop
 800bba8:	20001a1c 	.word	0x20001a1c
 800bbac:	20001a84 	.word	0x20001a84
 800bbb0:	20001aec 	.word	0x20001aec

0800bbb4 <global_stdio_init.part.0>:
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe4 <global_stdio_init.part.0+0x30>)
 800bbb8:	4c0b      	ldr	r4, [pc, #44]	@ (800bbe8 <global_stdio_init.part.0+0x34>)
 800bbba:	4a0c      	ldr	r2, [pc, #48]	@ (800bbec <global_stdio_init.part.0+0x38>)
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	2104      	movs	r1, #4
 800bbc4:	f7ff ff94 	bl	800baf0 <std>
 800bbc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbcc:	2201      	movs	r2, #1
 800bbce:	2109      	movs	r1, #9
 800bbd0:	f7ff ff8e 	bl	800baf0 <std>
 800bbd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbd8:	2202      	movs	r2, #2
 800bbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbde:	2112      	movs	r1, #18
 800bbe0:	f7ff bf86 	b.w	800baf0 <std>
 800bbe4:	20001b54 	.word	0x20001b54
 800bbe8:	20001a1c 	.word	0x20001a1c
 800bbec:	0800bb5d 	.word	0x0800bb5d

0800bbf0 <__sfp_lock_acquire>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	@ (800bbf8 <__sfp_lock_acquire+0x8>)
 800bbf2:	f000 b876 	b.w	800bce2 <__retarget_lock_acquire_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	20001b59 	.word	0x20001b59

0800bbfc <__sfp_lock_release>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	@ (800bc04 <__sfp_lock_release+0x8>)
 800bbfe:	f000 b871 	b.w	800bce4 <__retarget_lock_release_recursive>
 800bc02:	bf00      	nop
 800bc04:	20001b59 	.word	0x20001b59

0800bc08 <__sinit>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	f7ff fff0 	bl	800bbf0 <__sfp_lock_acquire>
 800bc10:	6a23      	ldr	r3, [r4, #32]
 800bc12:	b11b      	cbz	r3, 800bc1c <__sinit+0x14>
 800bc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc18:	f7ff bff0 	b.w	800bbfc <__sfp_lock_release>
 800bc1c:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <__sinit+0x28>)
 800bc1e:	6223      	str	r3, [r4, #32]
 800bc20:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <__sinit+0x2c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1f5      	bne.n	800bc14 <__sinit+0xc>
 800bc28:	f7ff ffc4 	bl	800bbb4 <global_stdio_init.part.0>
 800bc2c:	e7f2      	b.n	800bc14 <__sinit+0xc>
 800bc2e:	bf00      	nop
 800bc30:	0800bb75 	.word	0x0800bb75
 800bc34:	20001b54 	.word	0x20001b54

0800bc38 <_fwalk_sglue>:
 800bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	4688      	mov	r8, r1
 800bc40:	4614      	mov	r4, r2
 800bc42:	2600      	movs	r6, #0
 800bc44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc48:	f1b9 0901 	subs.w	r9, r9, #1
 800bc4c:	d505      	bpl.n	800bc5a <_fwalk_sglue+0x22>
 800bc4e:	6824      	ldr	r4, [r4, #0]
 800bc50:	2c00      	cmp	r4, #0
 800bc52:	d1f7      	bne.n	800bc44 <_fwalk_sglue+0xc>
 800bc54:	4630      	mov	r0, r6
 800bc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d907      	bls.n	800bc70 <_fwalk_sglue+0x38>
 800bc60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc64:	3301      	adds	r3, #1
 800bc66:	d003      	beq.n	800bc70 <_fwalk_sglue+0x38>
 800bc68:	4629      	mov	r1, r5
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	47c0      	blx	r8
 800bc6e:	4306      	orrs	r6, r0
 800bc70:	3568      	adds	r5, #104	@ 0x68
 800bc72:	e7e9      	b.n	800bc48 <_fwalk_sglue+0x10>

0800bc74 <memset>:
 800bc74:	4402      	add	r2, r0
 800bc76:	4603      	mov	r3, r0
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d100      	bne.n	800bc7e <memset+0xa>
 800bc7c:	4770      	bx	lr
 800bc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc82:	e7f9      	b.n	800bc78 <memset+0x4>

0800bc84 <_localeconv_r>:
 800bc84:	4800      	ldr	r0, [pc, #0]	@ (800bc88 <_localeconv_r+0x4>)
 800bc86:	4770      	bx	lr
 800bc88:	20000248 	.word	0x20000248

0800bc8c <__errno>:
 800bc8c:	4b01      	ldr	r3, [pc, #4]	@ (800bc94 <__errno+0x8>)
 800bc8e:	6818      	ldr	r0, [r3, #0]
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	20000108 	.word	0x20000108

0800bc98 <__libc_init_array>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	4d0d      	ldr	r5, [pc, #52]	@ (800bcd0 <__libc_init_array+0x38>)
 800bc9c:	4c0d      	ldr	r4, [pc, #52]	@ (800bcd4 <__libc_init_array+0x3c>)
 800bc9e:	1b64      	subs	r4, r4, r5
 800bca0:	10a4      	asrs	r4, r4, #2
 800bca2:	2600      	movs	r6, #0
 800bca4:	42a6      	cmp	r6, r4
 800bca6:	d109      	bne.n	800bcbc <__libc_init_array+0x24>
 800bca8:	4d0b      	ldr	r5, [pc, #44]	@ (800bcd8 <__libc_init_array+0x40>)
 800bcaa:	4c0c      	ldr	r4, [pc, #48]	@ (800bcdc <__libc_init_array+0x44>)
 800bcac:	f002 f92e 	bl	800df0c <_init>
 800bcb0:	1b64      	subs	r4, r4, r5
 800bcb2:	10a4      	asrs	r4, r4, #2
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	42a6      	cmp	r6, r4
 800bcb8:	d105      	bne.n	800bcc6 <__libc_init_array+0x2e>
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc0:	4798      	blx	r3
 800bcc2:	3601      	adds	r6, #1
 800bcc4:	e7ee      	b.n	800bca4 <__libc_init_array+0xc>
 800bcc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcca:	4798      	blx	r3
 800bccc:	3601      	adds	r6, #1
 800bcce:	e7f2      	b.n	800bcb6 <__libc_init_array+0x1e>
 800bcd0:	0800e3c8 	.word	0x0800e3c8
 800bcd4:	0800e3c8 	.word	0x0800e3c8
 800bcd8:	0800e3c8 	.word	0x0800e3c8
 800bcdc:	0800e3cc 	.word	0x0800e3cc

0800bce0 <__retarget_lock_init_recursive>:
 800bce0:	4770      	bx	lr

0800bce2 <__retarget_lock_acquire_recursive>:
 800bce2:	4770      	bx	lr

0800bce4 <__retarget_lock_release_recursive>:
 800bce4:	4770      	bx	lr

0800bce6 <quorem>:
 800bce6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	6903      	ldr	r3, [r0, #16]
 800bcec:	690c      	ldr	r4, [r1, #16]
 800bcee:	42a3      	cmp	r3, r4
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	db7e      	blt.n	800bdf2 <quorem+0x10c>
 800bcf4:	3c01      	subs	r4, #1
 800bcf6:	f101 0814 	add.w	r8, r1, #20
 800bcfa:	00a3      	lsls	r3, r4, #2
 800bcfc:	f100 0514 	add.w	r5, r0, #20
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd10:	3301      	adds	r3, #1
 800bd12:	429a      	cmp	r2, r3
 800bd14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd18:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd1c:	d32e      	bcc.n	800bd7c <quorem+0x96>
 800bd1e:	f04f 0a00 	mov.w	sl, #0
 800bd22:	46c4      	mov	ip, r8
 800bd24:	46ae      	mov	lr, r5
 800bd26:	46d3      	mov	fp, sl
 800bd28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd2c:	b298      	uxth	r0, r3
 800bd2e:	fb06 a000 	mla	r0, r6, r0, sl
 800bd32:	0c02      	lsrs	r2, r0, #16
 800bd34:	0c1b      	lsrs	r3, r3, #16
 800bd36:	fb06 2303 	mla	r3, r6, r3, r2
 800bd3a:	f8de 2000 	ldr.w	r2, [lr]
 800bd3e:	b280      	uxth	r0, r0
 800bd40:	b292      	uxth	r2, r2
 800bd42:	1a12      	subs	r2, r2, r0
 800bd44:	445a      	add	r2, fp
 800bd46:	f8de 0000 	ldr.w	r0, [lr]
 800bd4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd58:	b292      	uxth	r2, r2
 800bd5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd5e:	45e1      	cmp	r9, ip
 800bd60:	f84e 2b04 	str.w	r2, [lr], #4
 800bd64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd68:	d2de      	bcs.n	800bd28 <quorem+0x42>
 800bd6a:	9b00      	ldr	r3, [sp, #0]
 800bd6c:	58eb      	ldr	r3, [r5, r3]
 800bd6e:	b92b      	cbnz	r3, 800bd7c <quorem+0x96>
 800bd70:	9b01      	ldr	r3, [sp, #4]
 800bd72:	3b04      	subs	r3, #4
 800bd74:	429d      	cmp	r5, r3
 800bd76:	461a      	mov	r2, r3
 800bd78:	d32f      	bcc.n	800bdda <quorem+0xf4>
 800bd7a:	613c      	str	r4, [r7, #16]
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f001 fb33 	bl	800d3e8 <__mcmp>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	db25      	blt.n	800bdd2 <quorem+0xec>
 800bd86:	4629      	mov	r1, r5
 800bd88:	2000      	movs	r0, #0
 800bd8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd8e:	f8d1 c000 	ldr.w	ip, [r1]
 800bd92:	fa1f fe82 	uxth.w	lr, r2
 800bd96:	fa1f f38c 	uxth.w	r3, ip
 800bd9a:	eba3 030e 	sub.w	r3, r3, lr
 800bd9e:	4403      	add	r3, r0
 800bda0:	0c12      	lsrs	r2, r2, #16
 800bda2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bda6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdb0:	45c1      	cmp	r9, r8
 800bdb2:	f841 3b04 	str.w	r3, [r1], #4
 800bdb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bdba:	d2e6      	bcs.n	800bd8a <quorem+0xa4>
 800bdbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdc4:	b922      	cbnz	r2, 800bdd0 <quorem+0xea>
 800bdc6:	3b04      	subs	r3, #4
 800bdc8:	429d      	cmp	r5, r3
 800bdca:	461a      	mov	r2, r3
 800bdcc:	d30b      	bcc.n	800bde6 <quorem+0x100>
 800bdce:	613c      	str	r4, [r7, #16]
 800bdd0:	3601      	adds	r6, #1
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	b003      	add	sp, #12
 800bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	3b04      	subs	r3, #4
 800bdde:	2a00      	cmp	r2, #0
 800bde0:	d1cb      	bne.n	800bd7a <quorem+0x94>
 800bde2:	3c01      	subs	r4, #1
 800bde4:	e7c6      	b.n	800bd74 <quorem+0x8e>
 800bde6:	6812      	ldr	r2, [r2, #0]
 800bde8:	3b04      	subs	r3, #4
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	d1ef      	bne.n	800bdce <quorem+0xe8>
 800bdee:	3c01      	subs	r4, #1
 800bdf0:	e7ea      	b.n	800bdc8 <quorem+0xe2>
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	e7ee      	b.n	800bdd4 <quorem+0xee>
	...

0800bdf8 <_dtoa_r>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	69c7      	ldr	r7, [r0, #28]
 800bdfe:	b099      	sub	sp, #100	@ 0x64
 800be00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be04:	ec55 4b10 	vmov	r4, r5, d0
 800be08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800be0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800be0c:	4683      	mov	fp, r0
 800be0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800be10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be12:	b97f      	cbnz	r7, 800be34 <_dtoa_r+0x3c>
 800be14:	2010      	movs	r0, #16
 800be16:	f000 ff0b 	bl	800cc30 <malloc>
 800be1a:	4602      	mov	r2, r0
 800be1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800be20:	b920      	cbnz	r0, 800be2c <_dtoa_r+0x34>
 800be22:	4ba7      	ldr	r3, [pc, #668]	@ (800c0c0 <_dtoa_r+0x2c8>)
 800be24:	21ef      	movs	r1, #239	@ 0xef
 800be26:	48a7      	ldr	r0, [pc, #668]	@ (800c0c4 <_dtoa_r+0x2cc>)
 800be28:	f001 fcd6 	bl	800d7d8 <__assert_func>
 800be2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be30:	6007      	str	r7, [r0, #0]
 800be32:	60c7      	str	r7, [r0, #12]
 800be34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	b159      	cbz	r1, 800be54 <_dtoa_r+0x5c>
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	604a      	str	r2, [r1, #4]
 800be40:	2301      	movs	r3, #1
 800be42:	4093      	lsls	r3, r2
 800be44:	608b      	str	r3, [r1, #8]
 800be46:	4658      	mov	r0, fp
 800be48:	f001 f894 	bl	800cf74 <_Bfree>
 800be4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be50:	2200      	movs	r2, #0
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	1e2b      	subs	r3, r5, #0
 800be56:	bfb9      	ittee	lt
 800be58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be5c:	9303      	strlt	r3, [sp, #12]
 800be5e:	2300      	movge	r3, #0
 800be60:	6033      	strge	r3, [r6, #0]
 800be62:	9f03      	ldr	r7, [sp, #12]
 800be64:	4b98      	ldr	r3, [pc, #608]	@ (800c0c8 <_dtoa_r+0x2d0>)
 800be66:	bfbc      	itt	lt
 800be68:	2201      	movlt	r2, #1
 800be6a:	6032      	strlt	r2, [r6, #0]
 800be6c:	43bb      	bics	r3, r7
 800be6e:	d112      	bne.n	800be96 <_dtoa_r+0x9e>
 800be70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be7c:	4323      	orrs	r3, r4
 800be7e:	f000 854d 	beq.w	800c91c <_dtoa_r+0xb24>
 800be82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c0dc <_dtoa_r+0x2e4>
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 854f 	beq.w	800c92c <_dtoa_r+0xb34>
 800be8e:	f10a 0303 	add.w	r3, sl, #3
 800be92:	f000 bd49 	b.w	800c928 <_dtoa_r+0xb30>
 800be96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be9a:	2200      	movs	r2, #0
 800be9c:	ec51 0b17 	vmov	r0, r1, d7
 800bea0:	2300      	movs	r3, #0
 800bea2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bea6:	f7f4 fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 800beaa:	4680      	mov	r8, r0
 800beac:	b158      	cbz	r0, 800bec6 <_dtoa_r+0xce>
 800beae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800beb0:	2301      	movs	r3, #1
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800beb6:	b113      	cbz	r3, 800bebe <_dtoa_r+0xc6>
 800beb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800beba:	4b84      	ldr	r3, [pc, #528]	@ (800c0cc <_dtoa_r+0x2d4>)
 800bebc:	6013      	str	r3, [r2, #0]
 800bebe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c0e0 <_dtoa_r+0x2e8>
 800bec2:	f000 bd33 	b.w	800c92c <_dtoa_r+0xb34>
 800bec6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800beca:	aa16      	add	r2, sp, #88	@ 0x58
 800becc:	a917      	add	r1, sp, #92	@ 0x5c
 800bece:	4658      	mov	r0, fp
 800bed0:	f001 fb3a 	bl	800d548 <__d2b>
 800bed4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bed8:	4681      	mov	r9, r0
 800beda:	2e00      	cmp	r6, #0
 800bedc:	d077      	beq.n	800bfce <_dtoa_r+0x1d6>
 800bede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bee0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bef0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bef4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bef8:	4619      	mov	r1, r3
 800befa:	2200      	movs	r2, #0
 800befc:	4b74      	ldr	r3, [pc, #464]	@ (800c0d0 <_dtoa_r+0x2d8>)
 800befe:	f7f4 f9cb 	bl	8000298 <__aeabi_dsub>
 800bf02:	a369      	add	r3, pc, #420	@ (adr r3, 800c0a8 <_dtoa_r+0x2b0>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 fb7e 	bl	8000608 <__aeabi_dmul>
 800bf0c:	a368      	add	r3, pc, #416	@ (adr r3, 800c0b0 <_dtoa_r+0x2b8>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 f9c3 	bl	800029c <__adddf3>
 800bf16:	4604      	mov	r4, r0
 800bf18:	4630      	mov	r0, r6
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	f7f4 fb0a 	bl	8000534 <__aeabi_i2d>
 800bf20:	a365      	add	r3, pc, #404	@ (adr r3, 800c0b8 <_dtoa_r+0x2c0>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fb6f 	bl	8000608 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f9b3 	bl	800029c <__adddf3>
 800bf36:	4604      	mov	r4, r0
 800bf38:	460d      	mov	r5, r1
 800bf3a:	f7f4 fe15 	bl	8000b68 <__aeabi_d2iz>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4607      	mov	r7, r0
 800bf42:	2300      	movs	r3, #0
 800bf44:	4620      	mov	r0, r4
 800bf46:	4629      	mov	r1, r5
 800bf48:	f7f4 fdd0 	bl	8000aec <__aeabi_dcmplt>
 800bf4c:	b140      	cbz	r0, 800bf60 <_dtoa_r+0x168>
 800bf4e:	4638      	mov	r0, r7
 800bf50:	f7f4 faf0 	bl	8000534 <__aeabi_i2d>
 800bf54:	4622      	mov	r2, r4
 800bf56:	462b      	mov	r3, r5
 800bf58:	f7f4 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf5c:	b900      	cbnz	r0, 800bf60 <_dtoa_r+0x168>
 800bf5e:	3f01      	subs	r7, #1
 800bf60:	2f16      	cmp	r7, #22
 800bf62:	d851      	bhi.n	800c008 <_dtoa_r+0x210>
 800bf64:	4b5b      	ldr	r3, [pc, #364]	@ (800c0d4 <_dtoa_r+0x2dc>)
 800bf66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf72:	f7f4 fdbb 	bl	8000aec <__aeabi_dcmplt>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d048      	beq.n	800c00c <_dtoa_r+0x214>
 800bf7a:	3f01      	subs	r7, #1
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf82:	1b9b      	subs	r3, r3, r6
 800bf84:	1e5a      	subs	r2, r3, #1
 800bf86:	bf44      	itt	mi
 800bf88:	f1c3 0801 	rsbmi	r8, r3, #1
 800bf8c:	2300      	movmi	r3, #0
 800bf8e:	9208      	str	r2, [sp, #32]
 800bf90:	bf54      	ite	pl
 800bf92:	f04f 0800 	movpl.w	r8, #0
 800bf96:	9308      	strmi	r3, [sp, #32]
 800bf98:	2f00      	cmp	r7, #0
 800bf9a:	db39      	blt.n	800c010 <_dtoa_r+0x218>
 800bf9c:	9b08      	ldr	r3, [sp, #32]
 800bf9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bfa0:	443b      	add	r3, r7
 800bfa2:	9308      	str	r3, [sp, #32]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfaa:	2b09      	cmp	r3, #9
 800bfac:	d864      	bhi.n	800c078 <_dtoa_r+0x280>
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	bfc4      	itt	gt
 800bfb2:	3b04      	subgt	r3, #4
 800bfb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bfb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb8:	f1a3 0302 	sub.w	r3, r3, #2
 800bfbc:	bfcc      	ite	gt
 800bfbe:	2400      	movgt	r4, #0
 800bfc0:	2401      	movle	r4, #1
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d863      	bhi.n	800c08e <_dtoa_r+0x296>
 800bfc6:	e8df f003 	tbb	[pc, r3]
 800bfca:	372a      	.short	0x372a
 800bfcc:	5535      	.short	0x5535
 800bfce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bfd2:	441e      	add	r6, r3
 800bfd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bfd8:	2b20      	cmp	r3, #32
 800bfda:	bfc1      	itttt	gt
 800bfdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bfe0:	409f      	lslgt	r7, r3
 800bfe2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bfe6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bfea:	bfd6      	itet	le
 800bfec:	f1c3 0320 	rsble	r3, r3, #32
 800bff0:	ea47 0003 	orrgt.w	r0, r7, r3
 800bff4:	fa04 f003 	lslle.w	r0, r4, r3
 800bff8:	f7f4 fa8c 	bl	8000514 <__aeabi_ui2d>
 800bffc:	2201      	movs	r2, #1
 800bffe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c002:	3e01      	subs	r6, #1
 800c004:	9214      	str	r2, [sp, #80]	@ 0x50
 800c006:	e777      	b.n	800bef8 <_dtoa_r+0x100>
 800c008:	2301      	movs	r3, #1
 800c00a:	e7b8      	b.n	800bf7e <_dtoa_r+0x186>
 800c00c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c00e:	e7b7      	b.n	800bf80 <_dtoa_r+0x188>
 800c010:	427b      	negs	r3, r7
 800c012:	930a      	str	r3, [sp, #40]	@ 0x28
 800c014:	2300      	movs	r3, #0
 800c016:	eba8 0807 	sub.w	r8, r8, r7
 800c01a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c01c:	e7c4      	b.n	800bfa8 <_dtoa_r+0x1b0>
 800c01e:	2300      	movs	r3, #0
 800c020:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c024:	2b00      	cmp	r3, #0
 800c026:	dc35      	bgt.n	800c094 <_dtoa_r+0x29c>
 800c028:	2301      	movs	r3, #1
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	9307      	str	r3, [sp, #28]
 800c02e:	461a      	mov	r2, r3
 800c030:	920e      	str	r2, [sp, #56]	@ 0x38
 800c032:	e00b      	b.n	800c04c <_dtoa_r+0x254>
 800c034:	2301      	movs	r3, #1
 800c036:	e7f3      	b.n	800c020 <_dtoa_r+0x228>
 800c038:	2300      	movs	r3, #0
 800c03a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c03e:	18fb      	adds	r3, r7, r3
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	2b01      	cmp	r3, #1
 800c046:	9307      	str	r3, [sp, #28]
 800c048:	bfb8      	it	lt
 800c04a:	2301      	movlt	r3, #1
 800c04c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c050:	2100      	movs	r1, #0
 800c052:	2204      	movs	r2, #4
 800c054:	f102 0514 	add.w	r5, r2, #20
 800c058:	429d      	cmp	r5, r3
 800c05a:	d91f      	bls.n	800c09c <_dtoa_r+0x2a4>
 800c05c:	6041      	str	r1, [r0, #4]
 800c05e:	4658      	mov	r0, fp
 800c060:	f000 ff48 	bl	800cef4 <_Balloc>
 800c064:	4682      	mov	sl, r0
 800c066:	2800      	cmp	r0, #0
 800c068:	d13c      	bne.n	800c0e4 <_dtoa_r+0x2ec>
 800c06a:	4b1b      	ldr	r3, [pc, #108]	@ (800c0d8 <_dtoa_r+0x2e0>)
 800c06c:	4602      	mov	r2, r0
 800c06e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c072:	e6d8      	b.n	800be26 <_dtoa_r+0x2e>
 800c074:	2301      	movs	r3, #1
 800c076:	e7e0      	b.n	800c03a <_dtoa_r+0x242>
 800c078:	2401      	movs	r4, #1
 800c07a:	2300      	movs	r3, #0
 800c07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	2200      	movs	r2, #0
 800c08a:	2312      	movs	r3, #18
 800c08c:	e7d0      	b.n	800c030 <_dtoa_r+0x238>
 800c08e:	2301      	movs	r3, #1
 800c090:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c092:	e7f5      	b.n	800c080 <_dtoa_r+0x288>
 800c094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	9307      	str	r3, [sp, #28]
 800c09a:	e7d7      	b.n	800c04c <_dtoa_r+0x254>
 800c09c:	3101      	adds	r1, #1
 800c09e:	0052      	lsls	r2, r2, #1
 800c0a0:	e7d8      	b.n	800c054 <_dtoa_r+0x25c>
 800c0a2:	bf00      	nop
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	636f4361 	.word	0x636f4361
 800c0ac:	3fd287a7 	.word	0x3fd287a7
 800c0b0:	8b60c8b3 	.word	0x8b60c8b3
 800c0b4:	3fc68a28 	.word	0x3fc68a28
 800c0b8:	509f79fb 	.word	0x509f79fb
 800c0bc:	3fd34413 	.word	0x3fd34413
 800c0c0:	0800e089 	.word	0x0800e089
 800c0c4:	0800e0a0 	.word	0x0800e0a0
 800c0c8:	7ff00000 	.word	0x7ff00000
 800c0cc:	0800e059 	.word	0x0800e059
 800c0d0:	3ff80000 	.word	0x3ff80000
 800c0d4:	0800e1a8 	.word	0x0800e1a8
 800c0d8:	0800e0f8 	.word	0x0800e0f8
 800c0dc:	0800e085 	.word	0x0800e085
 800c0e0:	0800e058 	.word	0x0800e058
 800c0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0e8:	6018      	str	r0, [r3, #0]
 800c0ea:	9b07      	ldr	r3, [sp, #28]
 800c0ec:	2b0e      	cmp	r3, #14
 800c0ee:	f200 80a4 	bhi.w	800c23a <_dtoa_r+0x442>
 800c0f2:	2c00      	cmp	r4, #0
 800c0f4:	f000 80a1 	beq.w	800c23a <_dtoa_r+0x442>
 800c0f8:	2f00      	cmp	r7, #0
 800c0fa:	dd33      	ble.n	800c164 <_dtoa_r+0x36c>
 800c0fc:	4bad      	ldr	r3, [pc, #692]	@ (800c3b4 <_dtoa_r+0x5bc>)
 800c0fe:	f007 020f 	and.w	r2, r7, #15
 800c102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c106:	ed93 7b00 	vldr	d7, [r3]
 800c10a:	05f8      	lsls	r0, r7, #23
 800c10c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c110:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c114:	d516      	bpl.n	800c144 <_dtoa_r+0x34c>
 800c116:	4ba8      	ldr	r3, [pc, #672]	@ (800c3b8 <_dtoa_r+0x5c0>)
 800c118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c11c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c120:	f7f4 fb9c 	bl	800085c <__aeabi_ddiv>
 800c124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c128:	f004 040f 	and.w	r4, r4, #15
 800c12c:	2603      	movs	r6, #3
 800c12e:	4da2      	ldr	r5, [pc, #648]	@ (800c3b8 <_dtoa_r+0x5c0>)
 800c130:	b954      	cbnz	r4, 800c148 <_dtoa_r+0x350>
 800c132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13a:	f7f4 fb8f 	bl	800085c <__aeabi_ddiv>
 800c13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c142:	e028      	b.n	800c196 <_dtoa_r+0x39e>
 800c144:	2602      	movs	r6, #2
 800c146:	e7f2      	b.n	800c12e <_dtoa_r+0x336>
 800c148:	07e1      	lsls	r1, r4, #31
 800c14a:	d508      	bpl.n	800c15e <_dtoa_r+0x366>
 800c14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c150:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c154:	f7f4 fa58 	bl	8000608 <__aeabi_dmul>
 800c158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c15c:	3601      	adds	r6, #1
 800c15e:	1064      	asrs	r4, r4, #1
 800c160:	3508      	adds	r5, #8
 800c162:	e7e5      	b.n	800c130 <_dtoa_r+0x338>
 800c164:	f000 80d2 	beq.w	800c30c <_dtoa_r+0x514>
 800c168:	427c      	negs	r4, r7
 800c16a:	4b92      	ldr	r3, [pc, #584]	@ (800c3b4 <_dtoa_r+0x5bc>)
 800c16c:	4d92      	ldr	r5, [pc, #584]	@ (800c3b8 <_dtoa_r+0x5c0>)
 800c16e:	f004 020f 	and.w	r2, r4, #15
 800c172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c17e:	f7f4 fa43 	bl	8000608 <__aeabi_dmul>
 800c182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c186:	1124      	asrs	r4, r4, #4
 800c188:	2300      	movs	r3, #0
 800c18a:	2602      	movs	r6, #2
 800c18c:	2c00      	cmp	r4, #0
 800c18e:	f040 80b2 	bne.w	800c2f6 <_dtoa_r+0x4fe>
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1d3      	bne.n	800c13e <_dtoa_r+0x346>
 800c196:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c198:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 80b7 	beq.w	800c310 <_dtoa_r+0x518>
 800c1a2:	4b86      	ldr	r3, [pc, #536]	@ (800c3bc <_dtoa_r+0x5c4>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 fc9f 	bl	8000aec <__aeabi_dcmplt>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f000 80ae 	beq.w	800c310 <_dtoa_r+0x518>
 800c1b4:	9b07      	ldr	r3, [sp, #28]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f000 80aa 	beq.w	800c310 <_dtoa_r+0x518>
 800c1bc:	9b00      	ldr	r3, [sp, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	dd37      	ble.n	800c232 <_dtoa_r+0x43a>
 800c1c2:	1e7b      	subs	r3, r7, #1
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4b7d      	ldr	r3, [pc, #500]	@ (800c3c0 <_dtoa_r+0x5c8>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	f7f4 fa1b 	bl	8000608 <__aeabi_dmul>
 800c1d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1d6:	9c00      	ldr	r4, [sp, #0]
 800c1d8:	3601      	adds	r6, #1
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f7f4 f9aa 	bl	8000534 <__aeabi_i2d>
 800c1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1e4:	f7f4 fa10 	bl	8000608 <__aeabi_dmul>
 800c1e8:	4b76      	ldr	r3, [pc, #472]	@ (800c3c4 <_dtoa_r+0x5cc>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f7f4 f856 	bl	800029c <__adddf3>
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c1f6:	2c00      	cmp	r4, #0
 800c1f8:	f040 808d 	bne.w	800c316 <_dtoa_r+0x51e>
 800c1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c200:	4b71      	ldr	r3, [pc, #452]	@ (800c3c8 <_dtoa_r+0x5d0>)
 800c202:	2200      	movs	r2, #0
 800c204:	f7f4 f848 	bl	8000298 <__aeabi_dsub>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c210:	462a      	mov	r2, r5
 800c212:	4633      	mov	r3, r6
 800c214:	f7f4 fc88 	bl	8000b28 <__aeabi_dcmpgt>
 800c218:	2800      	cmp	r0, #0
 800c21a:	f040 828b 	bne.w	800c734 <_dtoa_r+0x93c>
 800c21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c222:	462a      	mov	r2, r5
 800c224:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c228:	f7f4 fc60 	bl	8000aec <__aeabi_dcmplt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f040 8128 	bne.w	800c482 <_dtoa_r+0x68a>
 800c232:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c236:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c23a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f2c0 815a 	blt.w	800c4f6 <_dtoa_r+0x6fe>
 800c242:	2f0e      	cmp	r7, #14
 800c244:	f300 8157 	bgt.w	800c4f6 <_dtoa_r+0x6fe>
 800c248:	4b5a      	ldr	r3, [pc, #360]	@ (800c3b4 <_dtoa_r+0x5bc>)
 800c24a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c24e:	ed93 7b00 	vldr	d7, [r3]
 800c252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c254:	2b00      	cmp	r3, #0
 800c256:	ed8d 7b00 	vstr	d7, [sp]
 800c25a:	da03      	bge.n	800c264 <_dtoa_r+0x46c>
 800c25c:	9b07      	ldr	r3, [sp, #28]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f340 8101 	ble.w	800c466 <_dtoa_r+0x66e>
 800c264:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c268:	4656      	mov	r6, sl
 800c26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c26e:	4620      	mov	r0, r4
 800c270:	4629      	mov	r1, r5
 800c272:	f7f4 faf3 	bl	800085c <__aeabi_ddiv>
 800c276:	f7f4 fc77 	bl	8000b68 <__aeabi_d2iz>
 800c27a:	4680      	mov	r8, r0
 800c27c:	f7f4 f95a 	bl	8000534 <__aeabi_i2d>
 800c280:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c284:	f7f4 f9c0 	bl	8000608 <__aeabi_dmul>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4620      	mov	r0, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c294:	f7f4 f800 	bl	8000298 <__aeabi_dsub>
 800c298:	f806 4b01 	strb.w	r4, [r6], #1
 800c29c:	9d07      	ldr	r5, [sp, #28]
 800c29e:	eba6 040a 	sub.w	r4, r6, sl
 800c2a2:	42a5      	cmp	r5, r4
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	f040 8117 	bne.w	800c4da <_dtoa_r+0x6e2>
 800c2ac:	f7f3 fff6 	bl	800029c <__adddf3>
 800c2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	f7f4 fc36 	bl	8000b28 <__aeabi_dcmpgt>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f040 80f9 	bne.w	800c4b4 <_dtoa_r+0x6bc>
 800c2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	f7f4 fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2ce:	b118      	cbz	r0, 800c2d8 <_dtoa_r+0x4e0>
 800c2d0:	f018 0f01 	tst.w	r8, #1
 800c2d4:	f040 80ee 	bne.w	800c4b4 <_dtoa_r+0x6bc>
 800c2d8:	4649      	mov	r1, r9
 800c2da:	4658      	mov	r0, fp
 800c2dc:	f000 fe4a 	bl	800cf74 <_Bfree>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	7033      	strb	r3, [r6, #0]
 800c2e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c2e6:	3701      	adds	r7, #1
 800c2e8:	601f      	str	r7, [r3, #0]
 800c2ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 831d 	beq.w	800c92c <_dtoa_r+0xb34>
 800c2f2:	601e      	str	r6, [r3, #0]
 800c2f4:	e31a      	b.n	800c92c <_dtoa_r+0xb34>
 800c2f6:	07e2      	lsls	r2, r4, #31
 800c2f8:	d505      	bpl.n	800c306 <_dtoa_r+0x50e>
 800c2fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2fe:	f7f4 f983 	bl	8000608 <__aeabi_dmul>
 800c302:	3601      	adds	r6, #1
 800c304:	2301      	movs	r3, #1
 800c306:	1064      	asrs	r4, r4, #1
 800c308:	3508      	adds	r5, #8
 800c30a:	e73f      	b.n	800c18c <_dtoa_r+0x394>
 800c30c:	2602      	movs	r6, #2
 800c30e:	e742      	b.n	800c196 <_dtoa_r+0x39e>
 800c310:	9c07      	ldr	r4, [sp, #28]
 800c312:	9704      	str	r7, [sp, #16]
 800c314:	e761      	b.n	800c1da <_dtoa_r+0x3e2>
 800c316:	4b27      	ldr	r3, [pc, #156]	@ (800c3b4 <_dtoa_r+0x5bc>)
 800c318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c31e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c322:	4454      	add	r4, sl
 800c324:	2900      	cmp	r1, #0
 800c326:	d053      	beq.n	800c3d0 <_dtoa_r+0x5d8>
 800c328:	4928      	ldr	r1, [pc, #160]	@ (800c3cc <_dtoa_r+0x5d4>)
 800c32a:	2000      	movs	r0, #0
 800c32c:	f7f4 fa96 	bl	800085c <__aeabi_ddiv>
 800c330:	4633      	mov	r3, r6
 800c332:	462a      	mov	r2, r5
 800c334:	f7f3 ffb0 	bl	8000298 <__aeabi_dsub>
 800c338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c33c:	4656      	mov	r6, sl
 800c33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c342:	f7f4 fc11 	bl	8000b68 <__aeabi_d2iz>
 800c346:	4605      	mov	r5, r0
 800c348:	f7f4 f8f4 	bl	8000534 <__aeabi_i2d>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c354:	f7f3 ffa0 	bl	8000298 <__aeabi_dsub>
 800c358:	3530      	adds	r5, #48	@ 0x30
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c362:	f806 5b01 	strb.w	r5, [r6], #1
 800c366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c36a:	f7f4 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d171      	bne.n	800c456 <_dtoa_r+0x65e>
 800c372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c376:	4911      	ldr	r1, [pc, #68]	@ (800c3bc <_dtoa_r+0x5c4>)
 800c378:	2000      	movs	r0, #0
 800c37a:	f7f3 ff8d 	bl	8000298 <__aeabi_dsub>
 800c37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c382:	f7f4 fbb3 	bl	8000aec <__aeabi_dcmplt>
 800c386:	2800      	cmp	r0, #0
 800c388:	f040 8095 	bne.w	800c4b6 <_dtoa_r+0x6be>
 800c38c:	42a6      	cmp	r6, r4
 800c38e:	f43f af50 	beq.w	800c232 <_dtoa_r+0x43a>
 800c392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c396:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c0 <_dtoa_r+0x5c8>)
 800c398:	2200      	movs	r2, #0
 800c39a:	f7f4 f935 	bl	8000608 <__aeabi_dmul>
 800c39e:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <_dtoa_r+0x5c8>)
 800c3a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3aa:	f7f4 f92d 	bl	8000608 <__aeabi_dmul>
 800c3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b2:	e7c4      	b.n	800c33e <_dtoa_r+0x546>
 800c3b4:	0800e1a8 	.word	0x0800e1a8
 800c3b8:	0800e180 	.word	0x0800e180
 800c3bc:	3ff00000 	.word	0x3ff00000
 800c3c0:	40240000 	.word	0x40240000
 800c3c4:	401c0000 	.word	0x401c0000
 800c3c8:	40140000 	.word	0x40140000
 800c3cc:	3fe00000 	.word	0x3fe00000
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f7f4 f918 	bl	8000608 <__aeabi_dmul>
 800c3d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800c3de:	4656      	mov	r6, sl
 800c3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3e4:	f7f4 fbc0 	bl	8000b68 <__aeabi_d2iz>
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	f7f4 f8a3 	bl	8000534 <__aeabi_i2d>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3f6:	f7f3 ff4f 	bl	8000298 <__aeabi_dsub>
 800c3fa:	3530      	adds	r5, #48	@ 0x30
 800c3fc:	f806 5b01 	strb.w	r5, [r6], #1
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	42a6      	cmp	r6, r4
 800c406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c40a:	f04f 0200 	mov.w	r2, #0
 800c40e:	d124      	bne.n	800c45a <_dtoa_r+0x662>
 800c410:	4bac      	ldr	r3, [pc, #688]	@ (800c6c4 <_dtoa_r+0x8cc>)
 800c412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c416:	f7f3 ff41 	bl	800029c <__adddf3>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c422:	f7f4 fb81 	bl	8000b28 <__aeabi_dcmpgt>
 800c426:	2800      	cmp	r0, #0
 800c428:	d145      	bne.n	800c4b6 <_dtoa_r+0x6be>
 800c42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c42e:	49a5      	ldr	r1, [pc, #660]	@ (800c6c4 <_dtoa_r+0x8cc>)
 800c430:	2000      	movs	r0, #0
 800c432:	f7f3 ff31 	bl	8000298 <__aeabi_dsub>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c43e:	f7f4 fb55 	bl	8000aec <__aeabi_dcmplt>
 800c442:	2800      	cmp	r0, #0
 800c444:	f43f aef5 	beq.w	800c232 <_dtoa_r+0x43a>
 800c448:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c44a:	1e73      	subs	r3, r6, #1
 800c44c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c44e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c452:	2b30      	cmp	r3, #48	@ 0x30
 800c454:	d0f8      	beq.n	800c448 <_dtoa_r+0x650>
 800c456:	9f04      	ldr	r7, [sp, #16]
 800c458:	e73e      	b.n	800c2d8 <_dtoa_r+0x4e0>
 800c45a:	4b9b      	ldr	r3, [pc, #620]	@ (800c6c8 <_dtoa_r+0x8d0>)
 800c45c:	f7f4 f8d4 	bl	8000608 <__aeabi_dmul>
 800c460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c464:	e7bc      	b.n	800c3e0 <_dtoa_r+0x5e8>
 800c466:	d10c      	bne.n	800c482 <_dtoa_r+0x68a>
 800c468:	4b98      	ldr	r3, [pc, #608]	@ (800c6cc <_dtoa_r+0x8d4>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c470:	f7f4 f8ca 	bl	8000608 <__aeabi_dmul>
 800c474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c478:	f7f4 fb4c 	bl	8000b14 <__aeabi_dcmpge>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f000 8157 	beq.w	800c730 <_dtoa_r+0x938>
 800c482:	2400      	movs	r4, #0
 800c484:	4625      	mov	r5, r4
 800c486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c488:	43db      	mvns	r3, r3
 800c48a:	9304      	str	r3, [sp, #16]
 800c48c:	4656      	mov	r6, sl
 800c48e:	2700      	movs	r7, #0
 800c490:	4621      	mov	r1, r4
 800c492:	4658      	mov	r0, fp
 800c494:	f000 fd6e 	bl	800cf74 <_Bfree>
 800c498:	2d00      	cmp	r5, #0
 800c49a:	d0dc      	beq.n	800c456 <_dtoa_r+0x65e>
 800c49c:	b12f      	cbz	r7, 800c4aa <_dtoa_r+0x6b2>
 800c49e:	42af      	cmp	r7, r5
 800c4a0:	d003      	beq.n	800c4aa <_dtoa_r+0x6b2>
 800c4a2:	4639      	mov	r1, r7
 800c4a4:	4658      	mov	r0, fp
 800c4a6:	f000 fd65 	bl	800cf74 <_Bfree>
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	4658      	mov	r0, fp
 800c4ae:	f000 fd61 	bl	800cf74 <_Bfree>
 800c4b2:	e7d0      	b.n	800c456 <_dtoa_r+0x65e>
 800c4b4:	9704      	str	r7, [sp, #16]
 800c4b6:	4633      	mov	r3, r6
 800c4b8:	461e      	mov	r6, r3
 800c4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4be:	2a39      	cmp	r2, #57	@ 0x39
 800c4c0:	d107      	bne.n	800c4d2 <_dtoa_r+0x6da>
 800c4c2:	459a      	cmp	sl, r3
 800c4c4:	d1f8      	bne.n	800c4b8 <_dtoa_r+0x6c0>
 800c4c6:	9a04      	ldr	r2, [sp, #16]
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	9204      	str	r2, [sp, #16]
 800c4cc:	2230      	movs	r2, #48	@ 0x30
 800c4ce:	f88a 2000 	strb.w	r2, [sl]
 800c4d2:	781a      	ldrb	r2, [r3, #0]
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	e7bd      	b.n	800c456 <_dtoa_r+0x65e>
 800c4da:	4b7b      	ldr	r3, [pc, #492]	@ (800c6c8 <_dtoa_r+0x8d0>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f7f4 f893 	bl	8000608 <__aeabi_dmul>
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	f7f4 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	f43f aebb 	beq.w	800c26a <_dtoa_r+0x472>
 800c4f4:	e6f0      	b.n	800c2d8 <_dtoa_r+0x4e0>
 800c4f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	f000 80db 	beq.w	800c6b4 <_dtoa_r+0x8bc>
 800c4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c500:	2a01      	cmp	r2, #1
 800c502:	f300 80bf 	bgt.w	800c684 <_dtoa_r+0x88c>
 800c506:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c508:	2a00      	cmp	r2, #0
 800c50a:	f000 80b7 	beq.w	800c67c <_dtoa_r+0x884>
 800c50e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c512:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c514:	4646      	mov	r6, r8
 800c516:	9a08      	ldr	r2, [sp, #32]
 800c518:	2101      	movs	r1, #1
 800c51a:	441a      	add	r2, r3
 800c51c:	4658      	mov	r0, fp
 800c51e:	4498      	add	r8, r3
 800c520:	9208      	str	r2, [sp, #32]
 800c522:	f000 fddb 	bl	800d0dc <__i2b>
 800c526:	4605      	mov	r5, r0
 800c528:	b15e      	cbz	r6, 800c542 <_dtoa_r+0x74a>
 800c52a:	9b08      	ldr	r3, [sp, #32]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd08      	ble.n	800c542 <_dtoa_r+0x74a>
 800c530:	42b3      	cmp	r3, r6
 800c532:	9a08      	ldr	r2, [sp, #32]
 800c534:	bfa8      	it	ge
 800c536:	4633      	movge	r3, r6
 800c538:	eba8 0803 	sub.w	r8, r8, r3
 800c53c:	1af6      	subs	r6, r6, r3
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	9308      	str	r3, [sp, #32]
 800c542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c544:	b1f3      	cbz	r3, 800c584 <_dtoa_r+0x78c>
 800c546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 80b7 	beq.w	800c6bc <_dtoa_r+0x8c4>
 800c54e:	b18c      	cbz	r4, 800c574 <_dtoa_r+0x77c>
 800c550:	4629      	mov	r1, r5
 800c552:	4622      	mov	r2, r4
 800c554:	4658      	mov	r0, fp
 800c556:	f000 fe81 	bl	800d25c <__pow5mult>
 800c55a:	464a      	mov	r2, r9
 800c55c:	4601      	mov	r1, r0
 800c55e:	4605      	mov	r5, r0
 800c560:	4658      	mov	r0, fp
 800c562:	f000 fdd1 	bl	800d108 <__multiply>
 800c566:	4649      	mov	r1, r9
 800c568:	9004      	str	r0, [sp, #16]
 800c56a:	4658      	mov	r0, fp
 800c56c:	f000 fd02 	bl	800cf74 <_Bfree>
 800c570:	9b04      	ldr	r3, [sp, #16]
 800c572:	4699      	mov	r9, r3
 800c574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c576:	1b1a      	subs	r2, r3, r4
 800c578:	d004      	beq.n	800c584 <_dtoa_r+0x78c>
 800c57a:	4649      	mov	r1, r9
 800c57c:	4658      	mov	r0, fp
 800c57e:	f000 fe6d 	bl	800d25c <__pow5mult>
 800c582:	4681      	mov	r9, r0
 800c584:	2101      	movs	r1, #1
 800c586:	4658      	mov	r0, fp
 800c588:	f000 fda8 	bl	800d0dc <__i2b>
 800c58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c58e:	4604      	mov	r4, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 81cf 	beq.w	800c934 <_dtoa_r+0xb3c>
 800c596:	461a      	mov	r2, r3
 800c598:	4601      	mov	r1, r0
 800c59a:	4658      	mov	r0, fp
 800c59c:	f000 fe5e 	bl	800d25c <__pow5mult>
 800c5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	f300 8095 	bgt.w	800c6d4 <_dtoa_r+0x8dc>
 800c5aa:	9b02      	ldr	r3, [sp, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 8087 	bne.w	800c6c0 <_dtoa_r+0x8c8>
 800c5b2:	9b03      	ldr	r3, [sp, #12]
 800c5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f040 8089 	bne.w	800c6d0 <_dtoa_r+0x8d8>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5c4:	0d1b      	lsrs	r3, r3, #20
 800c5c6:	051b      	lsls	r3, r3, #20
 800c5c8:	b12b      	cbz	r3, 800c5d6 <_dtoa_r+0x7de>
 800c5ca:	9b08      	ldr	r3, [sp, #32]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	9308      	str	r3, [sp, #32]
 800c5d0:	f108 0801 	add.w	r8, r8, #1
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 81b0 	beq.w	800c940 <_dtoa_r+0xb48>
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5e6:	6918      	ldr	r0, [r3, #16]
 800c5e8:	f000 fd2c 	bl	800d044 <__hi0bits>
 800c5ec:	f1c0 0020 	rsb	r0, r0, #32
 800c5f0:	9b08      	ldr	r3, [sp, #32]
 800c5f2:	4418      	add	r0, r3
 800c5f4:	f010 001f 	ands.w	r0, r0, #31
 800c5f8:	d077      	beq.n	800c6ea <_dtoa_r+0x8f2>
 800c5fa:	f1c0 0320 	rsb	r3, r0, #32
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	dd6b      	ble.n	800c6da <_dtoa_r+0x8e2>
 800c602:	9b08      	ldr	r3, [sp, #32]
 800c604:	f1c0 001c 	rsb	r0, r0, #28
 800c608:	4403      	add	r3, r0
 800c60a:	4480      	add	r8, r0
 800c60c:	4406      	add	r6, r0
 800c60e:	9308      	str	r3, [sp, #32]
 800c610:	f1b8 0f00 	cmp.w	r8, #0
 800c614:	dd05      	ble.n	800c622 <_dtoa_r+0x82a>
 800c616:	4649      	mov	r1, r9
 800c618:	4642      	mov	r2, r8
 800c61a:	4658      	mov	r0, fp
 800c61c:	f000 fe78 	bl	800d310 <__lshift>
 800c620:	4681      	mov	r9, r0
 800c622:	9b08      	ldr	r3, [sp, #32]
 800c624:	2b00      	cmp	r3, #0
 800c626:	dd05      	ble.n	800c634 <_dtoa_r+0x83c>
 800c628:	4621      	mov	r1, r4
 800c62a:	461a      	mov	r2, r3
 800c62c:	4658      	mov	r0, fp
 800c62e:	f000 fe6f 	bl	800d310 <__lshift>
 800c632:	4604      	mov	r4, r0
 800c634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c636:	2b00      	cmp	r3, #0
 800c638:	d059      	beq.n	800c6ee <_dtoa_r+0x8f6>
 800c63a:	4621      	mov	r1, r4
 800c63c:	4648      	mov	r0, r9
 800c63e:	f000 fed3 	bl	800d3e8 <__mcmp>
 800c642:	2800      	cmp	r0, #0
 800c644:	da53      	bge.n	800c6ee <_dtoa_r+0x8f6>
 800c646:	1e7b      	subs	r3, r7, #1
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	4649      	mov	r1, r9
 800c64c:	2300      	movs	r3, #0
 800c64e:	220a      	movs	r2, #10
 800c650:	4658      	mov	r0, fp
 800c652:	f000 fcb1 	bl	800cfb8 <__multadd>
 800c656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c658:	4681      	mov	r9, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8172 	beq.w	800c944 <_dtoa_r+0xb4c>
 800c660:	2300      	movs	r3, #0
 800c662:	4629      	mov	r1, r5
 800c664:	220a      	movs	r2, #10
 800c666:	4658      	mov	r0, fp
 800c668:	f000 fca6 	bl	800cfb8 <__multadd>
 800c66c:	9b00      	ldr	r3, [sp, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	4605      	mov	r5, r0
 800c672:	dc67      	bgt.n	800c744 <_dtoa_r+0x94c>
 800c674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c676:	2b02      	cmp	r3, #2
 800c678:	dc41      	bgt.n	800c6fe <_dtoa_r+0x906>
 800c67a:	e063      	b.n	800c744 <_dtoa_r+0x94c>
 800c67c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c67e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c682:	e746      	b.n	800c512 <_dtoa_r+0x71a>
 800c684:	9b07      	ldr	r3, [sp, #28]
 800c686:	1e5c      	subs	r4, r3, #1
 800c688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	bfbf      	itttt	lt
 800c68e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c690:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c692:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c694:	1ae3      	sublt	r3, r4, r3
 800c696:	bfb4      	ite	lt
 800c698:	18d2      	addlt	r2, r2, r3
 800c69a:	1b1c      	subge	r4, r3, r4
 800c69c:	9b07      	ldr	r3, [sp, #28]
 800c69e:	bfbc      	itt	lt
 800c6a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c6a2:	2400      	movlt	r4, #0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfb5      	itete	lt
 800c6a8:	eba8 0603 	sublt.w	r6, r8, r3
 800c6ac:	9b07      	ldrge	r3, [sp, #28]
 800c6ae:	2300      	movlt	r3, #0
 800c6b0:	4646      	movge	r6, r8
 800c6b2:	e730      	b.n	800c516 <_dtoa_r+0x71e>
 800c6b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c6b8:	4646      	mov	r6, r8
 800c6ba:	e735      	b.n	800c528 <_dtoa_r+0x730>
 800c6bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6be:	e75c      	b.n	800c57a <_dtoa_r+0x782>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e788      	b.n	800c5d6 <_dtoa_r+0x7de>
 800c6c4:	3fe00000 	.word	0x3fe00000
 800c6c8:	40240000 	.word	0x40240000
 800c6cc:	40140000 	.word	0x40140000
 800c6d0:	9b02      	ldr	r3, [sp, #8]
 800c6d2:	e780      	b.n	800c5d6 <_dtoa_r+0x7de>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d8:	e782      	b.n	800c5e0 <_dtoa_r+0x7e8>
 800c6da:	d099      	beq.n	800c610 <_dtoa_r+0x818>
 800c6dc:	9a08      	ldr	r2, [sp, #32]
 800c6de:	331c      	adds	r3, #28
 800c6e0:	441a      	add	r2, r3
 800c6e2:	4498      	add	r8, r3
 800c6e4:	441e      	add	r6, r3
 800c6e6:	9208      	str	r2, [sp, #32]
 800c6e8:	e792      	b.n	800c610 <_dtoa_r+0x818>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	e7f6      	b.n	800c6dc <_dtoa_r+0x8e4>
 800c6ee:	9b07      	ldr	r3, [sp, #28]
 800c6f0:	9704      	str	r7, [sp, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	dc20      	bgt.n	800c738 <_dtoa_r+0x940>
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	dd1e      	ble.n	800c73c <_dtoa_r+0x944>
 800c6fe:	9b00      	ldr	r3, [sp, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f47f aec0 	bne.w	800c486 <_dtoa_r+0x68e>
 800c706:	4621      	mov	r1, r4
 800c708:	2205      	movs	r2, #5
 800c70a:	4658      	mov	r0, fp
 800c70c:	f000 fc54 	bl	800cfb8 <__multadd>
 800c710:	4601      	mov	r1, r0
 800c712:	4604      	mov	r4, r0
 800c714:	4648      	mov	r0, r9
 800c716:	f000 fe67 	bl	800d3e8 <__mcmp>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	f77f aeb3 	ble.w	800c486 <_dtoa_r+0x68e>
 800c720:	4656      	mov	r6, sl
 800c722:	2331      	movs	r3, #49	@ 0x31
 800c724:	f806 3b01 	strb.w	r3, [r6], #1
 800c728:	9b04      	ldr	r3, [sp, #16]
 800c72a:	3301      	adds	r3, #1
 800c72c:	9304      	str	r3, [sp, #16]
 800c72e:	e6ae      	b.n	800c48e <_dtoa_r+0x696>
 800c730:	9c07      	ldr	r4, [sp, #28]
 800c732:	9704      	str	r7, [sp, #16]
 800c734:	4625      	mov	r5, r4
 800c736:	e7f3      	b.n	800c720 <_dtoa_r+0x928>
 800c738:	9b07      	ldr	r3, [sp, #28]
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 8104 	beq.w	800c94c <_dtoa_r+0xb54>
 800c744:	2e00      	cmp	r6, #0
 800c746:	dd05      	ble.n	800c754 <_dtoa_r+0x95c>
 800c748:	4629      	mov	r1, r5
 800c74a:	4632      	mov	r2, r6
 800c74c:	4658      	mov	r0, fp
 800c74e:	f000 fddf 	bl	800d310 <__lshift>
 800c752:	4605      	mov	r5, r0
 800c754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c756:	2b00      	cmp	r3, #0
 800c758:	d05a      	beq.n	800c810 <_dtoa_r+0xa18>
 800c75a:	6869      	ldr	r1, [r5, #4]
 800c75c:	4658      	mov	r0, fp
 800c75e:	f000 fbc9 	bl	800cef4 <_Balloc>
 800c762:	4606      	mov	r6, r0
 800c764:	b928      	cbnz	r0, 800c772 <_dtoa_r+0x97a>
 800c766:	4b84      	ldr	r3, [pc, #528]	@ (800c978 <_dtoa_r+0xb80>)
 800c768:	4602      	mov	r2, r0
 800c76a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c76e:	f7ff bb5a 	b.w	800be26 <_dtoa_r+0x2e>
 800c772:	692a      	ldr	r2, [r5, #16]
 800c774:	3202      	adds	r2, #2
 800c776:	0092      	lsls	r2, r2, #2
 800c778:	f105 010c 	add.w	r1, r5, #12
 800c77c:	300c      	adds	r0, #12
 800c77e:	f001 f81d 	bl	800d7bc <memcpy>
 800c782:	2201      	movs	r2, #1
 800c784:	4631      	mov	r1, r6
 800c786:	4658      	mov	r0, fp
 800c788:	f000 fdc2 	bl	800d310 <__lshift>
 800c78c:	f10a 0301 	add.w	r3, sl, #1
 800c790:	9307      	str	r3, [sp, #28]
 800c792:	9b00      	ldr	r3, [sp, #0]
 800c794:	4453      	add	r3, sl
 800c796:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c798:	9b02      	ldr	r3, [sp, #8]
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	462f      	mov	r7, r5
 800c7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	9b07      	ldr	r3, [sp, #28]
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	4648      	mov	r0, r9
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	f7ff fa9a 	bl	800bce6 <quorem>
 800c7b2:	4639      	mov	r1, r7
 800c7b4:	9002      	str	r0, [sp, #8]
 800c7b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7ba:	4648      	mov	r0, r9
 800c7bc:	f000 fe14 	bl	800d3e8 <__mcmp>
 800c7c0:	462a      	mov	r2, r5
 800c7c2:	9008      	str	r0, [sp, #32]
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	f000 fe2a 	bl	800d420 <__mdiff>
 800c7cc:	68c2      	ldr	r2, [r0, #12]
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	bb02      	cbnz	r2, 800c814 <_dtoa_r+0xa1c>
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	f000 fe07 	bl	800d3e8 <__mcmp>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4658      	mov	r0, fp
 800c7e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7e2:	f000 fbc7 	bl	800cf74 <_Bfree>
 800c7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7ea:	9e07      	ldr	r6, [sp, #28]
 800c7ec:	ea43 0102 	orr.w	r1, r3, r2
 800c7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7f2:	4319      	orrs	r1, r3
 800c7f4:	d110      	bne.n	800c818 <_dtoa_r+0xa20>
 800c7f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7fa:	d029      	beq.n	800c850 <_dtoa_r+0xa58>
 800c7fc:	9b08      	ldr	r3, [sp, #32]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dd02      	ble.n	800c808 <_dtoa_r+0xa10>
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c808:	9b00      	ldr	r3, [sp, #0]
 800c80a:	f883 8000 	strb.w	r8, [r3]
 800c80e:	e63f      	b.n	800c490 <_dtoa_r+0x698>
 800c810:	4628      	mov	r0, r5
 800c812:	e7bb      	b.n	800c78c <_dtoa_r+0x994>
 800c814:	2201      	movs	r2, #1
 800c816:	e7e1      	b.n	800c7dc <_dtoa_r+0x9e4>
 800c818:	9b08      	ldr	r3, [sp, #32]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	db04      	blt.n	800c828 <_dtoa_r+0xa30>
 800c81e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c820:	430b      	orrs	r3, r1
 800c822:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c824:	430b      	orrs	r3, r1
 800c826:	d120      	bne.n	800c86a <_dtoa_r+0xa72>
 800c828:	2a00      	cmp	r2, #0
 800c82a:	dded      	ble.n	800c808 <_dtoa_r+0xa10>
 800c82c:	4649      	mov	r1, r9
 800c82e:	2201      	movs	r2, #1
 800c830:	4658      	mov	r0, fp
 800c832:	f000 fd6d 	bl	800d310 <__lshift>
 800c836:	4621      	mov	r1, r4
 800c838:	4681      	mov	r9, r0
 800c83a:	f000 fdd5 	bl	800d3e8 <__mcmp>
 800c83e:	2800      	cmp	r0, #0
 800c840:	dc03      	bgt.n	800c84a <_dtoa_r+0xa52>
 800c842:	d1e1      	bne.n	800c808 <_dtoa_r+0xa10>
 800c844:	f018 0f01 	tst.w	r8, #1
 800c848:	d0de      	beq.n	800c808 <_dtoa_r+0xa10>
 800c84a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c84e:	d1d8      	bne.n	800c802 <_dtoa_r+0xa0a>
 800c850:	9a00      	ldr	r2, [sp, #0]
 800c852:	2339      	movs	r3, #57	@ 0x39
 800c854:	7013      	strb	r3, [r2, #0]
 800c856:	4633      	mov	r3, r6
 800c858:	461e      	mov	r6, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c860:	2a39      	cmp	r2, #57	@ 0x39
 800c862:	d052      	beq.n	800c90a <_dtoa_r+0xb12>
 800c864:	3201      	adds	r2, #1
 800c866:	701a      	strb	r2, [r3, #0]
 800c868:	e612      	b.n	800c490 <_dtoa_r+0x698>
 800c86a:	2a00      	cmp	r2, #0
 800c86c:	dd07      	ble.n	800c87e <_dtoa_r+0xa86>
 800c86e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c872:	d0ed      	beq.n	800c850 <_dtoa_r+0xa58>
 800c874:	9a00      	ldr	r2, [sp, #0]
 800c876:	f108 0301 	add.w	r3, r8, #1
 800c87a:	7013      	strb	r3, [r2, #0]
 800c87c:	e608      	b.n	800c490 <_dtoa_r+0x698>
 800c87e:	9b07      	ldr	r3, [sp, #28]
 800c880:	9a07      	ldr	r2, [sp, #28]
 800c882:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c888:	4293      	cmp	r3, r2
 800c88a:	d028      	beq.n	800c8de <_dtoa_r+0xae6>
 800c88c:	4649      	mov	r1, r9
 800c88e:	2300      	movs	r3, #0
 800c890:	220a      	movs	r2, #10
 800c892:	4658      	mov	r0, fp
 800c894:	f000 fb90 	bl	800cfb8 <__multadd>
 800c898:	42af      	cmp	r7, r5
 800c89a:	4681      	mov	r9, r0
 800c89c:	f04f 0300 	mov.w	r3, #0
 800c8a0:	f04f 020a 	mov.w	r2, #10
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	4658      	mov	r0, fp
 800c8a8:	d107      	bne.n	800c8ba <_dtoa_r+0xac2>
 800c8aa:	f000 fb85 	bl	800cfb8 <__multadd>
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	9b07      	ldr	r3, [sp, #28]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	9307      	str	r3, [sp, #28]
 800c8b8:	e774      	b.n	800c7a4 <_dtoa_r+0x9ac>
 800c8ba:	f000 fb7d 	bl	800cfb8 <__multadd>
 800c8be:	4629      	mov	r1, r5
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	220a      	movs	r2, #10
 800c8c6:	4658      	mov	r0, fp
 800c8c8:	f000 fb76 	bl	800cfb8 <__multadd>
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	e7f0      	b.n	800c8b2 <_dtoa_r+0xaba>
 800c8d0:	9b00      	ldr	r3, [sp, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bfcc      	ite	gt
 800c8d6:	461e      	movgt	r6, r3
 800c8d8:	2601      	movle	r6, #1
 800c8da:	4456      	add	r6, sl
 800c8dc:	2700      	movs	r7, #0
 800c8de:	4649      	mov	r1, r9
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	4658      	mov	r0, fp
 800c8e4:	f000 fd14 	bl	800d310 <__lshift>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4681      	mov	r9, r0
 800c8ec:	f000 fd7c 	bl	800d3e8 <__mcmp>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dcb0      	bgt.n	800c856 <_dtoa_r+0xa5e>
 800c8f4:	d102      	bne.n	800c8fc <_dtoa_r+0xb04>
 800c8f6:	f018 0f01 	tst.w	r8, #1
 800c8fa:	d1ac      	bne.n	800c856 <_dtoa_r+0xa5e>
 800c8fc:	4633      	mov	r3, r6
 800c8fe:	461e      	mov	r6, r3
 800c900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c904:	2a30      	cmp	r2, #48	@ 0x30
 800c906:	d0fa      	beq.n	800c8fe <_dtoa_r+0xb06>
 800c908:	e5c2      	b.n	800c490 <_dtoa_r+0x698>
 800c90a:	459a      	cmp	sl, r3
 800c90c:	d1a4      	bne.n	800c858 <_dtoa_r+0xa60>
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	3301      	adds	r3, #1
 800c912:	9304      	str	r3, [sp, #16]
 800c914:	2331      	movs	r3, #49	@ 0x31
 800c916:	f88a 3000 	strb.w	r3, [sl]
 800c91a:	e5b9      	b.n	800c490 <_dtoa_r+0x698>
 800c91c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c91e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c97c <_dtoa_r+0xb84>
 800c922:	b11b      	cbz	r3, 800c92c <_dtoa_r+0xb34>
 800c924:	f10a 0308 	add.w	r3, sl, #8
 800c928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	4650      	mov	r0, sl
 800c92e:	b019      	add	sp, #100	@ 0x64
 800c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c936:	2b01      	cmp	r3, #1
 800c938:	f77f ae37 	ble.w	800c5aa <_dtoa_r+0x7b2>
 800c93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c93e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c940:	2001      	movs	r0, #1
 800c942:	e655      	b.n	800c5f0 <_dtoa_r+0x7f8>
 800c944:	9b00      	ldr	r3, [sp, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	f77f aed6 	ble.w	800c6f8 <_dtoa_r+0x900>
 800c94c:	4656      	mov	r6, sl
 800c94e:	4621      	mov	r1, r4
 800c950:	4648      	mov	r0, r9
 800c952:	f7ff f9c8 	bl	800bce6 <quorem>
 800c956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c95a:	f806 8b01 	strb.w	r8, [r6], #1
 800c95e:	9b00      	ldr	r3, [sp, #0]
 800c960:	eba6 020a 	sub.w	r2, r6, sl
 800c964:	4293      	cmp	r3, r2
 800c966:	ddb3      	ble.n	800c8d0 <_dtoa_r+0xad8>
 800c968:	4649      	mov	r1, r9
 800c96a:	2300      	movs	r3, #0
 800c96c:	220a      	movs	r2, #10
 800c96e:	4658      	mov	r0, fp
 800c970:	f000 fb22 	bl	800cfb8 <__multadd>
 800c974:	4681      	mov	r9, r0
 800c976:	e7ea      	b.n	800c94e <_dtoa_r+0xb56>
 800c978:	0800e0f8 	.word	0x0800e0f8
 800c97c:	0800e07c 	.word	0x0800e07c

0800c980 <__ssputs_r>:
 800c980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	688e      	ldr	r6, [r1, #8]
 800c986:	461f      	mov	r7, r3
 800c988:	42be      	cmp	r6, r7
 800c98a:	680b      	ldr	r3, [r1, #0]
 800c98c:	4682      	mov	sl, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	4690      	mov	r8, r2
 800c992:	d82d      	bhi.n	800c9f0 <__ssputs_r+0x70>
 800c994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c99c:	d026      	beq.n	800c9ec <__ssputs_r+0x6c>
 800c99e:	6965      	ldr	r5, [r4, #20]
 800c9a0:	6909      	ldr	r1, [r1, #16]
 800c9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9a6:	eba3 0901 	sub.w	r9, r3, r1
 800c9aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9ae:	1c7b      	adds	r3, r7, #1
 800c9b0:	444b      	add	r3, r9
 800c9b2:	106d      	asrs	r5, r5, #1
 800c9b4:	429d      	cmp	r5, r3
 800c9b6:	bf38      	it	cc
 800c9b8:	461d      	movcc	r5, r3
 800c9ba:	0553      	lsls	r3, r2, #21
 800c9bc:	d527      	bpl.n	800ca0e <__ssputs_r+0x8e>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	f000 f960 	bl	800cc84 <_malloc_r>
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	b360      	cbz	r0, 800ca22 <__ssputs_r+0xa2>
 800c9c8:	6921      	ldr	r1, [r4, #16]
 800c9ca:	464a      	mov	r2, r9
 800c9cc:	f000 fef6 	bl	800d7bc <memcpy>
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	6126      	str	r6, [r4, #16]
 800c9de:	6165      	str	r5, [r4, #20]
 800c9e0:	444e      	add	r6, r9
 800c9e2:	eba5 0509 	sub.w	r5, r5, r9
 800c9e6:	6026      	str	r6, [r4, #0]
 800c9e8:	60a5      	str	r5, [r4, #8]
 800c9ea:	463e      	mov	r6, r7
 800c9ec:	42be      	cmp	r6, r7
 800c9ee:	d900      	bls.n	800c9f2 <__ssputs_r+0x72>
 800c9f0:	463e      	mov	r6, r7
 800c9f2:	6820      	ldr	r0, [r4, #0]
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	4641      	mov	r1, r8
 800c9f8:	f000 fe6f 	bl	800d6da <memmove>
 800c9fc:	68a3      	ldr	r3, [r4, #8]
 800c9fe:	1b9b      	subs	r3, r3, r6
 800ca00:	60a3      	str	r3, [r4, #8]
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	4433      	add	r3, r6
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0e:	462a      	mov	r2, r5
 800ca10:	f000 fe35 	bl	800d67e <_realloc_r>
 800ca14:	4606      	mov	r6, r0
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d1e0      	bne.n	800c9dc <__ssputs_r+0x5c>
 800ca1a:	6921      	ldr	r1, [r4, #16]
 800ca1c:	4650      	mov	r0, sl
 800ca1e:	f000 ff0d 	bl	800d83c <_free_r>
 800ca22:	230c      	movs	r3, #12
 800ca24:	f8ca 3000 	str.w	r3, [sl]
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca34:	e7e9      	b.n	800ca0a <__ssputs_r+0x8a>
	...

0800ca38 <_svfiprintf_r>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	4698      	mov	r8, r3
 800ca3e:	898b      	ldrh	r3, [r1, #12]
 800ca40:	061b      	lsls	r3, r3, #24
 800ca42:	b09d      	sub	sp, #116	@ 0x74
 800ca44:	4607      	mov	r7, r0
 800ca46:	460d      	mov	r5, r1
 800ca48:	4614      	mov	r4, r2
 800ca4a:	d510      	bpl.n	800ca6e <_svfiprintf_r+0x36>
 800ca4c:	690b      	ldr	r3, [r1, #16]
 800ca4e:	b973      	cbnz	r3, 800ca6e <_svfiprintf_r+0x36>
 800ca50:	2140      	movs	r1, #64	@ 0x40
 800ca52:	f000 f917 	bl	800cc84 <_malloc_r>
 800ca56:	6028      	str	r0, [r5, #0]
 800ca58:	6128      	str	r0, [r5, #16]
 800ca5a:	b930      	cbnz	r0, 800ca6a <_svfiprintf_r+0x32>
 800ca5c:	230c      	movs	r3, #12
 800ca5e:	603b      	str	r3, [r7, #0]
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca64:	b01d      	add	sp, #116	@ 0x74
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	2340      	movs	r3, #64	@ 0x40
 800ca6c:	616b      	str	r3, [r5, #20]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca72:	2320      	movs	r3, #32
 800ca74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca7c:	2330      	movs	r3, #48	@ 0x30
 800ca7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cc1c <_svfiprintf_r+0x1e4>
 800ca82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca86:	f04f 0901 	mov.w	r9, #1
 800ca8a:	4623      	mov	r3, r4
 800ca8c:	469a      	mov	sl, r3
 800ca8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca92:	b10a      	cbz	r2, 800ca98 <_svfiprintf_r+0x60>
 800ca94:	2a25      	cmp	r2, #37	@ 0x25
 800ca96:	d1f9      	bne.n	800ca8c <_svfiprintf_r+0x54>
 800ca98:	ebba 0b04 	subs.w	fp, sl, r4
 800ca9c:	d00b      	beq.n	800cab6 <_svfiprintf_r+0x7e>
 800ca9e:	465b      	mov	r3, fp
 800caa0:	4622      	mov	r2, r4
 800caa2:	4629      	mov	r1, r5
 800caa4:	4638      	mov	r0, r7
 800caa6:	f7ff ff6b 	bl	800c980 <__ssputs_r>
 800caaa:	3001      	adds	r0, #1
 800caac:	f000 80a7 	beq.w	800cbfe <_svfiprintf_r+0x1c6>
 800cab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cab2:	445a      	add	r2, fp
 800cab4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cab6:	f89a 3000 	ldrb.w	r3, [sl]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f000 809f 	beq.w	800cbfe <_svfiprintf_r+0x1c6>
 800cac0:	2300      	movs	r3, #0
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caca:	f10a 0a01 	add.w	sl, sl, #1
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	9307      	str	r3, [sp, #28]
 800cad2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cad6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cad8:	4654      	mov	r4, sl
 800cada:	2205      	movs	r2, #5
 800cadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae0:	484e      	ldr	r0, [pc, #312]	@ (800cc1c <_svfiprintf_r+0x1e4>)
 800cae2:	f7f3 fb7d 	bl	80001e0 <memchr>
 800cae6:	9a04      	ldr	r2, [sp, #16]
 800cae8:	b9d8      	cbnz	r0, 800cb22 <_svfiprintf_r+0xea>
 800caea:	06d0      	lsls	r0, r2, #27
 800caec:	bf44      	itt	mi
 800caee:	2320      	movmi	r3, #32
 800caf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caf4:	0711      	lsls	r1, r2, #28
 800caf6:	bf44      	itt	mi
 800caf8:	232b      	movmi	r3, #43	@ 0x2b
 800cafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cafe:	f89a 3000 	ldrb.w	r3, [sl]
 800cb02:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb04:	d015      	beq.n	800cb32 <_svfiprintf_r+0xfa>
 800cb06:	9a07      	ldr	r2, [sp, #28]
 800cb08:	4654      	mov	r4, sl
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	f04f 0c0a 	mov.w	ip, #10
 800cb10:	4621      	mov	r1, r4
 800cb12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb16:	3b30      	subs	r3, #48	@ 0x30
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d94b      	bls.n	800cbb4 <_svfiprintf_r+0x17c>
 800cb1c:	b1b0      	cbz	r0, 800cb4c <_svfiprintf_r+0x114>
 800cb1e:	9207      	str	r2, [sp, #28]
 800cb20:	e014      	b.n	800cb4c <_svfiprintf_r+0x114>
 800cb22:	eba0 0308 	sub.w	r3, r0, r8
 800cb26:	fa09 f303 	lsl.w	r3, r9, r3
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	46a2      	mov	sl, r4
 800cb30:	e7d2      	b.n	800cad8 <_svfiprintf_r+0xa0>
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	1d19      	adds	r1, r3, #4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	9103      	str	r1, [sp, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bfbb      	ittet	lt
 800cb3e:	425b      	neglt	r3, r3
 800cb40:	f042 0202 	orrlt.w	r2, r2, #2
 800cb44:	9307      	strge	r3, [sp, #28]
 800cb46:	9307      	strlt	r3, [sp, #28]
 800cb48:	bfb8      	it	lt
 800cb4a:	9204      	strlt	r2, [sp, #16]
 800cb4c:	7823      	ldrb	r3, [r4, #0]
 800cb4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb50:	d10a      	bne.n	800cb68 <_svfiprintf_r+0x130>
 800cb52:	7863      	ldrb	r3, [r4, #1]
 800cb54:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb56:	d132      	bne.n	800cbbe <_svfiprintf_r+0x186>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	1d1a      	adds	r2, r3, #4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	9203      	str	r2, [sp, #12]
 800cb60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb64:	3402      	adds	r4, #2
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc2c <_svfiprintf_r+0x1f4>
 800cb6c:	7821      	ldrb	r1, [r4, #0]
 800cb6e:	2203      	movs	r2, #3
 800cb70:	4650      	mov	r0, sl
 800cb72:	f7f3 fb35 	bl	80001e0 <memchr>
 800cb76:	b138      	cbz	r0, 800cb88 <_svfiprintf_r+0x150>
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	eba0 000a 	sub.w	r0, r0, sl
 800cb7e:	2240      	movs	r2, #64	@ 0x40
 800cb80:	4082      	lsls	r2, r0
 800cb82:	4313      	orrs	r3, r2
 800cb84:	3401      	adds	r4, #1
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8c:	4824      	ldr	r0, [pc, #144]	@ (800cc20 <_svfiprintf_r+0x1e8>)
 800cb8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb92:	2206      	movs	r2, #6
 800cb94:	f7f3 fb24 	bl	80001e0 <memchr>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d036      	beq.n	800cc0a <_svfiprintf_r+0x1d2>
 800cb9c:	4b21      	ldr	r3, [pc, #132]	@ (800cc24 <_svfiprintf_r+0x1ec>)
 800cb9e:	bb1b      	cbnz	r3, 800cbe8 <_svfiprintf_r+0x1b0>
 800cba0:	9b03      	ldr	r3, [sp, #12]
 800cba2:	3307      	adds	r3, #7
 800cba4:	f023 0307 	bic.w	r3, r3, #7
 800cba8:	3308      	adds	r3, #8
 800cbaa:	9303      	str	r3, [sp, #12]
 800cbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbae:	4433      	add	r3, r6
 800cbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb2:	e76a      	b.n	800ca8a <_svfiprintf_r+0x52>
 800cbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbb8:	460c      	mov	r4, r1
 800cbba:	2001      	movs	r0, #1
 800cbbc:	e7a8      	b.n	800cb10 <_svfiprintf_r+0xd8>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	3401      	adds	r4, #1
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	f04f 0c0a 	mov.w	ip, #10
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd0:	3a30      	subs	r2, #48	@ 0x30
 800cbd2:	2a09      	cmp	r2, #9
 800cbd4:	d903      	bls.n	800cbde <_svfiprintf_r+0x1a6>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d0c6      	beq.n	800cb68 <_svfiprintf_r+0x130>
 800cbda:	9105      	str	r1, [sp, #20]
 800cbdc:	e7c4      	b.n	800cb68 <_svfiprintf_r+0x130>
 800cbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e7f0      	b.n	800cbca <_svfiprintf_r+0x192>
 800cbe8:	ab03      	add	r3, sp, #12
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	462a      	mov	r2, r5
 800cbee:	4b0e      	ldr	r3, [pc, #56]	@ (800cc28 <_svfiprintf_r+0x1f0>)
 800cbf0:	a904      	add	r1, sp, #16
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7fe fba4 	bl	800b340 <_printf_float>
 800cbf8:	1c42      	adds	r2, r0, #1
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	d1d6      	bne.n	800cbac <_svfiprintf_r+0x174>
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	065b      	lsls	r3, r3, #25
 800cc02:	f53f af2d 	bmi.w	800ca60 <_svfiprintf_r+0x28>
 800cc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc08:	e72c      	b.n	800ca64 <_svfiprintf_r+0x2c>
 800cc0a:	ab03      	add	r3, sp, #12
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	462a      	mov	r2, r5
 800cc10:	4b05      	ldr	r3, [pc, #20]	@ (800cc28 <_svfiprintf_r+0x1f0>)
 800cc12:	a904      	add	r1, sp, #16
 800cc14:	4638      	mov	r0, r7
 800cc16:	f7fe fe2b 	bl	800b870 <_printf_i>
 800cc1a:	e7ed      	b.n	800cbf8 <_svfiprintf_r+0x1c0>
 800cc1c:	0800e109 	.word	0x0800e109
 800cc20:	0800e113 	.word	0x0800e113
 800cc24:	0800b341 	.word	0x0800b341
 800cc28:	0800c981 	.word	0x0800c981
 800cc2c:	0800e10f 	.word	0x0800e10f

0800cc30 <malloc>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	@ (800cc3c <malloc+0xc>)
 800cc32:	4601      	mov	r1, r0
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	f000 b825 	b.w	800cc84 <_malloc_r>
 800cc3a:	bf00      	nop
 800cc3c:	20000108 	.word	0x20000108

0800cc40 <sbrk_aligned>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	4e0f      	ldr	r6, [pc, #60]	@ (800cc80 <sbrk_aligned+0x40>)
 800cc44:	460c      	mov	r4, r1
 800cc46:	6831      	ldr	r1, [r6, #0]
 800cc48:	4605      	mov	r5, r0
 800cc4a:	b911      	cbnz	r1, 800cc52 <sbrk_aligned+0x12>
 800cc4c:	f000 fd94 	bl	800d778 <_sbrk_r>
 800cc50:	6030      	str	r0, [r6, #0]
 800cc52:	4621      	mov	r1, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	f000 fd8f 	bl	800d778 <_sbrk_r>
 800cc5a:	1c43      	adds	r3, r0, #1
 800cc5c:	d103      	bne.n	800cc66 <sbrk_aligned+0x26>
 800cc5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cc62:	4620      	mov	r0, r4
 800cc64:	bd70      	pop	{r4, r5, r6, pc}
 800cc66:	1cc4      	adds	r4, r0, #3
 800cc68:	f024 0403 	bic.w	r4, r4, #3
 800cc6c:	42a0      	cmp	r0, r4
 800cc6e:	d0f8      	beq.n	800cc62 <sbrk_aligned+0x22>
 800cc70:	1a21      	subs	r1, r4, r0
 800cc72:	4628      	mov	r0, r5
 800cc74:	f000 fd80 	bl	800d778 <_sbrk_r>
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d1f2      	bne.n	800cc62 <sbrk_aligned+0x22>
 800cc7c:	e7ef      	b.n	800cc5e <sbrk_aligned+0x1e>
 800cc7e:	bf00      	nop
 800cc80:	20001b5c 	.word	0x20001b5c

0800cc84 <_malloc_r>:
 800cc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc88:	1ccd      	adds	r5, r1, #3
 800cc8a:	f025 0503 	bic.w	r5, r5, #3
 800cc8e:	3508      	adds	r5, #8
 800cc90:	2d0c      	cmp	r5, #12
 800cc92:	bf38      	it	cc
 800cc94:	250c      	movcc	r5, #12
 800cc96:	2d00      	cmp	r5, #0
 800cc98:	4606      	mov	r6, r0
 800cc9a:	db01      	blt.n	800cca0 <_malloc_r+0x1c>
 800cc9c:	42a9      	cmp	r1, r5
 800cc9e:	d904      	bls.n	800ccaa <_malloc_r+0x26>
 800cca0:	230c      	movs	r3, #12
 800cca2:	6033      	str	r3, [r6, #0]
 800cca4:	2000      	movs	r0, #0
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd80 <_malloc_r+0xfc>
 800ccae:	f000 f915 	bl	800cedc <__malloc_lock>
 800ccb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ccb6:	461c      	mov	r4, r3
 800ccb8:	bb44      	cbnz	r4, 800cd0c <_malloc_r+0x88>
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	f7ff ffbf 	bl	800cc40 <sbrk_aligned>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	d158      	bne.n	800cd7a <_malloc_r+0xf6>
 800ccc8:	f8d8 4000 	ldr.w	r4, [r8]
 800cccc:	4627      	mov	r7, r4
 800ccce:	2f00      	cmp	r7, #0
 800ccd0:	d143      	bne.n	800cd5a <_malloc_r+0xd6>
 800ccd2:	2c00      	cmp	r4, #0
 800ccd4:	d04b      	beq.n	800cd6e <_malloc_r+0xea>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	4639      	mov	r1, r7
 800ccda:	4630      	mov	r0, r6
 800ccdc:	eb04 0903 	add.w	r9, r4, r3
 800cce0:	f000 fd4a 	bl	800d778 <_sbrk_r>
 800cce4:	4581      	cmp	r9, r0
 800cce6:	d142      	bne.n	800cd6e <_malloc_r+0xea>
 800cce8:	6821      	ldr	r1, [r4, #0]
 800ccea:	1a6d      	subs	r5, r5, r1
 800ccec:	4629      	mov	r1, r5
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f7ff ffa6 	bl	800cc40 <sbrk_aligned>
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	d03a      	beq.n	800cd6e <_malloc_r+0xea>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	442b      	add	r3, r5
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	f8d8 3000 	ldr.w	r3, [r8]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	bb62      	cbnz	r2, 800cd60 <_malloc_r+0xdc>
 800cd06:	f8c8 7000 	str.w	r7, [r8]
 800cd0a:	e00f      	b.n	800cd2c <_malloc_r+0xa8>
 800cd0c:	6822      	ldr	r2, [r4, #0]
 800cd0e:	1b52      	subs	r2, r2, r5
 800cd10:	d420      	bmi.n	800cd54 <_malloc_r+0xd0>
 800cd12:	2a0b      	cmp	r2, #11
 800cd14:	d917      	bls.n	800cd46 <_malloc_r+0xc2>
 800cd16:	1961      	adds	r1, r4, r5
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	6025      	str	r5, [r4, #0]
 800cd1c:	bf18      	it	ne
 800cd1e:	6059      	strne	r1, [r3, #4]
 800cd20:	6863      	ldr	r3, [r4, #4]
 800cd22:	bf08      	it	eq
 800cd24:	f8c8 1000 	streq.w	r1, [r8]
 800cd28:	5162      	str	r2, [r4, r5]
 800cd2a:	604b      	str	r3, [r1, #4]
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f000 f8db 	bl	800cee8 <__malloc_unlock>
 800cd32:	f104 000b 	add.w	r0, r4, #11
 800cd36:	1d23      	adds	r3, r4, #4
 800cd38:	f020 0007 	bic.w	r0, r0, #7
 800cd3c:	1ac2      	subs	r2, r0, r3
 800cd3e:	bf1c      	itt	ne
 800cd40:	1a1b      	subne	r3, r3, r0
 800cd42:	50a3      	strne	r3, [r4, r2]
 800cd44:	e7af      	b.n	800cca6 <_malloc_r+0x22>
 800cd46:	6862      	ldr	r2, [r4, #4]
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	bf0c      	ite	eq
 800cd4c:	f8c8 2000 	streq.w	r2, [r8]
 800cd50:	605a      	strne	r2, [r3, #4]
 800cd52:	e7eb      	b.n	800cd2c <_malloc_r+0xa8>
 800cd54:	4623      	mov	r3, r4
 800cd56:	6864      	ldr	r4, [r4, #4]
 800cd58:	e7ae      	b.n	800ccb8 <_malloc_r+0x34>
 800cd5a:	463c      	mov	r4, r7
 800cd5c:	687f      	ldr	r7, [r7, #4]
 800cd5e:	e7b6      	b.n	800ccce <_malloc_r+0x4a>
 800cd60:	461a      	mov	r2, r3
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	d1fb      	bne.n	800cd60 <_malloc_r+0xdc>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	6053      	str	r3, [r2, #4]
 800cd6c:	e7de      	b.n	800cd2c <_malloc_r+0xa8>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	6033      	str	r3, [r6, #0]
 800cd72:	4630      	mov	r0, r6
 800cd74:	f000 f8b8 	bl	800cee8 <__malloc_unlock>
 800cd78:	e794      	b.n	800cca4 <_malloc_r+0x20>
 800cd7a:	6005      	str	r5, [r0, #0]
 800cd7c:	e7d6      	b.n	800cd2c <_malloc_r+0xa8>
 800cd7e:	bf00      	nop
 800cd80:	20001b60 	.word	0x20001b60

0800cd84 <__sflush_r>:
 800cd84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8c:	0716      	lsls	r6, r2, #28
 800cd8e:	4605      	mov	r5, r0
 800cd90:	460c      	mov	r4, r1
 800cd92:	d454      	bmi.n	800ce3e <__sflush_r+0xba>
 800cd94:	684b      	ldr	r3, [r1, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	dc02      	bgt.n	800cda0 <__sflush_r+0x1c>
 800cd9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd48      	ble.n	800ce32 <__sflush_r+0xae>
 800cda0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cda2:	2e00      	cmp	r6, #0
 800cda4:	d045      	beq.n	800ce32 <__sflush_r+0xae>
 800cda6:	2300      	movs	r3, #0
 800cda8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cdac:	682f      	ldr	r7, [r5, #0]
 800cdae:	6a21      	ldr	r1, [r4, #32]
 800cdb0:	602b      	str	r3, [r5, #0]
 800cdb2:	d030      	beq.n	800ce16 <__sflush_r+0x92>
 800cdb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	0759      	lsls	r1, r3, #29
 800cdba:	d505      	bpl.n	800cdc8 <__sflush_r+0x44>
 800cdbc:	6863      	ldr	r3, [r4, #4]
 800cdbe:	1ad2      	subs	r2, r2, r3
 800cdc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cdc2:	b10b      	cbz	r3, 800cdc8 <__sflush_r+0x44>
 800cdc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdc6:	1ad2      	subs	r2, r2, r3
 800cdc8:	2300      	movs	r3, #0
 800cdca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdcc:	6a21      	ldr	r1, [r4, #32]
 800cdce:	4628      	mov	r0, r5
 800cdd0:	47b0      	blx	r6
 800cdd2:	1c43      	adds	r3, r0, #1
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	d106      	bne.n	800cde6 <__sflush_r+0x62>
 800cdd8:	6829      	ldr	r1, [r5, #0]
 800cdda:	291d      	cmp	r1, #29
 800cddc:	d82b      	bhi.n	800ce36 <__sflush_r+0xb2>
 800cdde:	4a2a      	ldr	r2, [pc, #168]	@ (800ce88 <__sflush_r+0x104>)
 800cde0:	410a      	asrs	r2, r1
 800cde2:	07d6      	lsls	r6, r2, #31
 800cde4:	d427      	bmi.n	800ce36 <__sflush_r+0xb2>
 800cde6:	2200      	movs	r2, #0
 800cde8:	6062      	str	r2, [r4, #4]
 800cdea:	04d9      	lsls	r1, r3, #19
 800cdec:	6922      	ldr	r2, [r4, #16]
 800cdee:	6022      	str	r2, [r4, #0]
 800cdf0:	d504      	bpl.n	800cdfc <__sflush_r+0x78>
 800cdf2:	1c42      	adds	r2, r0, #1
 800cdf4:	d101      	bne.n	800cdfa <__sflush_r+0x76>
 800cdf6:	682b      	ldr	r3, [r5, #0]
 800cdf8:	b903      	cbnz	r3, 800cdfc <__sflush_r+0x78>
 800cdfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdfe:	602f      	str	r7, [r5, #0]
 800ce00:	b1b9      	cbz	r1, 800ce32 <__sflush_r+0xae>
 800ce02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce06:	4299      	cmp	r1, r3
 800ce08:	d002      	beq.n	800ce10 <__sflush_r+0x8c>
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f000 fd16 	bl	800d83c <_free_r>
 800ce10:	2300      	movs	r3, #0
 800ce12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce14:	e00d      	b.n	800ce32 <__sflush_r+0xae>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4628      	mov	r0, r5
 800ce1a:	47b0      	blx	r6
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	1c50      	adds	r0, r2, #1
 800ce20:	d1c9      	bne.n	800cdb6 <__sflush_r+0x32>
 800ce22:	682b      	ldr	r3, [r5, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0c6      	beq.n	800cdb6 <__sflush_r+0x32>
 800ce28:	2b1d      	cmp	r3, #29
 800ce2a:	d001      	beq.n	800ce30 <__sflush_r+0xac>
 800ce2c:	2b16      	cmp	r3, #22
 800ce2e:	d11e      	bne.n	800ce6e <__sflush_r+0xea>
 800ce30:	602f      	str	r7, [r5, #0]
 800ce32:	2000      	movs	r0, #0
 800ce34:	e022      	b.n	800ce7c <__sflush_r+0xf8>
 800ce36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce3a:	b21b      	sxth	r3, r3
 800ce3c:	e01b      	b.n	800ce76 <__sflush_r+0xf2>
 800ce3e:	690f      	ldr	r7, [r1, #16]
 800ce40:	2f00      	cmp	r7, #0
 800ce42:	d0f6      	beq.n	800ce32 <__sflush_r+0xae>
 800ce44:	0793      	lsls	r3, r2, #30
 800ce46:	680e      	ldr	r6, [r1, #0]
 800ce48:	bf08      	it	eq
 800ce4a:	694b      	ldreq	r3, [r1, #20]
 800ce4c:	600f      	str	r7, [r1, #0]
 800ce4e:	bf18      	it	ne
 800ce50:	2300      	movne	r3, #0
 800ce52:	eba6 0807 	sub.w	r8, r6, r7
 800ce56:	608b      	str	r3, [r1, #8]
 800ce58:	f1b8 0f00 	cmp.w	r8, #0
 800ce5c:	dde9      	ble.n	800ce32 <__sflush_r+0xae>
 800ce5e:	6a21      	ldr	r1, [r4, #32]
 800ce60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce62:	4643      	mov	r3, r8
 800ce64:	463a      	mov	r2, r7
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b0      	blx	r6
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	dc08      	bgt.n	800ce80 <__sflush_r+0xfc>
 800ce6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce76:	81a3      	strh	r3, [r4, #12]
 800ce78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce80:	4407      	add	r7, r0
 800ce82:	eba8 0800 	sub.w	r8, r8, r0
 800ce86:	e7e7      	b.n	800ce58 <__sflush_r+0xd4>
 800ce88:	dfbffffe 	.word	0xdfbffffe

0800ce8c <_fflush_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	690b      	ldr	r3, [r1, #16]
 800ce90:	4605      	mov	r5, r0
 800ce92:	460c      	mov	r4, r1
 800ce94:	b913      	cbnz	r3, 800ce9c <_fflush_r+0x10>
 800ce96:	2500      	movs	r5, #0
 800ce98:	4628      	mov	r0, r5
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	b118      	cbz	r0, 800cea6 <_fflush_r+0x1a>
 800ce9e:	6a03      	ldr	r3, [r0, #32]
 800cea0:	b90b      	cbnz	r3, 800cea6 <_fflush_r+0x1a>
 800cea2:	f7fe feb1 	bl	800bc08 <__sinit>
 800cea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0f3      	beq.n	800ce96 <_fflush_r+0xa>
 800ceae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ceb0:	07d0      	lsls	r0, r2, #31
 800ceb2:	d404      	bmi.n	800cebe <_fflush_r+0x32>
 800ceb4:	0599      	lsls	r1, r3, #22
 800ceb6:	d402      	bmi.n	800cebe <_fflush_r+0x32>
 800ceb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceba:	f7fe ff12 	bl	800bce2 <__retarget_lock_acquire_recursive>
 800cebe:	4628      	mov	r0, r5
 800cec0:	4621      	mov	r1, r4
 800cec2:	f7ff ff5f 	bl	800cd84 <__sflush_r>
 800cec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cec8:	07da      	lsls	r2, r3, #31
 800ceca:	4605      	mov	r5, r0
 800cecc:	d4e4      	bmi.n	800ce98 <_fflush_r+0xc>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	059b      	lsls	r3, r3, #22
 800ced2:	d4e1      	bmi.n	800ce98 <_fflush_r+0xc>
 800ced4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ced6:	f7fe ff05 	bl	800bce4 <__retarget_lock_release_recursive>
 800ceda:	e7dd      	b.n	800ce98 <_fflush_r+0xc>

0800cedc <__malloc_lock>:
 800cedc:	4801      	ldr	r0, [pc, #4]	@ (800cee4 <__malloc_lock+0x8>)
 800cede:	f7fe bf00 	b.w	800bce2 <__retarget_lock_acquire_recursive>
 800cee2:	bf00      	nop
 800cee4:	20001b58 	.word	0x20001b58

0800cee8 <__malloc_unlock>:
 800cee8:	4801      	ldr	r0, [pc, #4]	@ (800cef0 <__malloc_unlock+0x8>)
 800ceea:	f7fe befb 	b.w	800bce4 <__retarget_lock_release_recursive>
 800ceee:	bf00      	nop
 800cef0:	20001b58 	.word	0x20001b58

0800cef4 <_Balloc>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	69c6      	ldr	r6, [r0, #28]
 800cef8:	4604      	mov	r4, r0
 800cefa:	460d      	mov	r5, r1
 800cefc:	b976      	cbnz	r6, 800cf1c <_Balloc+0x28>
 800cefe:	2010      	movs	r0, #16
 800cf00:	f7ff fe96 	bl	800cc30 <malloc>
 800cf04:	4602      	mov	r2, r0
 800cf06:	61e0      	str	r0, [r4, #28]
 800cf08:	b920      	cbnz	r0, 800cf14 <_Balloc+0x20>
 800cf0a:	4b18      	ldr	r3, [pc, #96]	@ (800cf6c <_Balloc+0x78>)
 800cf0c:	4818      	ldr	r0, [pc, #96]	@ (800cf70 <_Balloc+0x7c>)
 800cf0e:	216b      	movs	r1, #107	@ 0x6b
 800cf10:	f000 fc62 	bl	800d7d8 <__assert_func>
 800cf14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf18:	6006      	str	r6, [r0, #0]
 800cf1a:	60c6      	str	r6, [r0, #12]
 800cf1c:	69e6      	ldr	r6, [r4, #28]
 800cf1e:	68f3      	ldr	r3, [r6, #12]
 800cf20:	b183      	cbz	r3, 800cf44 <_Balloc+0x50>
 800cf22:	69e3      	ldr	r3, [r4, #28]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf2a:	b9b8      	cbnz	r0, 800cf5c <_Balloc+0x68>
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	fa01 f605 	lsl.w	r6, r1, r5
 800cf32:	1d72      	adds	r2, r6, #5
 800cf34:	0092      	lsls	r2, r2, #2
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 fc6c 	bl	800d814 <_calloc_r>
 800cf3c:	b160      	cbz	r0, 800cf58 <_Balloc+0x64>
 800cf3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf42:	e00e      	b.n	800cf62 <_Balloc+0x6e>
 800cf44:	2221      	movs	r2, #33	@ 0x21
 800cf46:	2104      	movs	r1, #4
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 fc63 	bl	800d814 <_calloc_r>
 800cf4e:	69e3      	ldr	r3, [r4, #28]
 800cf50:	60f0      	str	r0, [r6, #12]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1e4      	bne.n	800cf22 <_Balloc+0x2e>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	6802      	ldr	r2, [r0, #0]
 800cf5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf62:	2300      	movs	r3, #0
 800cf64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf68:	e7f7      	b.n	800cf5a <_Balloc+0x66>
 800cf6a:	bf00      	nop
 800cf6c:	0800e089 	.word	0x0800e089
 800cf70:	0800e11a 	.word	0x0800e11a

0800cf74 <_Bfree>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	69c6      	ldr	r6, [r0, #28]
 800cf78:	4605      	mov	r5, r0
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	b976      	cbnz	r6, 800cf9c <_Bfree+0x28>
 800cf7e:	2010      	movs	r0, #16
 800cf80:	f7ff fe56 	bl	800cc30 <malloc>
 800cf84:	4602      	mov	r2, r0
 800cf86:	61e8      	str	r0, [r5, #28]
 800cf88:	b920      	cbnz	r0, 800cf94 <_Bfree+0x20>
 800cf8a:	4b09      	ldr	r3, [pc, #36]	@ (800cfb0 <_Bfree+0x3c>)
 800cf8c:	4809      	ldr	r0, [pc, #36]	@ (800cfb4 <_Bfree+0x40>)
 800cf8e:	218f      	movs	r1, #143	@ 0x8f
 800cf90:	f000 fc22 	bl	800d7d8 <__assert_func>
 800cf94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf98:	6006      	str	r6, [r0, #0]
 800cf9a:	60c6      	str	r6, [r0, #12]
 800cf9c:	b13c      	cbz	r4, 800cfae <_Bfree+0x3a>
 800cf9e:	69eb      	ldr	r3, [r5, #28]
 800cfa0:	6862      	ldr	r2, [r4, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfa8:	6021      	str	r1, [r4, #0]
 800cfaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	0800e089 	.word	0x0800e089
 800cfb4:	0800e11a 	.word	0x0800e11a

0800cfb8 <__multadd>:
 800cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfbc:	690d      	ldr	r5, [r1, #16]
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	461e      	mov	r6, r3
 800cfc4:	f101 0c14 	add.w	ip, r1, #20
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f8dc 3000 	ldr.w	r3, [ip]
 800cfce:	b299      	uxth	r1, r3
 800cfd0:	fb02 6101 	mla	r1, r2, r1, r6
 800cfd4:	0c1e      	lsrs	r6, r3, #16
 800cfd6:	0c0b      	lsrs	r3, r1, #16
 800cfd8:	fb02 3306 	mla	r3, r2, r6, r3
 800cfdc:	b289      	uxth	r1, r1
 800cfde:	3001      	adds	r0, #1
 800cfe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfe4:	4285      	cmp	r5, r0
 800cfe6:	f84c 1b04 	str.w	r1, [ip], #4
 800cfea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfee:	dcec      	bgt.n	800cfca <__multadd+0x12>
 800cff0:	b30e      	cbz	r6, 800d036 <__multadd+0x7e>
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	42ab      	cmp	r3, r5
 800cff6:	dc19      	bgt.n	800d02c <__multadd+0x74>
 800cff8:	6861      	ldr	r1, [r4, #4]
 800cffa:	4638      	mov	r0, r7
 800cffc:	3101      	adds	r1, #1
 800cffe:	f7ff ff79 	bl	800cef4 <_Balloc>
 800d002:	4680      	mov	r8, r0
 800d004:	b928      	cbnz	r0, 800d012 <__multadd+0x5a>
 800d006:	4602      	mov	r2, r0
 800d008:	4b0c      	ldr	r3, [pc, #48]	@ (800d03c <__multadd+0x84>)
 800d00a:	480d      	ldr	r0, [pc, #52]	@ (800d040 <__multadd+0x88>)
 800d00c:	21ba      	movs	r1, #186	@ 0xba
 800d00e:	f000 fbe3 	bl	800d7d8 <__assert_func>
 800d012:	6922      	ldr	r2, [r4, #16]
 800d014:	3202      	adds	r2, #2
 800d016:	f104 010c 	add.w	r1, r4, #12
 800d01a:	0092      	lsls	r2, r2, #2
 800d01c:	300c      	adds	r0, #12
 800d01e:	f000 fbcd 	bl	800d7bc <memcpy>
 800d022:	4621      	mov	r1, r4
 800d024:	4638      	mov	r0, r7
 800d026:	f7ff ffa5 	bl	800cf74 <_Bfree>
 800d02a:	4644      	mov	r4, r8
 800d02c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d030:	3501      	adds	r5, #1
 800d032:	615e      	str	r6, [r3, #20]
 800d034:	6125      	str	r5, [r4, #16]
 800d036:	4620      	mov	r0, r4
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	0800e0f8 	.word	0x0800e0f8
 800d040:	0800e11a 	.word	0x0800e11a

0800d044 <__hi0bits>:
 800d044:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d048:	4603      	mov	r3, r0
 800d04a:	bf36      	itet	cc
 800d04c:	0403      	lslcc	r3, r0, #16
 800d04e:	2000      	movcs	r0, #0
 800d050:	2010      	movcc	r0, #16
 800d052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d056:	bf3c      	itt	cc
 800d058:	021b      	lslcc	r3, r3, #8
 800d05a:	3008      	addcc	r0, #8
 800d05c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d060:	bf3c      	itt	cc
 800d062:	011b      	lslcc	r3, r3, #4
 800d064:	3004      	addcc	r0, #4
 800d066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d06a:	bf3c      	itt	cc
 800d06c:	009b      	lslcc	r3, r3, #2
 800d06e:	3002      	addcc	r0, #2
 800d070:	2b00      	cmp	r3, #0
 800d072:	db05      	blt.n	800d080 <__hi0bits+0x3c>
 800d074:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d078:	f100 0001 	add.w	r0, r0, #1
 800d07c:	bf08      	it	eq
 800d07e:	2020      	moveq	r0, #32
 800d080:	4770      	bx	lr

0800d082 <__lo0bits>:
 800d082:	6803      	ldr	r3, [r0, #0]
 800d084:	4602      	mov	r2, r0
 800d086:	f013 0007 	ands.w	r0, r3, #7
 800d08a:	d00b      	beq.n	800d0a4 <__lo0bits+0x22>
 800d08c:	07d9      	lsls	r1, r3, #31
 800d08e:	d421      	bmi.n	800d0d4 <__lo0bits+0x52>
 800d090:	0798      	lsls	r0, r3, #30
 800d092:	bf49      	itett	mi
 800d094:	085b      	lsrmi	r3, r3, #1
 800d096:	089b      	lsrpl	r3, r3, #2
 800d098:	2001      	movmi	r0, #1
 800d09a:	6013      	strmi	r3, [r2, #0]
 800d09c:	bf5c      	itt	pl
 800d09e:	6013      	strpl	r3, [r2, #0]
 800d0a0:	2002      	movpl	r0, #2
 800d0a2:	4770      	bx	lr
 800d0a4:	b299      	uxth	r1, r3
 800d0a6:	b909      	cbnz	r1, 800d0ac <__lo0bits+0x2a>
 800d0a8:	0c1b      	lsrs	r3, r3, #16
 800d0aa:	2010      	movs	r0, #16
 800d0ac:	b2d9      	uxtb	r1, r3
 800d0ae:	b909      	cbnz	r1, 800d0b4 <__lo0bits+0x32>
 800d0b0:	3008      	adds	r0, #8
 800d0b2:	0a1b      	lsrs	r3, r3, #8
 800d0b4:	0719      	lsls	r1, r3, #28
 800d0b6:	bf04      	itt	eq
 800d0b8:	091b      	lsreq	r3, r3, #4
 800d0ba:	3004      	addeq	r0, #4
 800d0bc:	0799      	lsls	r1, r3, #30
 800d0be:	bf04      	itt	eq
 800d0c0:	089b      	lsreq	r3, r3, #2
 800d0c2:	3002      	addeq	r0, #2
 800d0c4:	07d9      	lsls	r1, r3, #31
 800d0c6:	d403      	bmi.n	800d0d0 <__lo0bits+0x4e>
 800d0c8:	085b      	lsrs	r3, r3, #1
 800d0ca:	f100 0001 	add.w	r0, r0, #1
 800d0ce:	d003      	beq.n	800d0d8 <__lo0bits+0x56>
 800d0d0:	6013      	str	r3, [r2, #0]
 800d0d2:	4770      	bx	lr
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	4770      	bx	lr
 800d0d8:	2020      	movs	r0, #32
 800d0da:	4770      	bx	lr

0800d0dc <__i2b>:
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	460c      	mov	r4, r1
 800d0e0:	2101      	movs	r1, #1
 800d0e2:	f7ff ff07 	bl	800cef4 <_Balloc>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	b928      	cbnz	r0, 800d0f6 <__i2b+0x1a>
 800d0ea:	4b05      	ldr	r3, [pc, #20]	@ (800d100 <__i2b+0x24>)
 800d0ec:	4805      	ldr	r0, [pc, #20]	@ (800d104 <__i2b+0x28>)
 800d0ee:	f240 1145 	movw	r1, #325	@ 0x145
 800d0f2:	f000 fb71 	bl	800d7d8 <__assert_func>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	6144      	str	r4, [r0, #20]
 800d0fa:	6103      	str	r3, [r0, #16]
 800d0fc:	bd10      	pop	{r4, pc}
 800d0fe:	bf00      	nop
 800d100:	0800e0f8 	.word	0x0800e0f8
 800d104:	0800e11a 	.word	0x0800e11a

0800d108 <__multiply>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	4614      	mov	r4, r2
 800d10e:	690a      	ldr	r2, [r1, #16]
 800d110:	6923      	ldr	r3, [r4, #16]
 800d112:	429a      	cmp	r2, r3
 800d114:	bfa8      	it	ge
 800d116:	4623      	movge	r3, r4
 800d118:	460f      	mov	r7, r1
 800d11a:	bfa4      	itt	ge
 800d11c:	460c      	movge	r4, r1
 800d11e:	461f      	movge	r7, r3
 800d120:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d124:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d128:	68a3      	ldr	r3, [r4, #8]
 800d12a:	6861      	ldr	r1, [r4, #4]
 800d12c:	eb0a 0609 	add.w	r6, sl, r9
 800d130:	42b3      	cmp	r3, r6
 800d132:	b085      	sub	sp, #20
 800d134:	bfb8      	it	lt
 800d136:	3101      	addlt	r1, #1
 800d138:	f7ff fedc 	bl	800cef4 <_Balloc>
 800d13c:	b930      	cbnz	r0, 800d14c <__multiply+0x44>
 800d13e:	4602      	mov	r2, r0
 800d140:	4b44      	ldr	r3, [pc, #272]	@ (800d254 <__multiply+0x14c>)
 800d142:	4845      	ldr	r0, [pc, #276]	@ (800d258 <__multiply+0x150>)
 800d144:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d148:	f000 fb46 	bl	800d7d8 <__assert_func>
 800d14c:	f100 0514 	add.w	r5, r0, #20
 800d150:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d154:	462b      	mov	r3, r5
 800d156:	2200      	movs	r2, #0
 800d158:	4543      	cmp	r3, r8
 800d15a:	d321      	bcc.n	800d1a0 <__multiply+0x98>
 800d15c:	f107 0114 	add.w	r1, r7, #20
 800d160:	f104 0214 	add.w	r2, r4, #20
 800d164:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d168:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d16c:	9302      	str	r3, [sp, #8]
 800d16e:	1b13      	subs	r3, r2, r4
 800d170:	3b15      	subs	r3, #21
 800d172:	f023 0303 	bic.w	r3, r3, #3
 800d176:	3304      	adds	r3, #4
 800d178:	f104 0715 	add.w	r7, r4, #21
 800d17c:	42ba      	cmp	r2, r7
 800d17e:	bf38      	it	cc
 800d180:	2304      	movcc	r3, #4
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	9103      	str	r1, [sp, #12]
 800d188:	428b      	cmp	r3, r1
 800d18a:	d80c      	bhi.n	800d1a6 <__multiply+0x9e>
 800d18c:	2e00      	cmp	r6, #0
 800d18e:	dd03      	ble.n	800d198 <__multiply+0x90>
 800d190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d194:	2b00      	cmp	r3, #0
 800d196:	d05b      	beq.n	800d250 <__multiply+0x148>
 800d198:	6106      	str	r6, [r0, #16]
 800d19a:	b005      	add	sp, #20
 800d19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a0:	f843 2b04 	str.w	r2, [r3], #4
 800d1a4:	e7d8      	b.n	800d158 <__multiply+0x50>
 800d1a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1aa:	f1ba 0f00 	cmp.w	sl, #0
 800d1ae:	d024      	beq.n	800d1fa <__multiply+0xf2>
 800d1b0:	f104 0e14 	add.w	lr, r4, #20
 800d1b4:	46a9      	mov	r9, r5
 800d1b6:	f04f 0c00 	mov.w	ip, #0
 800d1ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1be:	f8d9 3000 	ldr.w	r3, [r9]
 800d1c2:	fa1f fb87 	uxth.w	fp, r7
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d1d0:	f8d9 7000 	ldr.w	r7, [r9]
 800d1d4:	4463      	add	r3, ip
 800d1d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1da:	fb0a c70b 	mla	r7, sl, fp, ip
 800d1de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1e8:	4572      	cmp	r2, lr
 800d1ea:	f849 3b04 	str.w	r3, [r9], #4
 800d1ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1f2:	d8e2      	bhi.n	800d1ba <__multiply+0xb2>
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	f845 c003 	str.w	ip, [r5, r3]
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d200:	3104      	adds	r1, #4
 800d202:	f1b9 0f00 	cmp.w	r9, #0
 800d206:	d021      	beq.n	800d24c <__multiply+0x144>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	f104 0c14 	add.w	ip, r4, #20
 800d20e:	46ae      	mov	lr, r5
 800d210:	f04f 0a00 	mov.w	sl, #0
 800d214:	f8bc b000 	ldrh.w	fp, [ip]
 800d218:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d21c:	fb09 770b 	mla	r7, r9, fp, r7
 800d220:	4457      	add	r7, sl
 800d222:	b29b      	uxth	r3, r3
 800d224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d228:	f84e 3b04 	str.w	r3, [lr], #4
 800d22c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d230:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d234:	f8be 3000 	ldrh.w	r3, [lr]
 800d238:	fb09 330a 	mla	r3, r9, sl, r3
 800d23c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d240:	4562      	cmp	r2, ip
 800d242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d246:	d8e5      	bhi.n	800d214 <__multiply+0x10c>
 800d248:	9f01      	ldr	r7, [sp, #4]
 800d24a:	51eb      	str	r3, [r5, r7]
 800d24c:	3504      	adds	r5, #4
 800d24e:	e799      	b.n	800d184 <__multiply+0x7c>
 800d250:	3e01      	subs	r6, #1
 800d252:	e79b      	b.n	800d18c <__multiply+0x84>
 800d254:	0800e0f8 	.word	0x0800e0f8
 800d258:	0800e11a 	.word	0x0800e11a

0800d25c <__pow5mult>:
 800d25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d260:	4615      	mov	r5, r2
 800d262:	f012 0203 	ands.w	r2, r2, #3
 800d266:	4607      	mov	r7, r0
 800d268:	460e      	mov	r6, r1
 800d26a:	d007      	beq.n	800d27c <__pow5mult+0x20>
 800d26c:	4c25      	ldr	r4, [pc, #148]	@ (800d304 <__pow5mult+0xa8>)
 800d26e:	3a01      	subs	r2, #1
 800d270:	2300      	movs	r3, #0
 800d272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d276:	f7ff fe9f 	bl	800cfb8 <__multadd>
 800d27a:	4606      	mov	r6, r0
 800d27c:	10ad      	asrs	r5, r5, #2
 800d27e:	d03d      	beq.n	800d2fc <__pow5mult+0xa0>
 800d280:	69fc      	ldr	r4, [r7, #28]
 800d282:	b97c      	cbnz	r4, 800d2a4 <__pow5mult+0x48>
 800d284:	2010      	movs	r0, #16
 800d286:	f7ff fcd3 	bl	800cc30 <malloc>
 800d28a:	4602      	mov	r2, r0
 800d28c:	61f8      	str	r0, [r7, #28]
 800d28e:	b928      	cbnz	r0, 800d29c <__pow5mult+0x40>
 800d290:	4b1d      	ldr	r3, [pc, #116]	@ (800d308 <__pow5mult+0xac>)
 800d292:	481e      	ldr	r0, [pc, #120]	@ (800d30c <__pow5mult+0xb0>)
 800d294:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d298:	f000 fa9e 	bl	800d7d8 <__assert_func>
 800d29c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2a0:	6004      	str	r4, [r0, #0]
 800d2a2:	60c4      	str	r4, [r0, #12]
 800d2a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2ac:	b94c      	cbnz	r4, 800d2c2 <__pow5mult+0x66>
 800d2ae:	f240 2171 	movw	r1, #625	@ 0x271
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f7ff ff12 	bl	800d0dc <__i2b>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2be:	4604      	mov	r4, r0
 800d2c0:	6003      	str	r3, [r0, #0]
 800d2c2:	f04f 0900 	mov.w	r9, #0
 800d2c6:	07eb      	lsls	r3, r5, #31
 800d2c8:	d50a      	bpl.n	800d2e0 <__pow5mult+0x84>
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4622      	mov	r2, r4
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f7ff ff1a 	bl	800d108 <__multiply>
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4680      	mov	r8, r0
 800d2d8:	4638      	mov	r0, r7
 800d2da:	f7ff fe4b 	bl	800cf74 <_Bfree>
 800d2de:	4646      	mov	r6, r8
 800d2e0:	106d      	asrs	r5, r5, #1
 800d2e2:	d00b      	beq.n	800d2fc <__pow5mult+0xa0>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	b938      	cbnz	r0, 800d2f8 <__pow5mult+0x9c>
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	f7ff ff0b 	bl	800d108 <__multiply>
 800d2f2:	6020      	str	r0, [r4, #0]
 800d2f4:	f8c0 9000 	str.w	r9, [r0]
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	e7e4      	b.n	800d2c6 <__pow5mult+0x6a>
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d302:	bf00      	nop
 800d304:	0800e174 	.word	0x0800e174
 800d308:	0800e089 	.word	0x0800e089
 800d30c:	0800e11a 	.word	0x0800e11a

0800d310 <__lshift>:
 800d310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d314:	460c      	mov	r4, r1
 800d316:	6849      	ldr	r1, [r1, #4]
 800d318:	6923      	ldr	r3, [r4, #16]
 800d31a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d31e:	68a3      	ldr	r3, [r4, #8]
 800d320:	4607      	mov	r7, r0
 800d322:	4691      	mov	r9, r2
 800d324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d328:	f108 0601 	add.w	r6, r8, #1
 800d32c:	42b3      	cmp	r3, r6
 800d32e:	db0b      	blt.n	800d348 <__lshift+0x38>
 800d330:	4638      	mov	r0, r7
 800d332:	f7ff fddf 	bl	800cef4 <_Balloc>
 800d336:	4605      	mov	r5, r0
 800d338:	b948      	cbnz	r0, 800d34e <__lshift+0x3e>
 800d33a:	4602      	mov	r2, r0
 800d33c:	4b28      	ldr	r3, [pc, #160]	@ (800d3e0 <__lshift+0xd0>)
 800d33e:	4829      	ldr	r0, [pc, #164]	@ (800d3e4 <__lshift+0xd4>)
 800d340:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d344:	f000 fa48 	bl	800d7d8 <__assert_func>
 800d348:	3101      	adds	r1, #1
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	e7ee      	b.n	800d32c <__lshift+0x1c>
 800d34e:	2300      	movs	r3, #0
 800d350:	f100 0114 	add.w	r1, r0, #20
 800d354:	f100 0210 	add.w	r2, r0, #16
 800d358:	4618      	mov	r0, r3
 800d35a:	4553      	cmp	r3, sl
 800d35c:	db33      	blt.n	800d3c6 <__lshift+0xb6>
 800d35e:	6920      	ldr	r0, [r4, #16]
 800d360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d364:	f104 0314 	add.w	r3, r4, #20
 800d368:	f019 091f 	ands.w	r9, r9, #31
 800d36c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d374:	d02b      	beq.n	800d3ce <__lshift+0xbe>
 800d376:	f1c9 0e20 	rsb	lr, r9, #32
 800d37a:	468a      	mov	sl, r1
 800d37c:	2200      	movs	r2, #0
 800d37e:	6818      	ldr	r0, [r3, #0]
 800d380:	fa00 f009 	lsl.w	r0, r0, r9
 800d384:	4310      	orrs	r0, r2
 800d386:	f84a 0b04 	str.w	r0, [sl], #4
 800d38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d38e:	459c      	cmp	ip, r3
 800d390:	fa22 f20e 	lsr.w	r2, r2, lr
 800d394:	d8f3      	bhi.n	800d37e <__lshift+0x6e>
 800d396:	ebac 0304 	sub.w	r3, ip, r4
 800d39a:	3b15      	subs	r3, #21
 800d39c:	f023 0303 	bic.w	r3, r3, #3
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	f104 0015 	add.w	r0, r4, #21
 800d3a6:	4584      	cmp	ip, r0
 800d3a8:	bf38      	it	cc
 800d3aa:	2304      	movcc	r3, #4
 800d3ac:	50ca      	str	r2, [r1, r3]
 800d3ae:	b10a      	cbz	r2, 800d3b4 <__lshift+0xa4>
 800d3b0:	f108 0602 	add.w	r6, r8, #2
 800d3b4:	3e01      	subs	r6, #1
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	612e      	str	r6, [r5, #16]
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	f7ff fdda 	bl	800cf74 <_Bfree>
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	e7c5      	b.n	800d35a <__lshift+0x4a>
 800d3ce:	3904      	subs	r1, #4
 800d3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3d8:	459c      	cmp	ip, r3
 800d3da:	d8f9      	bhi.n	800d3d0 <__lshift+0xc0>
 800d3dc:	e7ea      	b.n	800d3b4 <__lshift+0xa4>
 800d3de:	bf00      	nop
 800d3e0:	0800e0f8 	.word	0x0800e0f8
 800d3e4:	0800e11a 	.word	0x0800e11a

0800d3e8 <__mcmp>:
 800d3e8:	690a      	ldr	r2, [r1, #16]
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6900      	ldr	r0, [r0, #16]
 800d3ee:	1a80      	subs	r0, r0, r2
 800d3f0:	b530      	push	{r4, r5, lr}
 800d3f2:	d10e      	bne.n	800d412 <__mcmp+0x2a>
 800d3f4:	3314      	adds	r3, #20
 800d3f6:	3114      	adds	r1, #20
 800d3f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d408:	4295      	cmp	r5, r2
 800d40a:	d003      	beq.n	800d414 <__mcmp+0x2c>
 800d40c:	d205      	bcs.n	800d41a <__mcmp+0x32>
 800d40e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d412:	bd30      	pop	{r4, r5, pc}
 800d414:	42a3      	cmp	r3, r4
 800d416:	d3f3      	bcc.n	800d400 <__mcmp+0x18>
 800d418:	e7fb      	b.n	800d412 <__mcmp+0x2a>
 800d41a:	2001      	movs	r0, #1
 800d41c:	e7f9      	b.n	800d412 <__mcmp+0x2a>
	...

0800d420 <__mdiff>:
 800d420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	4689      	mov	r9, r1
 800d426:	4606      	mov	r6, r0
 800d428:	4611      	mov	r1, r2
 800d42a:	4648      	mov	r0, r9
 800d42c:	4614      	mov	r4, r2
 800d42e:	f7ff ffdb 	bl	800d3e8 <__mcmp>
 800d432:	1e05      	subs	r5, r0, #0
 800d434:	d112      	bne.n	800d45c <__mdiff+0x3c>
 800d436:	4629      	mov	r1, r5
 800d438:	4630      	mov	r0, r6
 800d43a:	f7ff fd5b 	bl	800cef4 <_Balloc>
 800d43e:	4602      	mov	r2, r0
 800d440:	b928      	cbnz	r0, 800d44e <__mdiff+0x2e>
 800d442:	4b3f      	ldr	r3, [pc, #252]	@ (800d540 <__mdiff+0x120>)
 800d444:	f240 2137 	movw	r1, #567	@ 0x237
 800d448:	483e      	ldr	r0, [pc, #248]	@ (800d544 <__mdiff+0x124>)
 800d44a:	f000 f9c5 	bl	800d7d8 <__assert_func>
 800d44e:	2301      	movs	r3, #1
 800d450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d454:	4610      	mov	r0, r2
 800d456:	b003      	add	sp, #12
 800d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45c:	bfbc      	itt	lt
 800d45e:	464b      	movlt	r3, r9
 800d460:	46a1      	movlt	r9, r4
 800d462:	4630      	mov	r0, r6
 800d464:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d468:	bfba      	itte	lt
 800d46a:	461c      	movlt	r4, r3
 800d46c:	2501      	movlt	r5, #1
 800d46e:	2500      	movge	r5, #0
 800d470:	f7ff fd40 	bl	800cef4 <_Balloc>
 800d474:	4602      	mov	r2, r0
 800d476:	b918      	cbnz	r0, 800d480 <__mdiff+0x60>
 800d478:	4b31      	ldr	r3, [pc, #196]	@ (800d540 <__mdiff+0x120>)
 800d47a:	f240 2145 	movw	r1, #581	@ 0x245
 800d47e:	e7e3      	b.n	800d448 <__mdiff+0x28>
 800d480:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d484:	6926      	ldr	r6, [r4, #16]
 800d486:	60c5      	str	r5, [r0, #12]
 800d488:	f109 0310 	add.w	r3, r9, #16
 800d48c:	f109 0514 	add.w	r5, r9, #20
 800d490:	f104 0e14 	add.w	lr, r4, #20
 800d494:	f100 0b14 	add.w	fp, r0, #20
 800d498:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d49c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	46d9      	mov	r9, fp
 800d4a4:	f04f 0c00 	mov.w	ip, #0
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4b2:	9301      	str	r3, [sp, #4]
 800d4b4:	fa1f f38a 	uxth.w	r3, sl
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	b283      	uxth	r3, r0
 800d4bc:	1acb      	subs	r3, r1, r3
 800d4be:	0c00      	lsrs	r0, r0, #16
 800d4c0:	4463      	add	r3, ip
 800d4c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4d0:	4576      	cmp	r6, lr
 800d4d2:	f849 3b04 	str.w	r3, [r9], #4
 800d4d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4da:	d8e5      	bhi.n	800d4a8 <__mdiff+0x88>
 800d4dc:	1b33      	subs	r3, r6, r4
 800d4de:	3b15      	subs	r3, #21
 800d4e0:	f023 0303 	bic.w	r3, r3, #3
 800d4e4:	3415      	adds	r4, #21
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	42a6      	cmp	r6, r4
 800d4ea:	bf38      	it	cc
 800d4ec:	2304      	movcc	r3, #4
 800d4ee:	441d      	add	r5, r3
 800d4f0:	445b      	add	r3, fp
 800d4f2:	461e      	mov	r6, r3
 800d4f4:	462c      	mov	r4, r5
 800d4f6:	4544      	cmp	r4, r8
 800d4f8:	d30e      	bcc.n	800d518 <__mdiff+0xf8>
 800d4fa:	f108 0103 	add.w	r1, r8, #3
 800d4fe:	1b49      	subs	r1, r1, r5
 800d500:	f021 0103 	bic.w	r1, r1, #3
 800d504:	3d03      	subs	r5, #3
 800d506:	45a8      	cmp	r8, r5
 800d508:	bf38      	it	cc
 800d50a:	2100      	movcc	r1, #0
 800d50c:	440b      	add	r3, r1
 800d50e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d512:	b191      	cbz	r1, 800d53a <__mdiff+0x11a>
 800d514:	6117      	str	r7, [r2, #16]
 800d516:	e79d      	b.n	800d454 <__mdiff+0x34>
 800d518:	f854 1b04 	ldr.w	r1, [r4], #4
 800d51c:	46e6      	mov	lr, ip
 800d51e:	0c08      	lsrs	r0, r1, #16
 800d520:	fa1c fc81 	uxtah	ip, ip, r1
 800d524:	4471      	add	r1, lr
 800d526:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d52a:	b289      	uxth	r1, r1
 800d52c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d530:	f846 1b04 	str.w	r1, [r6], #4
 800d534:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d538:	e7dd      	b.n	800d4f6 <__mdiff+0xd6>
 800d53a:	3f01      	subs	r7, #1
 800d53c:	e7e7      	b.n	800d50e <__mdiff+0xee>
 800d53e:	bf00      	nop
 800d540:	0800e0f8 	.word	0x0800e0f8
 800d544:	0800e11a 	.word	0x0800e11a

0800d548 <__d2b>:
 800d548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d54c:	460f      	mov	r7, r1
 800d54e:	2101      	movs	r1, #1
 800d550:	ec59 8b10 	vmov	r8, r9, d0
 800d554:	4616      	mov	r6, r2
 800d556:	f7ff fccd 	bl	800cef4 <_Balloc>
 800d55a:	4604      	mov	r4, r0
 800d55c:	b930      	cbnz	r0, 800d56c <__d2b+0x24>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b23      	ldr	r3, [pc, #140]	@ (800d5f0 <__d2b+0xa8>)
 800d562:	4824      	ldr	r0, [pc, #144]	@ (800d5f4 <__d2b+0xac>)
 800d564:	f240 310f 	movw	r1, #783	@ 0x30f
 800d568:	f000 f936 	bl	800d7d8 <__assert_func>
 800d56c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d574:	b10d      	cbz	r5, 800d57a <__d2b+0x32>
 800d576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	f1b8 0300 	subs.w	r3, r8, #0
 800d580:	d023      	beq.n	800d5ca <__d2b+0x82>
 800d582:	4668      	mov	r0, sp
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	f7ff fd7c 	bl	800d082 <__lo0bits>
 800d58a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d58e:	b1d0      	cbz	r0, 800d5c6 <__d2b+0x7e>
 800d590:	f1c0 0320 	rsb	r3, r0, #32
 800d594:	fa02 f303 	lsl.w	r3, r2, r3
 800d598:	430b      	orrs	r3, r1
 800d59a:	40c2      	lsrs	r2, r0
 800d59c:	6163      	str	r3, [r4, #20]
 800d59e:	9201      	str	r2, [sp, #4]
 800d5a0:	9b01      	ldr	r3, [sp, #4]
 800d5a2:	61a3      	str	r3, [r4, #24]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	bf0c      	ite	eq
 800d5a8:	2201      	moveq	r2, #1
 800d5aa:	2202      	movne	r2, #2
 800d5ac:	6122      	str	r2, [r4, #16]
 800d5ae:	b1a5      	cbz	r5, 800d5da <__d2b+0x92>
 800d5b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d5b4:	4405      	add	r5, r0
 800d5b6:	603d      	str	r5, [r7, #0]
 800d5b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d5bc:	6030      	str	r0, [r6, #0]
 800d5be:	4620      	mov	r0, r4
 800d5c0:	b003      	add	sp, #12
 800d5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	6161      	str	r1, [r4, #20]
 800d5c8:	e7ea      	b.n	800d5a0 <__d2b+0x58>
 800d5ca:	a801      	add	r0, sp, #4
 800d5cc:	f7ff fd59 	bl	800d082 <__lo0bits>
 800d5d0:	9b01      	ldr	r3, [sp, #4]
 800d5d2:	6163      	str	r3, [r4, #20]
 800d5d4:	3020      	adds	r0, #32
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	e7e8      	b.n	800d5ac <__d2b+0x64>
 800d5da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5e2:	6038      	str	r0, [r7, #0]
 800d5e4:	6918      	ldr	r0, [r3, #16]
 800d5e6:	f7ff fd2d 	bl	800d044 <__hi0bits>
 800d5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5ee:	e7e5      	b.n	800d5bc <__d2b+0x74>
 800d5f0:	0800e0f8 	.word	0x0800e0f8
 800d5f4:	0800e11a 	.word	0x0800e11a

0800d5f8 <__sread>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	f000 f8a8 	bl	800d754 <_read_r>
 800d604:	2800      	cmp	r0, #0
 800d606:	bfab      	itete	ge
 800d608:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d60a:	89a3      	ldrhlt	r3, [r4, #12]
 800d60c:	181b      	addge	r3, r3, r0
 800d60e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d612:	bfac      	ite	ge
 800d614:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d616:	81a3      	strhlt	r3, [r4, #12]
 800d618:	bd10      	pop	{r4, pc}

0800d61a <__swrite>:
 800d61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d61e:	461f      	mov	r7, r3
 800d620:	898b      	ldrh	r3, [r1, #12]
 800d622:	05db      	lsls	r3, r3, #23
 800d624:	4605      	mov	r5, r0
 800d626:	460c      	mov	r4, r1
 800d628:	4616      	mov	r6, r2
 800d62a:	d505      	bpl.n	800d638 <__swrite+0x1e>
 800d62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d630:	2302      	movs	r3, #2
 800d632:	2200      	movs	r2, #0
 800d634:	f000 f87c 	bl	800d730 <_lseek_r>
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d63e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d642:	81a3      	strh	r3, [r4, #12]
 800d644:	4632      	mov	r2, r6
 800d646:	463b      	mov	r3, r7
 800d648:	4628      	mov	r0, r5
 800d64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d64e:	f000 b8a3 	b.w	800d798 <_write_r>

0800d652 <__sseek>:
 800d652:	b510      	push	{r4, lr}
 800d654:	460c      	mov	r4, r1
 800d656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d65a:	f000 f869 	bl	800d730 <_lseek_r>
 800d65e:	1c43      	adds	r3, r0, #1
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	bf15      	itete	ne
 800d664:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d666:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d66a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d66e:	81a3      	strheq	r3, [r4, #12]
 800d670:	bf18      	it	ne
 800d672:	81a3      	strhne	r3, [r4, #12]
 800d674:	bd10      	pop	{r4, pc}

0800d676 <__sclose>:
 800d676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d67a:	f000 b849 	b.w	800d710 <_close_r>

0800d67e <_realloc_r>:
 800d67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d682:	4680      	mov	r8, r0
 800d684:	4615      	mov	r5, r2
 800d686:	460c      	mov	r4, r1
 800d688:	b921      	cbnz	r1, 800d694 <_realloc_r+0x16>
 800d68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d68e:	4611      	mov	r1, r2
 800d690:	f7ff baf8 	b.w	800cc84 <_malloc_r>
 800d694:	b92a      	cbnz	r2, 800d6a2 <_realloc_r+0x24>
 800d696:	f000 f8d1 	bl	800d83c <_free_r>
 800d69a:	2400      	movs	r4, #0
 800d69c:	4620      	mov	r0, r4
 800d69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a2:	f000 f927 	bl	800d8f4 <_malloc_usable_size_r>
 800d6a6:	4285      	cmp	r5, r0
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	d802      	bhi.n	800d6b2 <_realloc_r+0x34>
 800d6ac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d6b0:	d8f4      	bhi.n	800d69c <_realloc_r+0x1e>
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4640      	mov	r0, r8
 800d6b6:	f7ff fae5 	bl	800cc84 <_malloc_r>
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d0ec      	beq.n	800d69a <_realloc_r+0x1c>
 800d6c0:	42b5      	cmp	r5, r6
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	bf28      	it	cs
 800d6c8:	4632      	movcs	r2, r6
 800d6ca:	f000 f877 	bl	800d7bc <memcpy>
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	f000 f8b3 	bl	800d83c <_free_r>
 800d6d6:	463c      	mov	r4, r7
 800d6d8:	e7e0      	b.n	800d69c <_realloc_r+0x1e>

0800d6da <memmove>:
 800d6da:	4288      	cmp	r0, r1
 800d6dc:	b510      	push	{r4, lr}
 800d6de:	eb01 0402 	add.w	r4, r1, r2
 800d6e2:	d902      	bls.n	800d6ea <memmove+0x10>
 800d6e4:	4284      	cmp	r4, r0
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	d807      	bhi.n	800d6fa <memmove+0x20>
 800d6ea:	1e43      	subs	r3, r0, #1
 800d6ec:	42a1      	cmp	r1, r4
 800d6ee:	d008      	beq.n	800d702 <memmove+0x28>
 800d6f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6f8:	e7f8      	b.n	800d6ec <memmove+0x12>
 800d6fa:	4402      	add	r2, r0
 800d6fc:	4601      	mov	r1, r0
 800d6fe:	428a      	cmp	r2, r1
 800d700:	d100      	bne.n	800d704 <memmove+0x2a>
 800d702:	bd10      	pop	{r4, pc}
 800d704:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d708:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d70c:	e7f7      	b.n	800d6fe <memmove+0x24>
	...

0800d710 <_close_r>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	4d06      	ldr	r5, [pc, #24]	@ (800d72c <_close_r+0x1c>)
 800d714:	2300      	movs	r3, #0
 800d716:	4604      	mov	r4, r0
 800d718:	4608      	mov	r0, r1
 800d71a:	602b      	str	r3, [r5, #0]
 800d71c:	f7f4 fc98 	bl	8002050 <_close>
 800d720:	1c43      	adds	r3, r0, #1
 800d722:	d102      	bne.n	800d72a <_close_r+0x1a>
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	b103      	cbz	r3, 800d72a <_close_r+0x1a>
 800d728:	6023      	str	r3, [r4, #0]
 800d72a:	bd38      	pop	{r3, r4, r5, pc}
 800d72c:	20001b64 	.word	0x20001b64

0800d730 <_lseek_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4d07      	ldr	r5, [pc, #28]	@ (800d750 <_lseek_r+0x20>)
 800d734:	4604      	mov	r4, r0
 800d736:	4608      	mov	r0, r1
 800d738:	4611      	mov	r1, r2
 800d73a:	2200      	movs	r2, #0
 800d73c:	602a      	str	r2, [r5, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	f7f4 fcad 	bl	800209e <_lseek>
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d102      	bne.n	800d74e <_lseek_r+0x1e>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	b103      	cbz	r3, 800d74e <_lseek_r+0x1e>
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	20001b64 	.word	0x20001b64

0800d754 <_read_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d07      	ldr	r5, [pc, #28]	@ (800d774 <_read_r+0x20>)
 800d758:	4604      	mov	r4, r0
 800d75a:	4608      	mov	r0, r1
 800d75c:	4611      	mov	r1, r2
 800d75e:	2200      	movs	r2, #0
 800d760:	602a      	str	r2, [r5, #0]
 800d762:	461a      	mov	r2, r3
 800d764:	f7f4 fc3b 	bl	8001fde <_read>
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d102      	bne.n	800d772 <_read_r+0x1e>
 800d76c:	682b      	ldr	r3, [r5, #0]
 800d76e:	b103      	cbz	r3, 800d772 <_read_r+0x1e>
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	bd38      	pop	{r3, r4, r5, pc}
 800d774:	20001b64 	.word	0x20001b64

0800d778 <_sbrk_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	4d06      	ldr	r5, [pc, #24]	@ (800d794 <_sbrk_r+0x1c>)
 800d77c:	2300      	movs	r3, #0
 800d77e:	4604      	mov	r4, r0
 800d780:	4608      	mov	r0, r1
 800d782:	602b      	str	r3, [r5, #0]
 800d784:	f7f4 fc98 	bl	80020b8 <_sbrk>
 800d788:	1c43      	adds	r3, r0, #1
 800d78a:	d102      	bne.n	800d792 <_sbrk_r+0x1a>
 800d78c:	682b      	ldr	r3, [r5, #0]
 800d78e:	b103      	cbz	r3, 800d792 <_sbrk_r+0x1a>
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	bd38      	pop	{r3, r4, r5, pc}
 800d794:	20001b64 	.word	0x20001b64

0800d798 <_write_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d07      	ldr	r5, [pc, #28]	@ (800d7b8 <_write_r+0x20>)
 800d79c:	4604      	mov	r4, r0
 800d79e:	4608      	mov	r0, r1
 800d7a0:	4611      	mov	r1, r2
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	602a      	str	r2, [r5, #0]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	f7f4 fc36 	bl	8002018 <_write>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d102      	bne.n	800d7b6 <_write_r+0x1e>
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	b103      	cbz	r3, 800d7b6 <_write_r+0x1e>
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	20001b64 	.word	0x20001b64

0800d7bc <memcpy>:
 800d7bc:	440a      	add	r2, r1
 800d7be:	4291      	cmp	r1, r2
 800d7c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d7c4:	d100      	bne.n	800d7c8 <memcpy+0xc>
 800d7c6:	4770      	bx	lr
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7d2:	4291      	cmp	r1, r2
 800d7d4:	d1f9      	bne.n	800d7ca <memcpy+0xe>
 800d7d6:	bd10      	pop	{r4, pc}

0800d7d8 <__assert_func>:
 800d7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7da:	4614      	mov	r4, r2
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4b09      	ldr	r3, [pc, #36]	@ (800d804 <__assert_func+0x2c>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	68d8      	ldr	r0, [r3, #12]
 800d7e6:	b954      	cbnz	r4, 800d7fe <__assert_func+0x26>
 800d7e8:	4b07      	ldr	r3, [pc, #28]	@ (800d808 <__assert_func+0x30>)
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7f0:	9100      	str	r1, [sp, #0]
 800d7f2:	462b      	mov	r3, r5
 800d7f4:	4905      	ldr	r1, [pc, #20]	@ (800d80c <__assert_func+0x34>)
 800d7f6:	f000 f885 	bl	800d904 <fiprintf>
 800d7fa:	f000 f8a2 	bl	800d942 <abort>
 800d7fe:	4b04      	ldr	r3, [pc, #16]	@ (800d810 <__assert_func+0x38>)
 800d800:	e7f4      	b.n	800d7ec <__assert_func+0x14>
 800d802:	bf00      	nop
 800d804:	20000108 	.word	0x20000108
 800d808:	0800e3b6 	.word	0x0800e3b6
 800d80c:	0800e388 	.word	0x0800e388
 800d810:	0800e37b 	.word	0x0800e37b

0800d814 <_calloc_r>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	fba1 5402 	umull	r5, r4, r1, r2
 800d81a:	b93c      	cbnz	r4, 800d82c <_calloc_r+0x18>
 800d81c:	4629      	mov	r1, r5
 800d81e:	f7ff fa31 	bl	800cc84 <_malloc_r>
 800d822:	4606      	mov	r6, r0
 800d824:	b928      	cbnz	r0, 800d832 <_calloc_r+0x1e>
 800d826:	2600      	movs	r6, #0
 800d828:	4630      	mov	r0, r6
 800d82a:	bd70      	pop	{r4, r5, r6, pc}
 800d82c:	220c      	movs	r2, #12
 800d82e:	6002      	str	r2, [r0, #0]
 800d830:	e7f9      	b.n	800d826 <_calloc_r+0x12>
 800d832:	462a      	mov	r2, r5
 800d834:	4621      	mov	r1, r4
 800d836:	f7fe fa1d 	bl	800bc74 <memset>
 800d83a:	e7f5      	b.n	800d828 <_calloc_r+0x14>

0800d83c <_free_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4605      	mov	r5, r0
 800d840:	2900      	cmp	r1, #0
 800d842:	d041      	beq.n	800d8c8 <_free_r+0x8c>
 800d844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d848:	1f0c      	subs	r4, r1, #4
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	bfb8      	it	lt
 800d84e:	18e4      	addlt	r4, r4, r3
 800d850:	f7ff fb44 	bl	800cedc <__malloc_lock>
 800d854:	4a1d      	ldr	r2, [pc, #116]	@ (800d8cc <_free_r+0x90>)
 800d856:	6813      	ldr	r3, [r2, #0]
 800d858:	b933      	cbnz	r3, 800d868 <_free_r+0x2c>
 800d85a:	6063      	str	r3, [r4, #4]
 800d85c:	6014      	str	r4, [r2, #0]
 800d85e:	4628      	mov	r0, r5
 800d860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d864:	f7ff bb40 	b.w	800cee8 <__malloc_unlock>
 800d868:	42a3      	cmp	r3, r4
 800d86a:	d908      	bls.n	800d87e <_free_r+0x42>
 800d86c:	6820      	ldr	r0, [r4, #0]
 800d86e:	1821      	adds	r1, r4, r0
 800d870:	428b      	cmp	r3, r1
 800d872:	bf01      	itttt	eq
 800d874:	6819      	ldreq	r1, [r3, #0]
 800d876:	685b      	ldreq	r3, [r3, #4]
 800d878:	1809      	addeq	r1, r1, r0
 800d87a:	6021      	streq	r1, [r4, #0]
 800d87c:	e7ed      	b.n	800d85a <_free_r+0x1e>
 800d87e:	461a      	mov	r2, r3
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	b10b      	cbz	r3, 800d888 <_free_r+0x4c>
 800d884:	42a3      	cmp	r3, r4
 800d886:	d9fa      	bls.n	800d87e <_free_r+0x42>
 800d888:	6811      	ldr	r1, [r2, #0]
 800d88a:	1850      	adds	r0, r2, r1
 800d88c:	42a0      	cmp	r0, r4
 800d88e:	d10b      	bne.n	800d8a8 <_free_r+0x6c>
 800d890:	6820      	ldr	r0, [r4, #0]
 800d892:	4401      	add	r1, r0
 800d894:	1850      	adds	r0, r2, r1
 800d896:	4283      	cmp	r3, r0
 800d898:	6011      	str	r1, [r2, #0]
 800d89a:	d1e0      	bne.n	800d85e <_free_r+0x22>
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	6053      	str	r3, [r2, #4]
 800d8a2:	4408      	add	r0, r1
 800d8a4:	6010      	str	r0, [r2, #0]
 800d8a6:	e7da      	b.n	800d85e <_free_r+0x22>
 800d8a8:	d902      	bls.n	800d8b0 <_free_r+0x74>
 800d8aa:	230c      	movs	r3, #12
 800d8ac:	602b      	str	r3, [r5, #0]
 800d8ae:	e7d6      	b.n	800d85e <_free_r+0x22>
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	1821      	adds	r1, r4, r0
 800d8b4:	428b      	cmp	r3, r1
 800d8b6:	bf04      	itt	eq
 800d8b8:	6819      	ldreq	r1, [r3, #0]
 800d8ba:	685b      	ldreq	r3, [r3, #4]
 800d8bc:	6063      	str	r3, [r4, #4]
 800d8be:	bf04      	itt	eq
 800d8c0:	1809      	addeq	r1, r1, r0
 800d8c2:	6021      	streq	r1, [r4, #0]
 800d8c4:	6054      	str	r4, [r2, #4]
 800d8c6:	e7ca      	b.n	800d85e <_free_r+0x22>
 800d8c8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20001b60 	.word	0x20001b60

0800d8d0 <__ascii_mbtowc>:
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	b901      	cbnz	r1, 800d8d6 <__ascii_mbtowc+0x6>
 800d8d4:	a901      	add	r1, sp, #4
 800d8d6:	b142      	cbz	r2, 800d8ea <__ascii_mbtowc+0x1a>
 800d8d8:	b14b      	cbz	r3, 800d8ee <__ascii_mbtowc+0x1e>
 800d8da:	7813      	ldrb	r3, [r2, #0]
 800d8dc:	600b      	str	r3, [r1, #0]
 800d8de:	7812      	ldrb	r2, [r2, #0]
 800d8e0:	1e10      	subs	r0, r2, #0
 800d8e2:	bf18      	it	ne
 800d8e4:	2001      	movne	r0, #1
 800d8e6:	b002      	add	sp, #8
 800d8e8:	4770      	bx	lr
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	e7fb      	b.n	800d8e6 <__ascii_mbtowc+0x16>
 800d8ee:	f06f 0001 	mvn.w	r0, #1
 800d8f2:	e7f8      	b.n	800d8e6 <__ascii_mbtowc+0x16>

0800d8f4 <_malloc_usable_size_r>:
 800d8f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8f8:	1f18      	subs	r0, r3, #4
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	bfbc      	itt	lt
 800d8fe:	580b      	ldrlt	r3, [r1, r0]
 800d900:	18c0      	addlt	r0, r0, r3
 800d902:	4770      	bx	lr

0800d904 <fiprintf>:
 800d904:	b40e      	push	{r1, r2, r3}
 800d906:	b503      	push	{r0, r1, lr}
 800d908:	4601      	mov	r1, r0
 800d90a:	ab03      	add	r3, sp, #12
 800d90c:	4805      	ldr	r0, [pc, #20]	@ (800d924 <fiprintf+0x20>)
 800d90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d912:	6800      	ldr	r0, [r0, #0]
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	f000 f845 	bl	800d9a4 <_vfiprintf_r>
 800d91a:	b002      	add	sp, #8
 800d91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d920:	b003      	add	sp, #12
 800d922:	4770      	bx	lr
 800d924:	20000108 	.word	0x20000108

0800d928 <__ascii_wctomb>:
 800d928:	4603      	mov	r3, r0
 800d92a:	4608      	mov	r0, r1
 800d92c:	b141      	cbz	r1, 800d940 <__ascii_wctomb+0x18>
 800d92e:	2aff      	cmp	r2, #255	@ 0xff
 800d930:	d904      	bls.n	800d93c <__ascii_wctomb+0x14>
 800d932:	228a      	movs	r2, #138	@ 0x8a
 800d934:	601a      	str	r2, [r3, #0]
 800d936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d93a:	4770      	bx	lr
 800d93c:	700a      	strb	r2, [r1, #0]
 800d93e:	2001      	movs	r0, #1
 800d940:	4770      	bx	lr

0800d942 <abort>:
 800d942:	b508      	push	{r3, lr}
 800d944:	2006      	movs	r0, #6
 800d946:	f000 fa85 	bl	800de54 <raise>
 800d94a:	2001      	movs	r0, #1
 800d94c:	f7f4 fb3c 	bl	8001fc8 <_exit>

0800d950 <__sfputc_r>:
 800d950:	6893      	ldr	r3, [r2, #8]
 800d952:	3b01      	subs	r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	b410      	push	{r4}
 800d958:	6093      	str	r3, [r2, #8]
 800d95a:	da08      	bge.n	800d96e <__sfputc_r+0x1e>
 800d95c:	6994      	ldr	r4, [r2, #24]
 800d95e:	42a3      	cmp	r3, r4
 800d960:	db01      	blt.n	800d966 <__sfputc_r+0x16>
 800d962:	290a      	cmp	r1, #10
 800d964:	d103      	bne.n	800d96e <__sfputc_r+0x1e>
 800d966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d96a:	f000 b933 	b.w	800dbd4 <__swbuf_r>
 800d96e:	6813      	ldr	r3, [r2, #0]
 800d970:	1c58      	adds	r0, r3, #1
 800d972:	6010      	str	r0, [r2, #0]
 800d974:	7019      	strb	r1, [r3, #0]
 800d976:	4608      	mov	r0, r1
 800d978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <__sfputs_r>:
 800d97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d980:	4606      	mov	r6, r0
 800d982:	460f      	mov	r7, r1
 800d984:	4614      	mov	r4, r2
 800d986:	18d5      	adds	r5, r2, r3
 800d988:	42ac      	cmp	r4, r5
 800d98a:	d101      	bne.n	800d990 <__sfputs_r+0x12>
 800d98c:	2000      	movs	r0, #0
 800d98e:	e007      	b.n	800d9a0 <__sfputs_r+0x22>
 800d990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d994:	463a      	mov	r2, r7
 800d996:	4630      	mov	r0, r6
 800d998:	f7ff ffda 	bl	800d950 <__sfputc_r>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	d1f3      	bne.n	800d988 <__sfputs_r+0xa>
 800d9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9a4 <_vfiprintf_r>:
 800d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	460d      	mov	r5, r1
 800d9aa:	b09d      	sub	sp, #116	@ 0x74
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	4698      	mov	r8, r3
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	b118      	cbz	r0, 800d9bc <_vfiprintf_r+0x18>
 800d9b4:	6a03      	ldr	r3, [r0, #32]
 800d9b6:	b90b      	cbnz	r3, 800d9bc <_vfiprintf_r+0x18>
 800d9b8:	f7fe f926 	bl	800bc08 <__sinit>
 800d9bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9be:	07d9      	lsls	r1, r3, #31
 800d9c0:	d405      	bmi.n	800d9ce <_vfiprintf_r+0x2a>
 800d9c2:	89ab      	ldrh	r3, [r5, #12]
 800d9c4:	059a      	lsls	r2, r3, #22
 800d9c6:	d402      	bmi.n	800d9ce <_vfiprintf_r+0x2a>
 800d9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9ca:	f7fe f98a 	bl	800bce2 <__retarget_lock_acquire_recursive>
 800d9ce:	89ab      	ldrh	r3, [r5, #12]
 800d9d0:	071b      	lsls	r3, r3, #28
 800d9d2:	d501      	bpl.n	800d9d8 <_vfiprintf_r+0x34>
 800d9d4:	692b      	ldr	r3, [r5, #16]
 800d9d6:	b99b      	cbnz	r3, 800da00 <_vfiprintf_r+0x5c>
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f000 f938 	bl	800dc50 <__swsetup_r>
 800d9e0:	b170      	cbz	r0, 800da00 <_vfiprintf_r+0x5c>
 800d9e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9e4:	07dc      	lsls	r4, r3, #31
 800d9e6:	d504      	bpl.n	800d9f2 <_vfiprintf_r+0x4e>
 800d9e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9ec:	b01d      	add	sp, #116	@ 0x74
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	89ab      	ldrh	r3, [r5, #12]
 800d9f4:	0598      	lsls	r0, r3, #22
 800d9f6:	d4f7      	bmi.n	800d9e8 <_vfiprintf_r+0x44>
 800d9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9fa:	f7fe f973 	bl	800bce4 <__retarget_lock_release_recursive>
 800d9fe:	e7f3      	b.n	800d9e8 <_vfiprintf_r+0x44>
 800da00:	2300      	movs	r3, #0
 800da02:	9309      	str	r3, [sp, #36]	@ 0x24
 800da04:	2320      	movs	r3, #32
 800da06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da0e:	2330      	movs	r3, #48	@ 0x30
 800da10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dbc0 <_vfiprintf_r+0x21c>
 800da14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da18:	f04f 0901 	mov.w	r9, #1
 800da1c:	4623      	mov	r3, r4
 800da1e:	469a      	mov	sl, r3
 800da20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da24:	b10a      	cbz	r2, 800da2a <_vfiprintf_r+0x86>
 800da26:	2a25      	cmp	r2, #37	@ 0x25
 800da28:	d1f9      	bne.n	800da1e <_vfiprintf_r+0x7a>
 800da2a:	ebba 0b04 	subs.w	fp, sl, r4
 800da2e:	d00b      	beq.n	800da48 <_vfiprintf_r+0xa4>
 800da30:	465b      	mov	r3, fp
 800da32:	4622      	mov	r2, r4
 800da34:	4629      	mov	r1, r5
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff ffa1 	bl	800d97e <__sfputs_r>
 800da3c:	3001      	adds	r0, #1
 800da3e:	f000 80a7 	beq.w	800db90 <_vfiprintf_r+0x1ec>
 800da42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da44:	445a      	add	r2, fp
 800da46:	9209      	str	r2, [sp, #36]	@ 0x24
 800da48:	f89a 3000 	ldrb.w	r3, [sl]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 809f 	beq.w	800db90 <_vfiprintf_r+0x1ec>
 800da52:	2300      	movs	r3, #0
 800da54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da5c:	f10a 0a01 	add.w	sl, sl, #1
 800da60:	9304      	str	r3, [sp, #16]
 800da62:	9307      	str	r3, [sp, #28]
 800da64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da68:	931a      	str	r3, [sp, #104]	@ 0x68
 800da6a:	4654      	mov	r4, sl
 800da6c:	2205      	movs	r2, #5
 800da6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da72:	4853      	ldr	r0, [pc, #332]	@ (800dbc0 <_vfiprintf_r+0x21c>)
 800da74:	f7f2 fbb4 	bl	80001e0 <memchr>
 800da78:	9a04      	ldr	r2, [sp, #16]
 800da7a:	b9d8      	cbnz	r0, 800dab4 <_vfiprintf_r+0x110>
 800da7c:	06d1      	lsls	r1, r2, #27
 800da7e:	bf44      	itt	mi
 800da80:	2320      	movmi	r3, #32
 800da82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da86:	0713      	lsls	r3, r2, #28
 800da88:	bf44      	itt	mi
 800da8a:	232b      	movmi	r3, #43	@ 0x2b
 800da8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da90:	f89a 3000 	ldrb.w	r3, [sl]
 800da94:	2b2a      	cmp	r3, #42	@ 0x2a
 800da96:	d015      	beq.n	800dac4 <_vfiprintf_r+0x120>
 800da98:	9a07      	ldr	r2, [sp, #28]
 800da9a:	4654      	mov	r4, sl
 800da9c:	2000      	movs	r0, #0
 800da9e:	f04f 0c0a 	mov.w	ip, #10
 800daa2:	4621      	mov	r1, r4
 800daa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa8:	3b30      	subs	r3, #48	@ 0x30
 800daaa:	2b09      	cmp	r3, #9
 800daac:	d94b      	bls.n	800db46 <_vfiprintf_r+0x1a2>
 800daae:	b1b0      	cbz	r0, 800dade <_vfiprintf_r+0x13a>
 800dab0:	9207      	str	r2, [sp, #28]
 800dab2:	e014      	b.n	800dade <_vfiprintf_r+0x13a>
 800dab4:	eba0 0308 	sub.w	r3, r0, r8
 800dab8:	fa09 f303 	lsl.w	r3, r9, r3
 800dabc:	4313      	orrs	r3, r2
 800dabe:	9304      	str	r3, [sp, #16]
 800dac0:	46a2      	mov	sl, r4
 800dac2:	e7d2      	b.n	800da6a <_vfiprintf_r+0xc6>
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	1d19      	adds	r1, r3, #4
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	9103      	str	r1, [sp, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	bfbb      	ittet	lt
 800dad0:	425b      	neglt	r3, r3
 800dad2:	f042 0202 	orrlt.w	r2, r2, #2
 800dad6:	9307      	strge	r3, [sp, #28]
 800dad8:	9307      	strlt	r3, [sp, #28]
 800dada:	bfb8      	it	lt
 800dadc:	9204      	strlt	r2, [sp, #16]
 800dade:	7823      	ldrb	r3, [r4, #0]
 800dae0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dae2:	d10a      	bne.n	800dafa <_vfiprintf_r+0x156>
 800dae4:	7863      	ldrb	r3, [r4, #1]
 800dae6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dae8:	d132      	bne.n	800db50 <_vfiprintf_r+0x1ac>
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	1d1a      	adds	r2, r3, #4
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	9203      	str	r2, [sp, #12]
 800daf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800daf6:	3402      	adds	r4, #2
 800daf8:	9305      	str	r3, [sp, #20]
 800dafa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dbd0 <_vfiprintf_r+0x22c>
 800dafe:	7821      	ldrb	r1, [r4, #0]
 800db00:	2203      	movs	r2, #3
 800db02:	4650      	mov	r0, sl
 800db04:	f7f2 fb6c 	bl	80001e0 <memchr>
 800db08:	b138      	cbz	r0, 800db1a <_vfiprintf_r+0x176>
 800db0a:	9b04      	ldr	r3, [sp, #16]
 800db0c:	eba0 000a 	sub.w	r0, r0, sl
 800db10:	2240      	movs	r2, #64	@ 0x40
 800db12:	4082      	lsls	r2, r0
 800db14:	4313      	orrs	r3, r2
 800db16:	3401      	adds	r4, #1
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db1e:	4829      	ldr	r0, [pc, #164]	@ (800dbc4 <_vfiprintf_r+0x220>)
 800db20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db24:	2206      	movs	r2, #6
 800db26:	f7f2 fb5b 	bl	80001e0 <memchr>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d03f      	beq.n	800dbae <_vfiprintf_r+0x20a>
 800db2e:	4b26      	ldr	r3, [pc, #152]	@ (800dbc8 <_vfiprintf_r+0x224>)
 800db30:	bb1b      	cbnz	r3, 800db7a <_vfiprintf_r+0x1d6>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	3307      	adds	r3, #7
 800db36:	f023 0307 	bic.w	r3, r3, #7
 800db3a:	3308      	adds	r3, #8
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db40:	443b      	add	r3, r7
 800db42:	9309      	str	r3, [sp, #36]	@ 0x24
 800db44:	e76a      	b.n	800da1c <_vfiprintf_r+0x78>
 800db46:	fb0c 3202 	mla	r2, ip, r2, r3
 800db4a:	460c      	mov	r4, r1
 800db4c:	2001      	movs	r0, #1
 800db4e:	e7a8      	b.n	800daa2 <_vfiprintf_r+0xfe>
 800db50:	2300      	movs	r3, #0
 800db52:	3401      	adds	r4, #1
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	4619      	mov	r1, r3
 800db58:	f04f 0c0a 	mov.w	ip, #10
 800db5c:	4620      	mov	r0, r4
 800db5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db62:	3a30      	subs	r2, #48	@ 0x30
 800db64:	2a09      	cmp	r2, #9
 800db66:	d903      	bls.n	800db70 <_vfiprintf_r+0x1cc>
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d0c6      	beq.n	800dafa <_vfiprintf_r+0x156>
 800db6c:	9105      	str	r1, [sp, #20]
 800db6e:	e7c4      	b.n	800dafa <_vfiprintf_r+0x156>
 800db70:	fb0c 2101 	mla	r1, ip, r1, r2
 800db74:	4604      	mov	r4, r0
 800db76:	2301      	movs	r3, #1
 800db78:	e7f0      	b.n	800db5c <_vfiprintf_r+0x1b8>
 800db7a:	ab03      	add	r3, sp, #12
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	462a      	mov	r2, r5
 800db80:	4b12      	ldr	r3, [pc, #72]	@ (800dbcc <_vfiprintf_r+0x228>)
 800db82:	a904      	add	r1, sp, #16
 800db84:	4630      	mov	r0, r6
 800db86:	f7fd fbdb 	bl	800b340 <_printf_float>
 800db8a:	4607      	mov	r7, r0
 800db8c:	1c78      	adds	r0, r7, #1
 800db8e:	d1d6      	bne.n	800db3e <_vfiprintf_r+0x19a>
 800db90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db92:	07d9      	lsls	r1, r3, #31
 800db94:	d405      	bmi.n	800dba2 <_vfiprintf_r+0x1fe>
 800db96:	89ab      	ldrh	r3, [r5, #12]
 800db98:	059a      	lsls	r2, r3, #22
 800db9a:	d402      	bmi.n	800dba2 <_vfiprintf_r+0x1fe>
 800db9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db9e:	f7fe f8a1 	bl	800bce4 <__retarget_lock_release_recursive>
 800dba2:	89ab      	ldrh	r3, [r5, #12]
 800dba4:	065b      	lsls	r3, r3, #25
 800dba6:	f53f af1f 	bmi.w	800d9e8 <_vfiprintf_r+0x44>
 800dbaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbac:	e71e      	b.n	800d9ec <_vfiprintf_r+0x48>
 800dbae:	ab03      	add	r3, sp, #12
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	4b05      	ldr	r3, [pc, #20]	@ (800dbcc <_vfiprintf_r+0x228>)
 800dbb6:	a904      	add	r1, sp, #16
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f7fd fe59 	bl	800b870 <_printf_i>
 800dbbe:	e7e4      	b.n	800db8a <_vfiprintf_r+0x1e6>
 800dbc0:	0800e109 	.word	0x0800e109
 800dbc4:	0800e113 	.word	0x0800e113
 800dbc8:	0800b341 	.word	0x0800b341
 800dbcc:	0800d97f 	.word	0x0800d97f
 800dbd0:	0800e10f 	.word	0x0800e10f

0800dbd4 <__swbuf_r>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	460e      	mov	r6, r1
 800dbd8:	4614      	mov	r4, r2
 800dbda:	4605      	mov	r5, r0
 800dbdc:	b118      	cbz	r0, 800dbe6 <__swbuf_r+0x12>
 800dbde:	6a03      	ldr	r3, [r0, #32]
 800dbe0:	b90b      	cbnz	r3, 800dbe6 <__swbuf_r+0x12>
 800dbe2:	f7fe f811 	bl	800bc08 <__sinit>
 800dbe6:	69a3      	ldr	r3, [r4, #24]
 800dbe8:	60a3      	str	r3, [r4, #8]
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	071a      	lsls	r2, r3, #28
 800dbee:	d501      	bpl.n	800dbf4 <__swbuf_r+0x20>
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	b943      	cbnz	r3, 800dc06 <__swbuf_r+0x32>
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f000 f82a 	bl	800dc50 <__swsetup_r>
 800dbfc:	b118      	cbz	r0, 800dc06 <__swbuf_r+0x32>
 800dbfe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dc02:	4638      	mov	r0, r7
 800dc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	6922      	ldr	r2, [r4, #16]
 800dc0a:	1a98      	subs	r0, r3, r2
 800dc0c:	6963      	ldr	r3, [r4, #20]
 800dc0e:	b2f6      	uxtb	r6, r6
 800dc10:	4283      	cmp	r3, r0
 800dc12:	4637      	mov	r7, r6
 800dc14:	dc05      	bgt.n	800dc22 <__swbuf_r+0x4e>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f7ff f937 	bl	800ce8c <_fflush_r>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d1ed      	bne.n	800dbfe <__swbuf_r+0x2a>
 800dc22:	68a3      	ldr	r3, [r4, #8]
 800dc24:	3b01      	subs	r3, #1
 800dc26:	60a3      	str	r3, [r4, #8]
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	6022      	str	r2, [r4, #0]
 800dc2e:	701e      	strb	r6, [r3, #0]
 800dc30:	6962      	ldr	r2, [r4, #20]
 800dc32:	1c43      	adds	r3, r0, #1
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d004      	beq.n	800dc42 <__swbuf_r+0x6e>
 800dc38:	89a3      	ldrh	r3, [r4, #12]
 800dc3a:	07db      	lsls	r3, r3, #31
 800dc3c:	d5e1      	bpl.n	800dc02 <__swbuf_r+0x2e>
 800dc3e:	2e0a      	cmp	r6, #10
 800dc40:	d1df      	bne.n	800dc02 <__swbuf_r+0x2e>
 800dc42:	4621      	mov	r1, r4
 800dc44:	4628      	mov	r0, r5
 800dc46:	f7ff f921 	bl	800ce8c <_fflush_r>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d0d9      	beq.n	800dc02 <__swbuf_r+0x2e>
 800dc4e:	e7d6      	b.n	800dbfe <__swbuf_r+0x2a>

0800dc50 <__swsetup_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4b29      	ldr	r3, [pc, #164]	@ (800dcf8 <__swsetup_r+0xa8>)
 800dc54:	4605      	mov	r5, r0
 800dc56:	6818      	ldr	r0, [r3, #0]
 800dc58:	460c      	mov	r4, r1
 800dc5a:	b118      	cbz	r0, 800dc64 <__swsetup_r+0x14>
 800dc5c:	6a03      	ldr	r3, [r0, #32]
 800dc5e:	b90b      	cbnz	r3, 800dc64 <__swsetup_r+0x14>
 800dc60:	f7fd ffd2 	bl	800bc08 <__sinit>
 800dc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc68:	0719      	lsls	r1, r3, #28
 800dc6a:	d422      	bmi.n	800dcb2 <__swsetup_r+0x62>
 800dc6c:	06da      	lsls	r2, r3, #27
 800dc6e:	d407      	bmi.n	800dc80 <__swsetup_r+0x30>
 800dc70:	2209      	movs	r2, #9
 800dc72:	602a      	str	r2, [r5, #0]
 800dc74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc7e:	e033      	b.n	800dce8 <__swsetup_r+0x98>
 800dc80:	0758      	lsls	r0, r3, #29
 800dc82:	d512      	bpl.n	800dcaa <__swsetup_r+0x5a>
 800dc84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc86:	b141      	cbz	r1, 800dc9a <__swsetup_r+0x4a>
 800dc88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc8c:	4299      	cmp	r1, r3
 800dc8e:	d002      	beq.n	800dc96 <__swsetup_r+0x46>
 800dc90:	4628      	mov	r0, r5
 800dc92:	f7ff fdd3 	bl	800d83c <_free_r>
 800dc96:	2300      	movs	r3, #0
 800dc98:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	2300      	movs	r3, #0
 800dca4:	6063      	str	r3, [r4, #4]
 800dca6:	6923      	ldr	r3, [r4, #16]
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	f043 0308 	orr.w	r3, r3, #8
 800dcb0:	81a3      	strh	r3, [r4, #12]
 800dcb2:	6923      	ldr	r3, [r4, #16]
 800dcb4:	b94b      	cbnz	r3, 800dcca <__swsetup_r+0x7a>
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcc0:	d003      	beq.n	800dcca <__swsetup_r+0x7a>
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	f000 f83f 	bl	800dd48 <__smakebuf_r>
 800dcca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcce:	f013 0201 	ands.w	r2, r3, #1
 800dcd2:	d00a      	beq.n	800dcea <__swsetup_r+0x9a>
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	60a2      	str	r2, [r4, #8]
 800dcd8:	6962      	ldr	r2, [r4, #20]
 800dcda:	4252      	negs	r2, r2
 800dcdc:	61a2      	str	r2, [r4, #24]
 800dcde:	6922      	ldr	r2, [r4, #16]
 800dce0:	b942      	cbnz	r2, 800dcf4 <__swsetup_r+0xa4>
 800dce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dce6:	d1c5      	bne.n	800dc74 <__swsetup_r+0x24>
 800dce8:	bd38      	pop	{r3, r4, r5, pc}
 800dcea:	0799      	lsls	r1, r3, #30
 800dcec:	bf58      	it	pl
 800dcee:	6962      	ldrpl	r2, [r4, #20]
 800dcf0:	60a2      	str	r2, [r4, #8]
 800dcf2:	e7f4      	b.n	800dcde <__swsetup_r+0x8e>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e7f7      	b.n	800dce8 <__swsetup_r+0x98>
 800dcf8:	20000108 	.word	0x20000108

0800dcfc <__swhatbuf_r>:
 800dcfc:	b570      	push	{r4, r5, r6, lr}
 800dcfe:	460c      	mov	r4, r1
 800dd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd04:	2900      	cmp	r1, #0
 800dd06:	b096      	sub	sp, #88	@ 0x58
 800dd08:	4615      	mov	r5, r2
 800dd0a:	461e      	mov	r6, r3
 800dd0c:	da0d      	bge.n	800dd2a <__swhatbuf_r+0x2e>
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd14:	f04f 0100 	mov.w	r1, #0
 800dd18:	bf14      	ite	ne
 800dd1a:	2340      	movne	r3, #64	@ 0x40
 800dd1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd20:	2000      	movs	r0, #0
 800dd22:	6031      	str	r1, [r6, #0]
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	b016      	add	sp, #88	@ 0x58
 800dd28:	bd70      	pop	{r4, r5, r6, pc}
 800dd2a:	466a      	mov	r2, sp
 800dd2c:	f000 f848 	bl	800ddc0 <_fstat_r>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	dbec      	blt.n	800dd0e <__swhatbuf_r+0x12>
 800dd34:	9901      	ldr	r1, [sp, #4]
 800dd36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd3e:	4259      	negs	r1, r3
 800dd40:	4159      	adcs	r1, r3
 800dd42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd46:	e7eb      	b.n	800dd20 <__swhatbuf_r+0x24>

0800dd48 <__smakebuf_r>:
 800dd48:	898b      	ldrh	r3, [r1, #12]
 800dd4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd4c:	079d      	lsls	r5, r3, #30
 800dd4e:	4606      	mov	r6, r0
 800dd50:	460c      	mov	r4, r1
 800dd52:	d507      	bpl.n	800dd64 <__smakebuf_r+0x1c>
 800dd54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	6123      	str	r3, [r4, #16]
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	6163      	str	r3, [r4, #20]
 800dd60:	b003      	add	sp, #12
 800dd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd64:	ab01      	add	r3, sp, #4
 800dd66:	466a      	mov	r2, sp
 800dd68:	f7ff ffc8 	bl	800dcfc <__swhatbuf_r>
 800dd6c:	9f00      	ldr	r7, [sp, #0]
 800dd6e:	4605      	mov	r5, r0
 800dd70:	4639      	mov	r1, r7
 800dd72:	4630      	mov	r0, r6
 800dd74:	f7fe ff86 	bl	800cc84 <_malloc_r>
 800dd78:	b948      	cbnz	r0, 800dd8e <__smakebuf_r+0x46>
 800dd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd7e:	059a      	lsls	r2, r3, #22
 800dd80:	d4ee      	bmi.n	800dd60 <__smakebuf_r+0x18>
 800dd82:	f023 0303 	bic.w	r3, r3, #3
 800dd86:	f043 0302 	orr.w	r3, r3, #2
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	e7e2      	b.n	800dd54 <__smakebuf_r+0xc>
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	6020      	str	r0, [r4, #0]
 800dd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd96:	81a3      	strh	r3, [r4, #12]
 800dd98:	9b01      	ldr	r3, [sp, #4]
 800dd9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd9e:	b15b      	cbz	r3, 800ddb8 <__smakebuf_r+0x70>
 800dda0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dda4:	4630      	mov	r0, r6
 800dda6:	f000 f81d 	bl	800dde4 <_isatty_r>
 800ddaa:	b128      	cbz	r0, 800ddb8 <__smakebuf_r+0x70>
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	f023 0303 	bic.w	r3, r3, #3
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	81a3      	strh	r3, [r4, #12]
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	431d      	orrs	r5, r3
 800ddbc:	81a5      	strh	r5, [r4, #12]
 800ddbe:	e7cf      	b.n	800dd60 <__smakebuf_r+0x18>

0800ddc0 <_fstat_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d07      	ldr	r5, [pc, #28]	@ (800dde0 <_fstat_r+0x20>)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	f7f4 f94b 	bl	8002068 <_fstat>
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	d102      	bne.n	800dddc <_fstat_r+0x1c>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	b103      	cbz	r3, 800dddc <_fstat_r+0x1c>
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	20001b64 	.word	0x20001b64

0800dde4 <_isatty_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4d06      	ldr	r5, [pc, #24]	@ (800de00 <_isatty_r+0x1c>)
 800dde8:	2300      	movs	r3, #0
 800ddea:	4604      	mov	r4, r0
 800ddec:	4608      	mov	r0, r1
 800ddee:	602b      	str	r3, [r5, #0]
 800ddf0:	f7f4 f94a 	bl	8002088 <_isatty>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d102      	bne.n	800ddfe <_isatty_r+0x1a>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	b103      	cbz	r3, 800ddfe <_isatty_r+0x1a>
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	20001b64 	.word	0x20001b64

0800de04 <_raise_r>:
 800de04:	291f      	cmp	r1, #31
 800de06:	b538      	push	{r3, r4, r5, lr}
 800de08:	4605      	mov	r5, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	d904      	bls.n	800de18 <_raise_r+0x14>
 800de0e:	2316      	movs	r3, #22
 800de10:	6003      	str	r3, [r0, #0]
 800de12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de1a:	b112      	cbz	r2, 800de22 <_raise_r+0x1e>
 800de1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de20:	b94b      	cbnz	r3, 800de36 <_raise_r+0x32>
 800de22:	4628      	mov	r0, r5
 800de24:	f000 f830 	bl	800de88 <_getpid_r>
 800de28:	4622      	mov	r2, r4
 800de2a:	4601      	mov	r1, r0
 800de2c:	4628      	mov	r0, r5
 800de2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de32:	f000 b817 	b.w	800de64 <_kill_r>
 800de36:	2b01      	cmp	r3, #1
 800de38:	d00a      	beq.n	800de50 <_raise_r+0x4c>
 800de3a:	1c59      	adds	r1, r3, #1
 800de3c:	d103      	bne.n	800de46 <_raise_r+0x42>
 800de3e:	2316      	movs	r3, #22
 800de40:	6003      	str	r3, [r0, #0]
 800de42:	2001      	movs	r0, #1
 800de44:	e7e7      	b.n	800de16 <_raise_r+0x12>
 800de46:	2100      	movs	r1, #0
 800de48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de4c:	4620      	mov	r0, r4
 800de4e:	4798      	blx	r3
 800de50:	2000      	movs	r0, #0
 800de52:	e7e0      	b.n	800de16 <_raise_r+0x12>

0800de54 <raise>:
 800de54:	4b02      	ldr	r3, [pc, #8]	@ (800de60 <raise+0xc>)
 800de56:	4601      	mov	r1, r0
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	f7ff bfd3 	b.w	800de04 <_raise_r>
 800de5e:	bf00      	nop
 800de60:	20000108 	.word	0x20000108

0800de64 <_kill_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d07      	ldr	r5, [pc, #28]	@ (800de84 <_kill_r+0x20>)
 800de68:	2300      	movs	r3, #0
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	4611      	mov	r1, r2
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	f7f4 f899 	bl	8001fa8 <_kill>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d102      	bne.n	800de80 <_kill_r+0x1c>
 800de7a:	682b      	ldr	r3, [r5, #0]
 800de7c:	b103      	cbz	r3, 800de80 <_kill_r+0x1c>
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	bf00      	nop
 800de84:	20001b64 	.word	0x20001b64

0800de88 <_getpid_r>:
 800de88:	f7f4 b886 	b.w	8001f98 <_getpid>

0800de8c <lrintf>:
 800de8c:	ee10 3a10 	vmov	r3, s0
 800de90:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800de94:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 800de98:	281e      	cmp	r0, #30
 800de9a:	b082      	sub	sp, #8
 800de9c:	dc2f      	bgt.n	800defe <lrintf+0x72>
 800de9e:	1c41      	adds	r1, r0, #1
 800dea0:	da02      	bge.n	800dea8 <lrintf+0x1c>
 800dea2:	2000      	movs	r0, #0
 800dea4:	b002      	add	sp, #8
 800dea6:	4770      	bx	lr
 800dea8:	2816      	cmp	r0, #22
 800deaa:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800deae:	dd0a      	ble.n	800dec6 <lrintf+0x3a>
 800deb0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800deb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800deb8:	3a96      	subs	r2, #150	@ 0x96
 800deba:	fa03 f002 	lsl.w	r0, r3, r2
 800debe:	2900      	cmp	r1, #0
 800dec0:	d0f0      	beq.n	800dea4 <lrintf+0x18>
 800dec2:	4240      	negs	r0, r0
 800dec4:	e7ee      	b.n	800dea4 <lrintf+0x18>
 800dec6:	4b10      	ldr	r3, [pc, #64]	@ (800df08 <lrintf+0x7c>)
 800dec8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800decc:	ed93 7a00 	vldr	s14, [r3]
 800ded0:	ee37 0a00 	vadd.f32	s0, s14, s0
 800ded4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ded8:	eddd 7a01 	vldr	s15, [sp, #4]
 800dedc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dee0:	ee17 3a90 	vmov	r3, s15
 800dee4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800dee8:	d0db      	beq.n	800dea2 <lrintf+0x16>
 800deea:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800deee:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800def2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800def6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800defa:	40d8      	lsrs	r0, r3
 800defc:	e7df      	b.n	800debe <lrintf+0x32>
 800defe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800df02:	ee17 0a90 	vmov	r0, s15
 800df06:	e7cd      	b.n	800dea4 <lrintf+0x18>
 800df08:	0800e3b8 	.word	0x0800e3b8

0800df0c <_init>:
 800df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0e:	bf00      	nop
 800df10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df12:	bc08      	pop	{r3}
 800df14:	469e      	mov	lr, r3
 800df16:	4770      	bx	lr

0800df18 <_fini>:
 800df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1a:	bf00      	nop
 800df1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1e:	bc08      	pop	{r3}
 800df20:	469e      	mov	lr, r3
 800df22:	4770      	bx	lr
