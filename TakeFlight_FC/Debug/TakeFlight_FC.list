
TakeFlight_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ac  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006744  08006744  00007744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800676c  0800676c  00008034  2**0
                  CONTENTS
  4 .ARM          00000008  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006774  08006774  00008034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  0800677c  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000038  080067b0  00008038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  080067b0  0000853c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012248  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  0001a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1a  00000000  00000000  0001e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176ef  00000000  00000000  0001ed6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159b1  00000000  00000000  00036459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905d8  00000000  00000000  0004be0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  000dc428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e0ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800672c 	.word	0x0800672c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	0800672c 	.word	0x0800672c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b38:	f000 b96a 	b.w	8000e10 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14e      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b60:	4694      	mov	ip, r2
 8000b62:	458c      	cmp	ip, r1
 8000b64:	4686      	mov	lr, r0
 8000b66:	fab2 f282 	clz	r2, r2
 8000b6a:	d962      	bls.n	8000c32 <__udivmoddi4+0xde>
 8000b6c:	b14a      	cbz	r2, 8000b82 <__udivmoddi4+0x2e>
 8000b6e:	f1c2 0320 	rsb	r3, r2, #32
 8000b72:	4091      	lsls	r1, r2
 8000b74:	fa20 f303 	lsr.w	r3, r0, r3
 8000b78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7c:	4319      	orrs	r1, r3
 8000b7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b86:	fa1f f68c 	uxth.w	r6, ip
 8000b8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b92:	fb07 1114 	mls	r1, r7, r4, r1
 8000b96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b9a:	fb04 f106 	mul.w	r1, r4, r6
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000baa:	f080 8112 	bcs.w	8000dd2 <__udivmoddi4+0x27e>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 810f 	bls.w	8000dd2 <__udivmoddi4+0x27e>
 8000bb4:	3c02      	subs	r4, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb00 f606 	mul.w	r6, r0, r6
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x94>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bda:	f080 80fc 	bcs.w	8000dd6 <__udivmoddi4+0x282>
 8000bde:	429e      	cmp	r6, r3
 8000be0:	f240 80f9 	bls.w	8000dd6 <__udivmoddi4+0x282>
 8000be4:	4463      	add	r3, ip
 8000be6:	3802      	subs	r0, #2
 8000be8:	1b9b      	subs	r3, r3, r6
 8000bea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bee:	2100      	movs	r1, #0
 8000bf0:	b11d      	cbz	r5, 8000bfa <__udivmoddi4+0xa6>
 8000bf2:	40d3      	lsrs	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d905      	bls.n	8000c0e <__udivmoddi4+0xba>
 8000c02:	b10d      	cbz	r5, 8000c08 <__udivmoddi4+0xb4>
 8000c04:	e9c5 0100 	strd	r0, r1, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e7f5      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000c0e:	fab3 f183 	clz	r1, r3
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d146      	bne.n	8000ca4 <__udivmoddi4+0x150>
 8000c16:	42a3      	cmp	r3, r4
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xcc>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f0c0 80f0 	bcc.w	8000e00 <__udivmoddi4+0x2ac>
 8000c20:	1a86      	subs	r6, r0, r2
 8000c22:	eb64 0303 	sbc.w	r3, r4, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d0e6      	beq.n	8000bfa <__udivmoddi4+0xa6>
 8000c2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c30:	e7e3      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	f040 8090 	bne.w	8000d58 <__udivmoddi4+0x204>
 8000c38:	eba1 040c 	sub.w	r4, r1, ip
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa1f f78c 	uxth.w	r7, ip
 8000c44:	2101      	movs	r1, #1
 8000c46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c56:	fb07 f006 	mul.w	r0, r7, r6
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x11c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x11a>
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2b4>
 8000c6e:	4626      	mov	r6, r4
 8000c70:	1a1c      	subs	r4, r3, r0
 8000c72:	fa1f f38e 	uxth.w	r3, lr
 8000c76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb00 f707 	mul.w	r7, r0, r7
 8000c86:	429f      	cmp	r7, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x148>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x146>
 8000c94:	429f      	cmp	r7, r3
 8000c96:	f200 80b0 	bhi.w	8000dfa <__udivmoddi4+0x2a6>
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	1bdb      	subs	r3, r3, r7
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0x9c>
 8000ca4:	f1c1 0620 	rsb	r6, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb8:	ea43 030c 	orr.w	r3, r3, ip
 8000cbc:	40f4      	lsrs	r4, r6
 8000cbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000cc2:	0c38      	lsrs	r0, r7, #16
 8000cc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cdc:	45a1      	cmp	r9, r4
 8000cde:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x1a6>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cea:	f080 8084 	bcs.w	8000df6 <__udivmoddi4+0x2a2>
 8000cee:	45a1      	cmp	r9, r4
 8000cf0:	f240 8081 	bls.w	8000df6 <__udivmoddi4+0x2a2>
 8000cf4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	eba4 0409 	sub.w	r4, r4, r9
 8000cfe:	fa1f f983 	uxth.w	r9, r3
 8000d02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d06:	fb00 4413 	mls	r4, r0, r3, r4
 8000d0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d12:	45a4      	cmp	ip, r4
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x1d2>
 8000d16:	193c      	adds	r4, r7, r4
 8000d18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d1c:	d267      	bcs.n	8000dee <__udivmoddi4+0x29a>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	d965      	bls.n	8000dee <__udivmoddi4+0x29a>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d2e:	eba4 040c 	sub.w	r4, r4, ip
 8000d32:	429c      	cmp	r4, r3
 8000d34:	46ce      	mov	lr, r9
 8000d36:	469c      	mov	ip, r3
 8000d38:	d351      	bcc.n	8000dde <__udivmoddi4+0x28a>
 8000d3a:	d04e      	beq.n	8000dda <__udivmoddi4+0x286>
 8000d3c:	b155      	cbz	r5, 8000d54 <__udivmoddi4+0x200>
 8000d3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d42:	eb64 040c 	sbc.w	r4, r4, ip
 8000d46:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4a:	40cb      	lsrs	r3, r1
 8000d4c:	431e      	orrs	r6, r3
 8000d4e:	40cc      	lsrs	r4, r1
 8000d50:	e9c5 6400 	strd	r6, r4, [r5]
 8000d54:	2100      	movs	r1, #0
 8000d56:	e750      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000d58:	f1c2 0320 	rsb	r3, r2, #32
 8000d5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d64:	fa24 f303 	lsr.w	r3, r4, r3
 8000d68:	4094      	lsls	r4, r2
 8000d6a:	430c      	orrs	r4, r1
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d86:	fb00 f107 	mul.w	r1, r0, r7
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x24c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d96:	d22c      	bcs.n	8000df2 <__udivmoddi4+0x29e>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d92a      	bls.n	8000df2 <__udivmoddi4+0x29e>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4463      	add	r3, ip
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db0:	fb01 f307 	mul.w	r3, r1, r7
 8000db4:	42a3      	cmp	r3, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x276>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000dc0:	d213      	bcs.n	8000dea <__udivmoddi4+0x296>
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	d911      	bls.n	8000dea <__udivmoddi4+0x296>
 8000dc6:	3902      	subs	r1, #2
 8000dc8:	4464      	add	r4, ip
 8000dca:	1ae4      	subs	r4, r4, r3
 8000dcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd0:	e739      	b.n	8000c46 <__udivmoddi4+0xf2>
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	e6f0      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e706      	b.n	8000be8 <__udivmoddi4+0x94>
 8000dda:	45c8      	cmp	r8, r9
 8000ddc:	d2ae      	bcs.n	8000d3c <__udivmoddi4+0x1e8>
 8000dde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000de2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000de6:	3801      	subs	r0, #1
 8000de8:	e7a8      	b.n	8000d3c <__udivmoddi4+0x1e8>
 8000dea:	4631      	mov	r1, r6
 8000dec:	e7ed      	b.n	8000dca <__udivmoddi4+0x276>
 8000dee:	4603      	mov	r3, r0
 8000df0:	e799      	b.n	8000d26 <__udivmoddi4+0x1d2>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e7d4      	b.n	8000da0 <__udivmoddi4+0x24c>
 8000df6:	46d6      	mov	lr, sl
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1a6>
 8000dfa:	4463      	add	r3, ip
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	e74d      	b.n	8000c9c <__udivmoddi4+0x148>
 8000e00:	4606      	mov	r6, r0
 8000e02:	4623      	mov	r3, r4
 8000e04:	4608      	mov	r0, r1
 8000e06:	e70f      	b.n	8000c28 <__udivmoddi4+0xd4>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	e730      	b.n	8000c70 <__udivmoddi4+0x11c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <initPIDController>:

#include "PID_Control.h"

void initPIDController(PIDController_t* PIDController, uint8_t Kp, uint8_t Ki, uint8_t Kd, uint8_t cycle_time_seconds, uint8_t i_limit) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	70fb      	strb	r3, [r7, #3]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70bb      	strb	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	707b      	strb	r3, [r7, #1]
    // Initialize struct with specified settings
    PIDController->Kp = Kp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	701a      	strb	r2, [r3, #0]
    PIDController->Ki = Ki;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	78ba      	ldrb	r2, [r7, #2]
 8000e38:	705a      	strb	r2, [r3, #1]
    PIDController->Kd = Kd;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	787a      	ldrb	r2, [r7, #1]
 8000e3e:	709a      	strb	r2, [r3, #2]
    PIDController->cycle_time_seconds = cycle_time_seconds; // Operation time of system lets set to 250Hz(0.004s)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c3a      	ldrb	r2, [r7, #16]
 8000e44:	70da      	strb	r2, [r3, #3]
    PIDController->i_limit = i_limit;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7d3a      	ldrb	r2, [r7, #20]
 8000e4a:	711a      	strb	r2, [r3, #4]

    // state variables
    PIDController->previous_error = 0.0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    PIDController->previous_i = 0.0;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <calculatePID>:
// Performs PID calculation where the actual and setpoint relative postions are provided and the a throttle output is given in response
float calculatePID(PIDController_t* PIDController, float error) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	ed87 0a00 	vstr	s0, [r7]

    // P Term
    float pTerm = error * PIDController->Kp; 
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e80:	ed97 7a00 	vldr	s14, [r7]
 8000e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e88:	edc7 7a04 	vstr	s15, [r7, #16]
    // I Term
    float iTerm = PIDController->previous_i + (error * PIDController->Ki * PIDController->cycle_time_seconds); 
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e9e:	edd7 7a00 	vldr	s15, [r7]
 8000ea2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	78db      	ldrb	r3, [r3, #3]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eba:	edc7 7a05 	vstr	s15, [r7, #20]
    if ( iTerm > PIDController->i_limit){iTerm = PIDController->i_limit;}
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	dd07      	ble.n	8000ee8 <calculatePID+0x80>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	791b      	ldrb	r3, [r3, #4]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	edc7 7a05 	vstr	s15, [r7, #20]
    if (iTerm < (-1 * PIDController->i_limit)){iTerm = (-1 * PIDController->i_limit);}
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	425b      	negs	r3, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	d508      	bpl.n	8000f16 <calculatePID+0xae>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	425b      	negs	r3, r3
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f12:	edc7 7a05 	vstr	s15, [r7, #20]
    // D Term
    float dTerm = PIDController->Kd * (error - PIDController->previous_error) / PIDController->cycle_time_seconds;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f28:	edd7 6a00 	vldr	s13, [r7]
 8000f2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f44:	edc7 7a03 	vstr	s15, [r7, #12]

    // set state variables for next iteration
    PIDController->previous_error = error;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	609a      	str	r2, [r3, #8]
    PIDController->previous_i = iTerm;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	60da      	str	r2, [r3, #12]

    return pTerm + iTerm + dTerm;
 8000f54:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f64:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f68:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <resetPID>:

// Resets state variables
void resetPID(PIDController_t* PIDController) {
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
    PIDController->previous_error = 0.0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
    PIDController->previous_i = 0.0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_DMA_Init+0x6c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_DMA_Init+0x6c>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_DMA_Init+0x6c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	200c      	movs	r0, #12
 8000fc4:	f002 f8b1 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fc8:	200c      	movs	r0, #12
 8000fca:	f002 f8ca 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200e      	movs	r0, #14
 8000fd4:	f002 f8a9 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fd8:	200e      	movs	r0, #14
 8000fda:	f002 f8c2 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f002 f8a1 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f002 f8ba 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f002 f899 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f002 f8b2 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Function Definitions*/

void dshot_init(dshot_type_e dshot_type) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f895 	bl	8001148 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800101e:	f000 f937 	bl	8001290 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8001022:	f000 f953 	bl	80012cc <dshot_start_pwm>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <dshot_write>:

void dshot_write(uint16_t *motor_value) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f9c6 	bl	80013c8 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800103c:	f000 f9f0 	bl	8001420 <dshot_dma_start>
	dshot_enable_dma_request();
 8001040:	f000 fa26 	bl	8001490 <dshot_enable_dma_request>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <dshot_arm_motors>:

void dshot_arm_motors(uint16_t *motor_value) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	// Arming Sequence for ESC
	for (int i = 0 ; i < 100 ; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e02e      	b.n	80010b8 <dshot_arm_motors+0x6c>
		dshot_write(motor_value);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffe7 	bl	800102e <dshot_write>
		motor_value[0] += i;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	801a      	strh	r2, [r3, #0]
		motor_value[1] += i;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3302      	adds	r3, #2
 8001074:	8819      	ldrh	r1, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	b29a      	uxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3302      	adds	r3, #2
 800107e:	440a      	add	r2, r1
 8001080:	b292      	uxth	r2, r2
 8001082:	801a      	strh	r2, [r3, #0]
		motor_value[2] += i;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	8819      	ldrh	r1, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	440a      	add	r2, r1
 8001094:	b292      	uxth	r2, r2
 8001096:	801a      	strh	r2, [r3, #0]
		motor_value[3] += i;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3306      	adds	r3, #6
 800109c:	8819      	ldrh	r1, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3306      	adds	r3, #6
 80010a6:	440a      	add	r2, r1
 80010a8:	b292      	uxth	r2, r2
 80010aa:	801a      	strh	r2, [r3, #0]
		HAL_Delay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f001 ff3d 	bl	8002f2c <HAL_Delay>
	for (int i = 0 ; i < 100 ; i++) {
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b63      	cmp	r3, #99	@ 0x63
 80010bc:	ddcd      	ble.n	800105a <dshot_arm_motors+0xe>
	}
	// Finishing arming process by setting throttle to 0
	motor_value[0] = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	801a      	strh	r2, [r3, #0]
	motor_value[1] = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3302      	adds	r3, #2
 80010c8:	2200      	movs	r2, #0
 80010ca:	801a      	strh	r2, [r3, #0]
	motor_value[2] = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3304      	adds	r3, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	801a      	strh	r2, [r3, #0]
	motor_value[3] = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3306      	adds	r3, #6
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
	for (int i = 0 ; i < 100 ; i++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	e008      	b.n	80010f4 <dshot_arm_motors+0xa8>
		dshot_write(motor_value);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa3 	bl	800102e <dshot_write>
		HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f001 ff1f 	bl	8002f2c <HAL_Delay>
	for (int i = 0 ; i < 100 ; i++) {
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b63      	cmp	r3, #99	@ 0x63
 80010f8:	ddf3      	ble.n	80010e2 <dshot_arm_motors+0x96>
	}
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <dshot_choose_type>:

/* Static Function Definitions */

static uint32_t dshot_choose_type(dshot_type_e dshot_type) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	switch(dshot_type) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d006      	beq.n	8001122 <dshot_choose_type+0x1e>
 8001114:	2b02      	cmp	r3, #2
 8001116:	dc0a      	bgt.n	800112e <dshot_choose_type+0x2a>
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <dshot_choose_type+0x26>
 800111c:	2b01      	cmp	r3, #1
 800111e:	d002      	beq.n	8001126 <dshot_choose_type+0x22>
 8001120:	e005      	b.n	800112e <dshot_choose_type+0x2a>
		case(DSHOT600):
				return DSHOT600_HZ;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <dshot_choose_type+0x38>)
 8001124:	e004      	b.n	8001130 <dshot_choose_type+0x2c>
		case(DSHOT300):
				return DSHOT300_HZ;
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <dshot_choose_type+0x3c>)
 8001128:	e002      	b.n	8001130 <dshot_choose_type+0x2c>
		case(DSHOT150):
				return DSHOT150_HZ;
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <dshot_choose_type+0x40>)
 800112c:	e000      	b.n	8001130 <dshot_choose_type+0x2c>
		default:
			return 0;
 800112e:	2300      	movs	r3, #0
	}
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	00b71b00 	.word	0x00b71b00
 8001140:	005b8d80 	.word	0x005b8d80
 8001144:	002dc6c0 	.word	0x002dc6c0

08001148 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type) {
 8001148:	b580      	push	{r7, lr}
 800114a:	ed2d 8b02 	vpush	{d8}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as system core clock in stm32f401 CHECK THISSWSSSSSS
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <dshot_set_timer+0xac>)
 8001158:	60fb      	str	r3, [r7, #12]

	// calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ffcc 	bl	8001104 <dshot_choose_type>
 800116c:	ee07 0a90 	vmov	s15, r0
 8001170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001174:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001178:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80011f8 <dshot_set_timer+0xb0>
 800117c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	f005 fa92 	bl	80066ac <lrintf>
 8001188:	4603      	mov	r3, r0
 800118a:	b29b      	uxth	r3, r3
 800118c:	3b01      	subs	r3, #1
 800118e:	817b      	strh	r3, [r7, #10]

	// motor 1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <dshot_set_timer+0xb4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	897a      	ldrh	r2, [r7, #10]
 8001196:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BIT_LENGTH);
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <dshot_set_timer+0xb4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2214      	movs	r2, #20
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <dshot_set_timer+0xb4>)
 80011a2:	2214      	movs	r2, #20
 80011a4:	60da      	str	r2, [r3, #12]

	// motor 2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <dshot_set_timer+0xb8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	897a      	ldrh	r2, [r7, #10]
 80011ac:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BIT_LENGTH);
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <dshot_set_timer+0xb8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2214      	movs	r2, #20
 80011b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <dshot_set_timer+0xb8>)
 80011b8:	2214      	movs	r2, #20
 80011ba:	60da      	str	r2, [r3, #12]

	// motor 3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <dshot_set_timer+0xb4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	897a      	ldrh	r2, [r7, #10]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BIT_LENGTH);
 80011c4:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <dshot_set_timer+0xb4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2214      	movs	r2, #20
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <dshot_set_timer+0xb4>)
 80011ce:	2214      	movs	r2, #20
 80011d0:	60da      	str	r2, [r3, #12]

	// motor 4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <dshot_set_timer+0xb8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	897a      	ldrh	r2, [r7, #10]
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BIT_LENGTH);
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <dshot_set_timer+0xb8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2214      	movs	r2, #20
 80011e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <dshot_set_timer+0xb8>)
 80011e4:	2214      	movs	r2, #20
 80011e6:	60da      	str	r2, [r3, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	ecbd 8b02 	vpop	{d8}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	05f5e100 	.word	0x05f5e100
 80011f8:	3c23d70a 	.word	0x3c23d70a
 80011fc:	200002e0 	.word	0x200002e0
 8001200:	20000298 	.word	0x20000298

08001204 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma) {
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef*)hdma)->Parent;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001210:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d108      	bne.n	800122e <dshot_dma_tc_callback+0x2a>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800122a:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
	}
	else if (hdma == htim->hdma[TIM_DMA_CC4]) {
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 800122c:	e02a      	b.n	8001284 <dshot_dma_tc_callback+0x80>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	d108      	bne.n	800124a <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001246:	60da      	str	r2, [r3, #12]
}
 8001248:	e01c      	b.n	8001284 <dshot_dma_tc_callback+0x80>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	d108      	bne.n	8001266 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001262:	60da      	str	r2, [r3, #12]
}
 8001264:	e00e      	b.n	8001284 <dshot_dma_tc_callback+0x80>
	else if (hdma == htim->hdma[TIM_DMA_CC4]) {
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d107      	bne.n	8001284 <dshot_dma_tc_callback+0x80>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001282:	60da      	str	r2, [r3, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function() {
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <dshot_put_tc_callback_function+0x30>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <dshot_put_tc_callback_function+0x34>)
 800129a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <dshot_put_tc_callback_function+0x38>)
 800129e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a0:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <dshot_put_tc_callback_function+0x34>)
 80012a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <dshot_put_tc_callback_function+0x30>)
 80012a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <dshot_put_tc_callback_function+0x34>)
 80012aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <dshot_put_tc_callback_function+0x38>)
 80012ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <dshot_put_tc_callback_function+0x34>)
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200002e0 	.word	0x200002e0
 80012c4:	08001205 	.word	0x08001205
 80012c8:	20000298 	.word	0x20000298

080012cc <dshot_start_pwm>:

static void dshot_start_pwm() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	// Start the timer channel
	// Enabling/disabling dma request can restart a new cycle without PWM start/stop
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 80012d0:	210c      	movs	r1, #12
 80012d2:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <dshot_start_pwm+0x28>)
 80012d4:	f004 f988 	bl	80055e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 80012d8:	2108      	movs	r1, #8
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <dshot_start_pwm+0x2c>)
 80012dc:	f004 f984 	bl	80055e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 80012e0:	2104      	movs	r1, #4
 80012e2:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <dshot_start_pwm+0x28>)
 80012e4:	f004 f980 	bl	80055e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 80012e8:	2100      	movs	r1, #0
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <dshot_start_pwm+0x2c>)
 80012ec:	f004 f97c 	bl	80055e8 <HAL_TIM_PWM_Start>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002e0 	.word	0x200002e0
 80012f8:	20000298 	.word	0x20000298

080012fc <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value) {
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8001306:	2300      	movs	r3, #0
 8001308:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b21a      	sxth	r2, r3
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 800131e:	893b      	ldrh	r3, [r7, #8]
 8001320:	613b      	str	r3, [r7, #16]

	for (int i = 0 ; i < 3 ; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e009      	b.n	800133c <dshot_prepare_packet+0x40>
		csum ^= csum_data; // xor data by nybbles
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4053      	eors	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) {
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b02      	cmp	r3, #2
 8001340:	ddf2      	ble.n	8001328 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800134a:	893b      	ldrh	r3, [r7, #8]
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b29a      	uxth	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	813b      	strh	r3, [r7, #8]

	return packet;
 8001358:	893b      	ldrh	r3, [r7, #8]
}
 800135a:	4618      	mov	r0, r3
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ffc1 	bl	80012fc <dshot_prepare_packet>
 800137a:	4603      	mov	r3, r0
 800137c:	81fb      	strh	r3, [r7, #14]

	for (int i = 0 ; i < 16 ; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	e011      	b.n	80013a8 <dshot_prepare_dmabuffer+0x42>
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8001384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001388:	2b00      	cmp	r3, #0
 800138a:	da01      	bge.n	8001390 <dshot_prepare_dmabuffer+0x2a>
 800138c:	220e      	movs	r2, #14
 800138e:	e000      	b.n	8001392 <dshot_prepare_dmabuffer+0x2c>
 8001390:	2207      	movs	r2, #7
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	440b      	add	r3, r1
 800139a:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	81fb      	strh	r3, [r7, #14]
	for (int i = 0 ; i < 16 ; i++) {
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	ddea      	ble.n	8001384 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3340      	adds	r3, #64	@ 0x40
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3344      	adds	r3, #68	@ 0x44
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <dshot_prepare_dmabuffer_all+0x48>)
 80013d8:	f7ff ffc5 	bl	8001366 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3302      	adds	r3, #2
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	@ (8001414 <dshot_prepare_dmabuffer_all+0x4c>)
 80013e6:	f7ff ffbe 	bl	8001366 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4809      	ldr	r0, [pc, #36]	@ (8001418 <dshot_prepare_dmabuffer_all+0x50>)
 80013f4:	f7ff ffb7 	bl	8001366 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3306      	adds	r3, #6
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	4806      	ldr	r0, [pc, #24]	@ (800141c <dshot_prepare_dmabuffer_all+0x54>)
 8001402:	f7ff ffb0 	bl	8001366 <dshot_prepare_dmabuffer>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000054 	.word	0x20000054
 8001414:	2000009c 	.word	0x2000009c
 8001418:	200000e4 	.word	0x200000e4
 800141c:	2000012c 	.word	0x2000012c

08001420 <dshot_dma_start>:

static void dshot_dma_start() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <dshot_dma_start+0x58>)
 8001426:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001428:	4914      	ldr	r1, [pc, #80]	@ (800147c <dshot_dma_start+0x5c>)
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <dshot_dma_start+0x58>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3340      	adds	r3, #64	@ 0x40
 8001430:	461a      	mov	r2, r3
 8001432:	2312      	movs	r3, #18
 8001434:	f001 ff5e 	bl	80032f4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <dshot_dma_start+0x60>)
 800143a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800143c:	4911      	ldr	r1, [pc, #68]	@ (8001484 <dshot_dma_start+0x64>)
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <dshot_dma_start+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	333c      	adds	r3, #60	@ 0x3c
 8001444:	461a      	mov	r2, r3
 8001446:	2312      	movs	r3, #18
 8001448:	f001 ff54 	bl	80032f4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <dshot_dma_start+0x58>)
 800144e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001450:	490d      	ldr	r1, [pc, #52]	@ (8001488 <dshot_dma_start+0x68>)
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <dshot_dma_start+0x58>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3338      	adds	r3, #56	@ 0x38
 8001458:	461a      	mov	r2, r3
 800145a:	2312      	movs	r3, #18
 800145c:	f001 ff4a 	bl	80032f4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <dshot_dma_start+0x60>)
 8001462:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001464:	4909      	ldr	r1, [pc, #36]	@ (800148c <dshot_dma_start+0x6c>)
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <dshot_dma_start+0x60>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3334      	adds	r3, #52	@ 0x34
 800146c:	461a      	mov	r2, r3
 800146e:	2312      	movs	r3, #18
 8001470:	f001 ff40 	bl	80032f4 <HAL_DMA_Start_IT>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002e0 	.word	0x200002e0
 800147c:	20000054 	.word	0x20000054
 8001480:	20000298 	.word	0x20000298
 8001484:	2000009c 	.word	0x2000009c
 8001488:	200000e4 	.word	0x200000e4
 800148c:	2000012c 	.word	0x2000012c

08001490 <dshot_enable_dma_request>:

static void dshot_enable_dma_request() {
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <dshot_enable_dma_request+0x50>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <dshot_enable_dma_request+0x50>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014a2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <dshot_enable_dma_request+0x54>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <dshot_enable_dma_request+0x54>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014b2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC2);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <dshot_enable_dma_request+0x50>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <dshot_enable_dma_request+0x50>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80014c2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC1);
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <dshot_enable_dma_request+0x54>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <dshot_enable_dma_request+0x54>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014d2:	60da      	str	r2, [r3, #12]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200002e0 	.word	0x200002e0
 80014e4:	20000298 	.word	0x20000298

080014e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_GPIO_Init+0x9c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_GPIO_Init+0x9c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_GPIO_Init+0x9c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <MX_GPIO_Init+0xa0>)
 800155a:	f002 fb11 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800155e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_GPIO_Init+0xa0>)
 8001578:	f002 f97e 	bl	8003878 <HAL_GPIO_Init>

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020800 	.word	0x40020800

0800158c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_I2C1_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <MX_I2C1_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_I2C1_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015ca:	f002 faf3 	bl	8003bb4 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f001 f87c 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000174 	.word	0x20000174
 80015e0:	40005400 	.word	0x40005400
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_I2C_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12b      	bne.n	8001662 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001626:	23c0      	movs	r3, #192	@ 0xc0
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001636:	2304      	movs	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <HAL_I2C_MspInit+0x8c>)
 8001642:	f002 f919 	bl	8003878 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40005400 	.word	0x40005400
 8001670:	40023800 	.word	0x40023800
 8001674:	40020400 	.word	0x40020400

08001678 <normalize>:

/*
 *  Scales value to specified range
 *  Note: Channel outputs on transmitter have been adjusted to reflect the passed values to the function from normalized_data
 */
static double normalize(double value, double old_min, double old_max, double new_min, double new_max) {
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001682:	ed87 1b06 	vstr	d1, [r7, #24]
 8001686:	ed87 2b04 	vstr	d2, [r7, #16]
 800168a:	ed87 3b02 	vstr	d3, [r7, #8]
 800168e:	ed87 4b00 	vstr	d4, [r7]
    return ((double)(value - old_min) * (new_max - new_min) / (double)(old_max - old_min)) + new_min;
 8001692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001696:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800169a:	f7fe fda1 	bl	80001e0 <__aeabi_dsub>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4614      	mov	r4, r2
 80016a4:	461d      	mov	r5, r3
 80016a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ae:	f7fe fd97 	bl	80001e0 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe ff49 	bl	8000550 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4614      	mov	r4, r2
 80016c4:	461d      	mov	r5, r3
 80016c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ce:	f7fe fd87 	bl	80001e0 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7ff f863 	bl	80007a4 <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ea:	f7fe fd7b 	bl	80001e4 <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80016f6:	eeb0 0a47 	vmov.f32	s0, s14
 80016fa:	eef0 0a67 	vmov.f32	s1, s15
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	0000      	movs	r0, r0
	...

08001708 <normalize_data>:

static void normalize_data(uint16_t* channels, ibus_rx_t* ibus_rx_struct_ptr) {
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	// state is only set to -1 in process_iBus_data for now, but might make an alg to verify valeus
	float sum = 0;
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
	/* normalize joystick values to be within -1.0 and 1.0 for pitch/roll/yaw and 0.0 to 1.0 for throttle */
	ibus_rx_struct_ptr->ch1 = normalize(channels[0], 4000, 56000, -1.0, 1.0), sum += ibus_rx_struct_ptr->ch1;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fe9d 	bl	800045c <__aeabi_ui2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ed9f 4bb4 	vldr	d4, [pc, #720]	@ 80019f8 <normalize_data+0x2f0>
 800172a:	ed9f 3bb5 	vldr	d3, [pc, #724]	@ 8001a00 <normalize_data+0x2f8>
 800172e:	ed9f 2bb6 	vldr	d2, [pc, #728]	@ 8001a08 <normalize_data+0x300>
 8001732:	ed9f 1bb7 	vldr	d1, [pc, #732]	@ 8001a10 <normalize_data+0x308>
 8001736:	ec43 2b10 	vmov	d0, r2, r3
 800173a:	f7ff ff9d 	bl	8001678 <normalize>
 800173e:	eeb0 7a40 	vmov.f32	s14, s0
 8001742:	eef0 7a60 	vmov.f32	s15, s1
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	ed83 7b02 	vstr	d7, [r3, #8]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7fe fea7 	bl	80004a0 <__aeabi_f2d>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001758:	f7fe fd44 	bl	80001e4 <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff f98e 	bl	8000a84 <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch2 = normalize(channels[1], 4000, 56000, -1.0, 1.0) * -1, sum += ibus_rx_struct_ptr->ch2;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3302      	adds	r3, #2
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe72 	bl	800045c <__aeabi_ui2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	ed9f 4b9e 	vldr	d4, [pc, #632]	@ 80019f8 <normalize_data+0x2f0>
 8001780:	ed9f 3b9f 	vldr	d3, [pc, #636]	@ 8001a00 <normalize_data+0x2f8>
 8001784:	ed9f 2ba0 	vldr	d2, [pc, #640]	@ 8001a08 <normalize_data+0x300>
 8001788:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 8001a10 <normalize_data+0x308>
 800178c:	ec43 2b10 	vmov	d0, r2, r3
 8001790:	f7ff ff72 	bl	8001678 <normalize>
 8001794:	ec53 2b10 	vmov	r2, r3, d0
 8001798:	4614      	mov	r4, r2
 800179a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	e9c3 4504 	strd	r4, r5, [r3, #16]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7fe fe7b 	bl	80004a0 <__aeabi_f2d>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017b0:	f7fe fd18 	bl	80001e4 <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f962 	bl	8000a84 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch3 = normalize(channels[2], 4800, 56000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch3;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe46 	bl	800045c <__aeabi_ui2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	ed9f 4b88 	vldr	d4, [pc, #544]	@ 80019f8 <normalize_data+0x2f0>
 80017d8:	ed9f 3b8f 	vldr	d3, [pc, #572]	@ 8001a18 <normalize_data+0x310>
 80017dc:	ed9f 2b8a 	vldr	d2, [pc, #552]	@ 8001a08 <normalize_data+0x300>
 80017e0:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8001a20 <normalize_data+0x318>
 80017e4:	ec43 2b10 	vmov	d0, r2, r3
 80017e8:	f7ff ff46 	bl	8001678 <normalize>
 80017ec:	eeb0 7a40 	vmov.f32	s14, s0
 80017f0:	eef0 7a60 	vmov.f32	s15, s1
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	ed83 7b06 	vstr	d7, [r3, #24]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7fe fe50 	bl	80004a0 <__aeabi_f2d>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001806:	f7fe fced 	bl	80001e4 <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f937 	bl	8000a84 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch4 = normalize(channels[3], 4000, 56000, -1.0, 1.0), sum += ibus_rx_struct_ptr->ch4;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3306      	adds	r3, #6
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe1b 	bl	800045c <__aeabi_ui2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ed9f 4b73 	vldr	d4, [pc, #460]	@ 80019f8 <normalize_data+0x2f0>
 800182e:	ed9f 3b74 	vldr	d3, [pc, #464]	@ 8001a00 <normalize_data+0x2f8>
 8001832:	ed9f 2b75 	vldr	d2, [pc, #468]	@ 8001a08 <normalize_data+0x300>
 8001836:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 8001a10 <normalize_data+0x308>
 800183a:	ec43 2b10 	vmov	d0, r2, r3
 800183e:	f7ff ff1b 	bl	8001678 <normalize>
 8001842:	eeb0 7a40 	vmov.f32	s14, s0
 8001846:	eef0 7a60 	vmov.f32	s15, s1
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	ed83 7b08 	vstr	d7, [r3, #32]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7fe fe25 	bl	80004a0 <__aeabi_f2d>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800185c:	f7fe fcc2 	bl	80001e4 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f90c 	bl	8000a84 <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

	/* normalize switch values to be between 0.0 and 1.0 */
	ibus_rx_struct_ptr->ch5 = normalize(channels[4], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch5;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3308      	adds	r3, #8
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fdf0 	bl	800045c <__aeabi_ui2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	ed9f 4b5d 	vldr	d4, [pc, #372]	@ 80019f8 <normalize_data+0x2f0>
 8001884:	ed9f 3b64 	vldr	d3, [pc, #400]	@ 8001a18 <normalize_data+0x310>
 8001888:	ed9f 2b67 	vldr	d2, [pc, #412]	@ 8001a28 <normalize_data+0x320>
 800188c:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8001a30 <normalize_data+0x328>
 8001890:	ec43 2b10 	vmov	d0, r2, r3
 8001894:	f7ff fef0 	bl	8001678 <normalize>
 8001898:	eeb0 7a40 	vmov.f32	s14, s0
 800189c:	eef0 7a60 	vmov.f32	s15, s1
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7fe fdfa 	bl	80004a0 <__aeabi_f2d>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018b2:	f7fe fc97 	bl	80001e4 <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f8e1 	bl	8000a84 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch6 = normalize(channels[5], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch6;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	330a      	adds	r3, #10
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fdc5 	bl	800045c <__aeabi_ui2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	ed9f 4b48 	vldr	d4, [pc, #288]	@ 80019f8 <normalize_data+0x2f0>
 80018da:	ed9f 3b4f 	vldr	d3, [pc, #316]	@ 8001a18 <normalize_data+0x310>
 80018de:	ed9f 2b52 	vldr	d2, [pc, #328]	@ 8001a28 <normalize_data+0x320>
 80018e2:	ed9f 1b53 	vldr	d1, [pc, #332]	@ 8001a30 <normalize_data+0x328>
 80018e6:	ec43 2b10 	vmov	d0, r2, r3
 80018ea:	f7ff fec5 	bl	8001678 <normalize>
 80018ee:	eeb0 7a40 	vmov.f32	s14, s0
 80018f2:	eef0 7a60 	vmov.f32	s15, s1
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7fe fdcf 	bl	80004a0 <__aeabi_f2d>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001908:	f7fe fc6c 	bl	80001e4 <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f8b6 	bl	8000a84 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch7 = normalize(channels[6], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch7;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	330c      	adds	r3, #12
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fd9a 	bl	800045c <__aeabi_ui2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	ed9f 4b32 	vldr	d4, [pc, #200]	@ 80019f8 <normalize_data+0x2f0>
 8001930:	ed9f 3b39 	vldr	d3, [pc, #228]	@ 8001a18 <normalize_data+0x310>
 8001934:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 8001a28 <normalize_data+0x320>
 8001938:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8001a30 <normalize_data+0x328>
 800193c:	ec43 2b10 	vmov	d0, r2, r3
 8001940:	f7ff fe9a 	bl	8001678 <normalize>
 8001944:	eeb0 7a40 	vmov.f32	s14, s0
 8001948:	eef0 7a60 	vmov.f32	s15, s1
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7fe fda4 	bl	80004a0 <__aeabi_f2d>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800195e:	f7fe fc41 	bl	80001e4 <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f88b 	bl	8000a84 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]
	ibus_rx_struct_ptr->ch8 = normalize(channels[7], 55000, 58000, 0.0, 1.0), sum += ibus_rx_struct_ptr->ch8;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	330e      	adds	r3, #14
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd6f 	bl	800045c <__aeabi_ui2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ed9f 4b1d 	vldr	d4, [pc, #116]	@ 80019f8 <normalize_data+0x2f0>
 8001986:	ed9f 3b24 	vldr	d3, [pc, #144]	@ 8001a18 <normalize_data+0x310>
 800198a:	ed9f 2b27 	vldr	d2, [pc, #156]	@ 8001a28 <normalize_data+0x320>
 800198e:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001a30 <normalize_data+0x328>
 8001992:	ec43 2b10 	vmov	d0, r2, r3
 8001996:	f7ff fe6f 	bl	8001678 <normalize>
 800199a:	eeb0 7a40 	vmov.f32	s14, s0
 800199e:	eef0 7a60 	vmov.f32	s15, s1
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7fe fd79 	bl	80004a0 <__aeabi_f2d>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80019b4:	f7fe fc16 	bl	80001e4 <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f860 	bl	8000a84 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]

	// Update Ibus Rx state
	(ibus_rx_struct_ptr->chsum != sum) ? (ibus_rx_struct_ptr->state = 1), (ibus_rx_struct_ptr->chsum = sum) : (ibus_rx_struct_ptr->state = 0);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80019ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d006      	beq.n	80019ea <normalize_data+0x2e2>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80019e8:	e002      	b.n	80019f0 <normalize_data+0x2e8>
	(ibus_rx_struct_ptr->chsum != sum) ? (ibus_rx_struct_ptr->state = 1), (ibus_rx_struct_ptr->chsum = sum) : (ibus_rx_struct_ptr->state = 0);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}
 80019f8:	00000000 	.word	0x00000000
 80019fc:	3ff00000 	.word	0x3ff00000
 8001a00:	00000000 	.word	0x00000000
 8001a04:	bff00000 	.word	0xbff00000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40eb5800 	.word	0x40eb5800
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40af4000 	.word	0x40af4000
	...
 8001a24:	40b2c000 	.word	0x40b2c000
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40ec5200 	.word	0x40ec5200
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40eadb00 	.word	0x40eadb00

08001a38 <process_iBus_data>:
}
#endif /* IBUS_DBUG */

/* Functions */

void process_iBus_data(uint8_t *data, ibus_rx_t* ibus_rx_struct_ptr) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    uint16_t channels[14];
    uint16_t checksum = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	857b      	strh	r3, [r7, #42]	@ 0x2a
    received_checksum = (uint16_t)(((uint16_t)data[30] << 8) | data[31]);

    if (checksum == received_checksum) {
#endif /* CHECKSUM */
    	// decode buffer packets
        for (int i = 0; i < 14; i++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a4a:	e01a      	b.n	8001a82 <process_iBus_data+0x4a>
        	channels[i] = (uint16_t)(((uint16_t)data[2 * i + 3] << 8) | data[2 * i + 2]);
 8001a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	3303      	adds	r3, #3
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	3302      	adds	r3, #2
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	440b      	add	r3, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	3330      	adds	r3, #48	@ 0x30
 8001a76:	443b      	add	r3, r7
 8001a78:	f823 2c24 	strh.w	r2, [r3, #-36]
        for (int i = 0; i < 14; i++) {
 8001a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7e:	3301      	adds	r3, #1
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	2b0d      	cmp	r3, #13
 8001a86:	dde1      	ble.n	8001a4c <process_iBus_data+0x14>
        }
        // format and store channel data
        normalize_data(channels, ibus_rx_struct_ptr);
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe3a 	bl	8001708 <normalize_data>
    } else {
        // Handle checksum error
    	debug_ibus_packets(data);
    }
#endif
}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	@ 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <read_accel>:
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

/* Static Functions */

static void read_accel(accel* drone_accel) {
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[6];
	// read 6 bytes of data starting from ACCEL_XOUT_H Register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data, 6, 1000);
 8001aa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2306      	movs	r3, #6
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	223b      	movs	r2, #59	@ 0x3b
 8001ab8:	21d0      	movs	r1, #208	@ 0xd0
 8001aba:	4845      	ldr	r0, [pc, #276]	@ (8001bd0 <read_accel+0x134>)
 8001abc:	f002 fab8 	bl	8004030 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 8001ac0:	7a3b      	ldrb	r3, [r7, #8]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	7a7b      	ldrb	r3, [r7, #9]
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <read_accel+0x138>)
 8001ad0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 8001ad2:	7abb      	ldrb	r3, [r7, #10]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <read_accel+0x13c>)
 8001ae2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <read_accel+0x140>)
 8001af4:	801a      	strh	r2, [r3, #0]

	// convert raw values into g's and store in accel struct
	drone_accel->x = (Accel_X_RAW / 16384.0) - drone_accel->x_error;
 8001af6:	4b37      	ldr	r3, [pc, #220]	@ (8001bd4 <read_accel+0x138>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fcbd 	bl	800047c <__aeabi_i2d>
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <read_accel+0x144>)
 8001b08:	f7fe fe4c 	bl	80007a4 <__aeabi_ddiv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4614      	mov	r4, r2
 8001b12:	461d      	mov	r5, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fcc1 	bl	80004a0 <__aeabi_f2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fb5b 	bl	80001e0 <__aeabi_dsub>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffa7 	bl	8000a84 <__aeabi_d2f>
 8001b36:	4602      	mov	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	601a      	str	r2, [r3, #0]
	drone_accel->y = (Accel_Y_RAW / 16384.0) - drone_accel->y_error;
 8001b3c:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <read_accel+0x13c>)
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc9a 	bl	800047c <__aeabi_i2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <read_accel+0x144>)
 8001b4e:	f7fe fe29 	bl	80007a4 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc9e 	bl	80004a0 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fb38 	bl	80001e0 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7fe ff84 	bl	8000a84 <__aeabi_d2f>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	605a      	str	r2, [r3, #4]
	drone_accel->z = (Accel_Z_RAW / 16384.0) - drone_accel->z_error;
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <read_accel+0x140>)
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fc77 	bl	800047c <__aeabi_i2d>
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <read_accel+0x144>)
 8001b94:	f7fe fe06 	bl	80007a4 <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc7b 	bl	80004a0 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fb15 	bl	80001e0 <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe ff61 	bl	8000a84 <__aeabi_d2f>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	20000174 	.word	0x20000174
 8001bd4:	200001c8 	.word	0x200001c8
 8001bd8:	200001ca 	.word	0x200001ca
 8001bdc:	200001cc 	.word	0x200001cc
 8001be0:	40d00000 	.word	0x40d00000
 8001be4:	00000000 	.word	0x00000000

08001be8 <read_gyro>:

static void read_gyro(gyro* drone_gyro) {
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af04      	add	r7, sp, #16
 8001bee:	6078      	str	r0, [r7, #4]
	uint8_t rec_data[6];
	// read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data, 6, 1000);
 8001bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	2243      	movs	r2, #67	@ 0x43
 8001c04:	21d0      	movs	r1, #208	@ 0xd0
 8001c06:	4848      	ldr	r0, [pc, #288]	@ (8001d28 <read_gyro+0x140>)
 8001c08:	f002 fa12 	bl	8004030 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 8001c0c:	7a3b      	ldrb	r3, [r7, #8]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	7a7b      	ldrb	r3, [r7, #9]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <read_gyro+0x144>)
 8001c1c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 8001c1e:	7abb      	ldrb	r3, [r7, #10]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	4b40      	ldr	r3, [pc, #256]	@ (8001d30 <read_gyro+0x148>)
 8001c2e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	7b7b      	ldrb	r3, [r7, #13]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <read_gyro+0x14c>)
 8001c40:	801a      	strh	r2, [r3, #0]

	// convert raw values into degrees per second (dps) and store in gyro struct
	drone_gyro->x = (Gyro_X_RAW / 131.0) - drone_gyro->x_error;
 8001c42:	4b3a      	ldr	r3, [pc, #232]	@ (8001d2c <read_gyro+0x144>)
 8001c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc17 	bl	800047c <__aeabi_i2d>
 8001c4e:	a334      	add	r3, pc, #208	@ (adr r3, 8001d20 <read_gyro+0x138>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fda6 	bl	80007a4 <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	461d      	mov	r5, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc1b 	bl	80004a0 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fab5 	bl	80001e0 <__aeabi_dsub>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff01 	bl	8000a84 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
	drone_gyro->y = (Gyro_Y_RAW / 131.0) - drone_gyro->y_error;
 8001c88:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <read_gyro+0x148>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fbf4 	bl	800047c <__aeabi_i2d>
 8001c94:	a322      	add	r3, pc, #136	@ (adr r3, 8001d20 <read_gyro+0x138>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fd83 	bl	80007a4 <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbf8 	bl	80004a0 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fa92 	bl	80001e0 <__aeabi_dsub>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe fede 	bl	8000a84 <__aeabi_d2f>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	605a      	str	r2, [r3, #4]
	drone_gyro->z = (Gyro_Z_RAW / 131.0) - drone_gyro->z_error;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <read_gyro+0x14c>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fbd1 	bl	800047c <__aeabi_i2d>
 8001cda:	a311      	add	r3, pc, #68	@ (adr r3, 8001d20 <read_gyro+0x138>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fd60 	bl	80007a4 <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fbd5 	bl	80004a0 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fa6f 	bl	80001e0 <__aeabi_dsub>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe febb 	bl	8000a84 <__aeabi_d2f>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	f3af 8000 	nop.w
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40606000 	.word	0x40606000
 8001d28:	20000174 	.word	0x20000174
 8001d2c:	200001ce 	.word	0x200001ce
 8001d30:	200001d0 	.word	0x200001d0
 8001d34:	200001d2 	.word	0x200001d2

08001d38 <init_mpu6050>:

/* Functions */
bool init_mpu6050() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	2301      	movs	r3, #1
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	2275      	movs	r2, #117	@ 0x75
 8001d50:	21d0      	movs	r1, #208	@ 0xd0
 8001d52:	4823      	ldr	r0, [pc, #140]	@ (8001de0 <init_mpu6050+0xa8>)
 8001d54:	f002 f96c 	bl	8004030 <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b68      	cmp	r3, #104	@ 0x68
 8001d5c:	d13b      	bne.n	8001dd6 <init_mpu6050+0x9e>
		// wake up sensor using power management register
		data = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MNGMT_1_REG, 1, &data, 1, 1000);
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	1dbb      	adds	r3, r7, #6
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	226b      	movs	r2, #107	@ 0x6b
 8001d74:	21d0      	movs	r1, #208	@ 0xd0
 8001d76:	481a      	ldr	r0, [pc, #104]	@ (8001de0 <init_mpu6050+0xa8>)
 8001d78:	f002 f860 	bl	8003e3c <HAL_I2C_Mem_Write>

		// set data rate of 1Khz by writing to SMPLRT_DIV register
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001d7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	1dbb      	adds	r3, r7, #6
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2219      	movs	r2, #25
 8001d8e:	21d0      	movs	r1, #208	@ 0xd0
 8001d90:	4813      	ldr	r0, [pc, #76]	@ (8001de0 <init_mpu6050+0xa8>)
 8001d92:	f002 f853 	bl	8003e3c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> 2g
		data = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2301      	movs	r3, #1
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	1dbb      	adds	r3, r7, #6
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2301      	movs	r3, #1
 8001daa:	221c      	movs	r2, #28
 8001dac:	21d0      	movs	r1, #208	@ 0xd0
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <init_mpu6050+0xa8>)
 8001db0:	f002 f844 	bl	8003e3c <HAL_I2C_Mem_Write>

		// Set Gyroscopes configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> 250 deg/s
		data = 0x00;
 8001db4:	2300      	movs	r3, #0
 8001db6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001db8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	221b      	movs	r2, #27
 8001dca:	21d0      	movs	r1, #208	@ 0xd0
 8001dcc:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <init_mpu6050+0xa8>)
 8001dce:	f002 f835 	bl	8003e3c <HAL_I2C_Mem_Write>

		return true;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <init_mpu6050+0xa0>
	}

	return false;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000174 	.word	0x20000174

08001de4 <read_mpu6050>:

void read_mpu6050(mpu* drone_mpu) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	read_accel(drone_mpu->mpu_accel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe53 	bl	8001a9c <read_accel>
	read_gyro(drone_mpu->mpu_gyro);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fef4 	bl	8001be8 <read_gyro>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <calibrate_mpu6050>:

void calibrate_mpu6050(mpu* drone_mpu) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	// accumulative error variables
	float accel_x_errors = 0.0;
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
	float accel_y_errors = 0.0;
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
	float accel_z_errors = 0.0;
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]

	float gyro_x_errors = 0.0;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
	float gyro_y_errors = 0.0;
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
	float gyro_z_errors = 0.0;
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]

	HAL_Delay(3000); // wait 3 seconds for IMU to normalize
 8001e34:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e38:	f001 f878 	bl	8002f2c <HAL_Delay>
	// every 5 ms pull the mpu values when drone is at rest for 100ms
	for (uint8_t i = 0 ; i < 20 ; i++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e044      	b.n	8001ecc <calibrate_mpu6050+0xc4>

		read_mpu6050(drone_mpu);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffce 	bl	8001de4 <read_mpu6050>

		accel_x_errors += drone_mpu->mpu_accel->x;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		accel_y_errors += drone_mpu->mpu_accel->y;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a08 	vstr	s15, [r7, #32]
		accel_z_errors += drone_mpu->mpu_accel->z;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e78:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e80:	edc7 7a07 	vstr	s15, [r7, #28]

		gyro_x_errors += drone_mpu->mpu_gyro->x;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e94:	edc7 7a06 	vstr	s15, [r7, #24]
		gyro_y_errors += drone_mpu->mpu_gyro->y;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ea0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	edc7 7a05 	vstr	s15, [r7, #20]
		gyro_z_errors += drone_mpu->mpu_gyro->z;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	edc7 7a04 	vstr	s15, [r7, #16]

		HAL_Delay(5);
 8001ec0:	2005      	movs	r0, #5
 8001ec2:	f001 f833 	bl	8002f2c <HAL_Delay>
	for (uint8_t i = 0 ; i < 20 ; i++) {
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2b13      	cmp	r3, #19
 8001ed0:	d9b7      	bls.n	8001e42 <calibrate_mpu6050+0x3a>
	}

	// find average error for each variable
	drone_mpu->mpu_accel->x_error = accel_x_errors / 20;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001eda:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee2:	edc3 7a03 	vstr	s15, [r3, #12]
	drone_mpu->mpu_accel->y_error = accel_y_errors / 20;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eee:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef6:	edc3 7a04 	vstr	s15, [r3, #16]
	drone_mpu->mpu_accel->z_error = accel_z_errors / 20;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f02:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0a:	edc3 7a05 	vstr	s15, [r3, #20]

	drone_mpu->mpu_gyro->x_error = gyro_x_errors / 20;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f16:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1e:	edc3 7a03 	vstr	s15, [r3, #12]
	drone_mpu->mpu_gyro->y_error = gyro_y_errors / 20;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f2a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	edc3 7a04 	vstr	s15, [r3, #16]
	drone_mpu->mpu_gyro->z_error = gyro_z_errors / 20;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f3e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f46:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	@ 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <signal_init_fail>:

void signal_init_fail() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	for (uint8_t i = 0 ; i < 30 ; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	e012      	b.n	8001f86 <signal_init_fail+0x32>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // set LED ON
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f66:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <signal_init_fail+0x44>)
 8001f68:	f001 fe0a 	bl	8003b80 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001f6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f70:	f000 ffdc 	bl	8002f2c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // set LED OFF
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f7a:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <signal_init_fail+0x44>)
 8001f7c:	f001 fe00 	bl	8003b80 <HAL_GPIO_WritePin>
	for (uint8_t i = 0 ; i < 30 ; i++) {
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	3301      	adds	r3, #1
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b1d      	cmp	r3, #29
 8001f8a:	d9e9      	bls.n	8001f60 <signal_init_fail+0xc>
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40020800 	.word	0x40020800

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b5b0      	push	{r4, r5, r7, lr}
 8001f9e:	b0a6      	sub	sp, #152	@ 0x98
 8001fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa2:	f000 ff51 	bl	8002e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa6:	f000 fb29 	bl	80025fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001faa:	f7ff fa9d 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fae:	f7fe fff5 	bl	8000f9c <MX_DMA_Init>
  MX_TIM2_Init();
 8001fb2:	f000 fc25 	bl	8002800 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001fb6:	f000 fc87 	bl	80028c8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001fba:	f7ff fae7 	bl	800158c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001fbe:	f000 fea7 	bl	8002d10 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8001fc2:	f000 fce5 	bl	8002990 <MX_TIM10_Init>

	  /********************* State 1 : Wakeup *********************/

	  // Wait for user to turn SWA on

	  while (wakeup == false) {
 8001fc6:	e02f      	b.n	8002028 <main+0x8c>
		  // check if new data has been received from Controller
		  if(HAL_UART_Receive(&huart1, iBus_rx_buffer, IBUS_BUFFER_SIZE, 1000) == HAL_OK) {
 8001fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fcc:	2220      	movs	r2, #32
 8001fce:	4931      	ldr	r1, [pc, #196]	@ (8002094 <main+0xf8>)
 8001fd0:	4831      	ldr	r0, [pc, #196]	@ (8002098 <main+0xfc>)
 8001fd2:	f003 ff77 	bl	8005ec4 <HAL_UART_Receive>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d115      	bne.n	8002008 <main+0x6c>
			  // Check if the received data is a valid iBus packet
			  if (iBus_rx_buffer[1] == 0x20) {
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <main+0xf8>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d111      	bne.n	8002008 <main+0x6c>
				  // Process the iBus packet
				  process_iBus_data(iBus_rx_buffer, &ibus_rx_struct);
 8001fe4:	492d      	ldr	r1, [pc, #180]	@ (800209c <main+0x100>)
 8001fe6:	482b      	ldr	r0, [pc, #172]	@ (8002094 <main+0xf8>)
 8001fe8:	f7ff fd26 	bl	8001a38 <process_iBus_data>

				  // check if SWA was turned on
				  if (ibus_rx_struct.ch5 > 0.5) {wakeup = true;}
 8001fec:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <main+0x100>)
 8001fee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <main+0x104>)
 8001ff8:	f7fe fd3a 	bl	8000a70 <__aeabi_dcmpgt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <main+0x6c>
 8002002:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <main+0x108>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // set LED ON
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800200e:	4826      	ldr	r0, [pc, #152]	@ (80020a8 <main+0x10c>)
 8002010:	f001 fdb6 	bl	8003b80 <HAL_GPIO_WritePin>
		  HAL_Delay(1000); // 1 second timeout
 8002014:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002018:	f000 ff88 	bl	8002f2c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // set LED OFF
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002022:	4821      	ldr	r0, [pc, #132]	@ (80020a8 <main+0x10c>)
 8002024:	f001 fdac 	bl	8003b80 <HAL_GPIO_WritePin>
	  while (wakeup == false) {
 8002028:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <main+0x108>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f083 0301 	eor.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1c8      	bne.n	8001fc8 <main+0x2c>

	  /********************* State 2 : Prepare Drone for Flight *********************/


	  // Initialize MPU 6050
	  while (init_mpu6050() != true) {
 8002036:	e01c      	b.n	8002072 <main+0xd6>
		  tries++;
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <main+0x110>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <main+0x110>)
 8002042:	701a      	strb	r2, [r3, #0]
		  if (tries >= 30) {
 8002044:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <main+0x110>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b1d      	cmp	r3, #29
 800204a:	d902      	bls.n	8002052 <main+0xb6>
			  signal_init_fail();
 800204c:	f7ff ff82 	bl	8001f54 <signal_init_fail>
			  break;
 8002050:	e017      	b.n	8002082 <main+0xe6>
		  }
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // set LED ON
 8002052:	2201      	movs	r2, #1
 8002054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002058:	4813      	ldr	r0, [pc, #76]	@ (80020a8 <main+0x10c>)
 800205a:	f001 fd91 	bl	8003b80 <HAL_GPIO_WritePin>
		  HAL_Delay(1000); // 1 second timeout
 800205e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002062:	f000 ff63 	bl	8002f2c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // set LED OFF
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800206c:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <main+0x10c>)
 800206e:	f001 fd87 	bl	8003b80 <HAL_GPIO_WritePin>
	  while (init_mpu6050() != true) {
 8002072:	f7ff fe61 	bl	8001d38 <init_mpu6050>
 8002076:	4603      	mov	r3, r0
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1da      	bne.n	8002038 <main+0x9c>
	  }
	  // failed to init MPU6050 retry setup
	  if (tries >= 30) {
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <main+0x110>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b1d      	cmp	r3, #29
 8002088:	d912      	bls.n	80020b0 <main+0x114>
		  tries = 0;
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <main+0x110>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
		  continue;
 8002090:	e2a0      	b.n	80025d4 <main+0x638>
 8002092:	bf00      	nop
 8002094:	200001d4 	.word	0x200001d4
 8002098:	200004f0 	.word	0x200004f0
 800209c:	200001f8 	.word	0x200001f8
 80020a0:	3fe00000 	.word	0x3fe00000
 80020a4:	20000258 	.word	0x20000258
 80020a8:	40020800 	.word	0x40020800
 80020ac:	2000028c 	.word	0x2000028c
	  }

	  // calibrate mpu6050
	  calibrate_mpu6050(&drone_mpu);
 80020b0:	4893      	ldr	r0, [pc, #588]	@ (8002300 <main+0x364>)
 80020b2:	f7ff fea9 	bl	8001e08 <calibrate_mpu6050>

	  // Initialize and arm motors
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // set LED OFF
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020bc:	4891      	ldr	r0, [pc, #580]	@ (8002304 <main+0x368>)
 80020be:	f001 fd5f 	bl	8003b80 <HAL_GPIO_WritePin>
	  dshot_init(DSHOT600);
 80020c2:	2002      	movs	r0, #2
 80020c4:	f7fe ffa2 	bl	800100c <dshot_init>
	  HAL_Delay(500);
 80020c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020cc:	f000 ff2e 	bl	8002f2c <HAL_Delay>
	  dshot_arm_motors(motor_values);
 80020d0:	488d      	ldr	r0, [pc, #564]	@ (8002308 <main+0x36c>)
 80020d2:	f7fe ffbb 	bl	800104c <dshot_arm_motors>

	  /********************* State 3: PID Control *********************/

	  // constraints calculations / state variables

	  float cycle_time_seconds = 1.0 / target_cycle_hz;
 80020d6:	4b8d      	ldr	r3, [pc, #564]	@ (800230c <main+0x370>)
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	  uint16_t cycle_time_us = (uint16_t)(cycle_time_seconds * 1000000);
 80020e8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80020ec:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002310 <main+0x374>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f8:	ee17 3a90 	vmov	r3, s15
 80020fc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	  double max_throttle = throttle_govenor;
 8002100:	4b84      	ldr	r3, [pc, #528]	@ (8002314 <main+0x378>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	  double throttle_range = max_throttle - throttle_idle;
 800210a:	4b83      	ldr	r3, [pc, #524]	@ (8002318 <main+0x37c>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002114:	f7fe f864 	bl	80001e0 <__aeabi_dsub>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	  // PID inits
	  PIDController_t roll_PID = {0};
 8002120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
	  PIDController_t pitch_PID = {0};
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
	  PIDController_t yaw_PID = {0};
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]

	  initPIDController(&roll_PID, pid_roll_kp, pid_roll_ki, pid_roll_kd, cycle_time_seconds, i_limit);
 800214a:	eddf 7a74 	vldr	s15, [pc, #464]	@ 800231c <main+0x380>
 800214e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002152:	edc7 7a01 	vstr	s15, [r7, #4]
 8002156:	793b      	ldrb	r3, [r7, #4]
 8002158:	b2d9      	uxtb	r1, r3
 800215a:	eddf 7a71 	vldr	s15, [pc, #452]	@ 8002320 <main+0x384>
 800215e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002162:	edc7 7a01 	vstr	s15, [r7, #4]
 8002166:	793b      	ldrb	r3, [r7, #4]
 8002168:	b2dc      	uxtb	r4, r3
 800216a:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 8002324 <main+0x388>
 800216e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002172:	edc7 7a01 	vstr	s15, [r7, #4]
 8002176:	793b      	ldrb	r3, [r7, #4]
 8002178:	b2dd      	uxtb	r5, r3
 800217a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800217e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002182:	edc7 7a01 	vstr	s15, [r7, #4]
 8002186:	793b      	ldrb	r3, [r7, #4]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8002328 <main+0x38c>
 800218e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002192:	edc7 7a01 	vstr	s15, [r7, #4]
 8002196:	793a      	ldrb	r2, [r7, #4]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800219e:	9201      	str	r2, [sp, #4]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	462b      	mov	r3, r5
 80021a4:	4622      	mov	r2, r4
 80021a6:	f7fe fe35 	bl	8000e14 <initPIDController>
	  initPIDController(&pitch_PID, pid_pitch_kp, pid_pitch_ki, pid_pitch_kd, cycle_time_seconds, i_limit);
 80021aa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800231c <main+0x380>
 80021ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80021b6:	793b      	ldrb	r3, [r7, #4]
 80021b8:	b2d9      	uxtb	r1, r3
 80021ba:	eddf 7a59 	vldr	s15, [pc, #356]	@ 8002320 <main+0x384>
 80021be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80021c6:	793b      	ldrb	r3, [r7, #4]
 80021c8:	b2dc      	uxtb	r4, r3
 80021ca:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8002324 <main+0x388>
 80021ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80021d6:	793b      	ldrb	r3, [r7, #4]
 80021d8:	b2dd      	uxtb	r5, r3
 80021da:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80021de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80021e6:	793b      	ldrb	r3, [r7, #4]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8002328 <main+0x38c>
 80021ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80021f6:	793a      	ldrb	r2, [r7, #4]
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f107 001c 	add.w	r0, r7, #28
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	462b      	mov	r3, r5
 8002204:	4622      	mov	r2, r4
 8002206:	f7fe fe05 	bl	8000e14 <initPIDController>
	  initPIDController(&yaw_PID, pid_yaw_kp, pid_yaw_ki, pid_yaw_kd, cycle_time_seconds, i_limit);
 800220a:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800232c <main+0x390>
 800220e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002212:	edc7 7a01 	vstr	s15, [r7, #4]
 8002216:	793b      	ldrb	r3, [r7, #4]
 8002218:	b2d9      	uxtb	r1, r3
 800221a:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8002330 <main+0x394>
 800221e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002222:	edc7 7a01 	vstr	s15, [r7, #4]
 8002226:	793b      	ldrb	r3, [r7, #4]
 8002228:	b2dc      	uxtb	r4, r3
 800222a:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8002334 <main+0x398>
 800222e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002232:	edc7 7a01 	vstr	s15, [r7, #4]
 8002236:	793b      	ldrb	r3, [r7, #4]
 8002238:	b2dd      	uxtb	r5, r3
 800223a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800223e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002242:	edc7 7a01 	vstr	s15, [r7, #4]
 8002246:	793b      	ldrb	r3, [r7, #4]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8002328 <main+0x38c>
 800224e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002252:	edc7 7a01 	vstr	s15, [r7, #4]
 8002256:	793a      	ldrb	r2, [r7, #4]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f107 000c 	add.w	r0, r7, #12
 800225e:	9201      	str	r2, [sp, #4]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	462b      	mov	r3, r5
 8002264:	4622      	mov	r2, r4
 8002266:	f7fe fdd5 	bl	8000e14 <initPIDController>

	  // PID Controller Timing
	  uint16_t start_time;
	  uint16_t end_time;

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // set LED ON
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002270:	4824      	ldr	r0, [pc, #144]	@ (8002304 <main+0x368>)
 8002272:	f001 fc85 	bl	8003b80 <HAL_GPIO_WritePin>

	  while(1) { // Change to check if SWA or SWC is pressed

		  // Mark start time (us)
		  start_time = __HAL_TIM_GET_COUNTER(&htim10);
 8002276:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <main+0x39c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

		  // read IMU data
		  read_mpu6050(&drone_mpu);
 8002280:	481f      	ldr	r0, [pc, #124]	@ (8002300 <main+0x364>)
 8002282:	f7ff fdaf 	bl	8001de4 <read_mpu6050>

		  // read control commands from RC
		  if(HAL_UART_Receive(&huart1, iBus_rx_buffer, IBUS_BUFFER_SIZE, 1000) == HAL_OK) {
 8002286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228a:	2220      	movs	r2, #32
 800228c:	492b      	ldr	r1, [pc, #172]	@ (800233c <main+0x3a0>)
 800228e:	482c      	ldr	r0, [pc, #176]	@ (8002340 <main+0x3a4>)
 8002290:	f003 fe18 	bl	8005ec4 <HAL_UART_Receive>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <main+0x30e>
			  // Check if the received data is a valid iBus packet
			  if (iBus_rx_buffer[1] == 0x20) {
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <main+0x3a0>)
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d103      	bne.n	80022aa <main+0x30e>
				  // Process iBus packet
				  process_iBus_data(iBus_rx_buffer, &ibus_rx_struct);
 80022a2:	4928      	ldr	r1, [pc, #160]	@ (8002344 <main+0x3a8>)
 80022a4:	4825      	ldr	r0, [pc, #148]	@ (800233c <main+0x3a0>)
 80022a6:	f7ff fbc7 	bl	8001a38 <process_iBus_data>
			  }
		  }

		  // Adjust motor outputs
		  if (ibus_rx_struct.ch5 < 0.5) {
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <main+0x3a8>)
 80022ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <main+0x3ac>)
 80022b6:	f7fe fbbd 	bl	8000a34 <__aeabi_dcmplt>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d045      	beq.n	800234c <main+0x3b0>
			  // turn motors off
			  motor_values[0] = 0;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <main+0x36c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	801a      	strh	r2, [r3, #0]
			  motor_values[1] = 0;
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <main+0x36c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	805a      	strh	r2, [r3, #2]
			  motor_values[2] = 0;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <main+0x36c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	809a      	strh	r2, [r3, #4]
			  motor_values[3] = 0;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <main+0x36c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	80da      	strh	r2, [r3, #6]
			  dshot_write(motor_values);
 80022d8:	480b      	ldr	r0, [pc, #44]	@ (8002308 <main+0x36c>)
 80022da:	f7fe fea8 	bl	800102e <dshot_write>

			  // reset PID's
			  resetPID(&roll_PID);
 80022de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fe47 	bl	8000f76 <resetPID>
			  resetPID(&pitch_PID);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fe42 	bl	8000f76 <resetPID>
			  resetPID(&yaw_PID);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fe3d 	bl	8000f76 <resetPID>
 80022fc:	e142      	b.n	8002584 <main+0x5e8>
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000
 8002304:	40020800 	.word	0x40020800
 8002308:	20000290 	.word	0x20000290
 800230c:	20000014 	.word	0x20000014
 8002310:	49742400 	.word	0x49742400
 8002314:	20000020 	.word	0x20000020
 8002318:	20000018 	.word	0x20000018
 800231c:	39e53052 	.word	0x39e53052
 8002320:	3b271de7 	.word	0x3b271de7
 8002324:	37d7b504 	.word	0x37d7b504
 8002328:	43160000 	.word	0x43160000
 800232c:	3ae0b1ed 	.word	0x3ae0b1ed
 8002330:	3b60b1e0 	.word	0x3b60b1e0
 8002334:	00000000 	.word	0x00000000
 8002338:	20000328 	.word	0x20000328
 800233c:	200001d4 	.word	0x200001d4
 8002340:	200004f0 	.word	0x200004f0
 8002344:	200001f8 	.word	0x200001f8
 8002348:	3fe00000 	.word	0x3fe00000

		  } else {

			  // calculate the adjusted desired throttle ( above idle, below govenor, linearly scaled)
			  float adj_throttle = throttle_idle + (throttle_range * ibus_rx_struct.ch3);
 800234c:	4ba2      	ldr	r3, [pc, #648]	@ (80025d8 <main+0x63c>)
 800234e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002352:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002356:	f7fe f8fb 	bl	8000550 <__aeabi_dmul>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	4b9e      	ldr	r3, [pc, #632]	@ (80025dc <main+0x640>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fd ff3c 	bl	80001e4 <__adddf3>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fb86 	bl	8000a84 <__aeabi_d2f>
 8002378:	4603      	mov	r3, r0
 800237a:	66bb      	str	r3, [r7, #104]	@ 0x68

			  // calculate errors - difference between the actual rates and set rates
			  float error_rate_roll = (ibus_rx_struct.ch1 * max_rate_roll) - drone_mpu.mpu_gyro->x;
 800237c:	4b96      	ldr	r3, [pc, #600]	@ (80025d8 <main+0x63c>)
 800237e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002382:	4b97      	ldr	r3, [pc, #604]	@ (80025e0 <main+0x644>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f88a 	bl	80004a0 <__aeabi_f2d>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4620      	mov	r0, r4
 8002392:	4629      	mov	r1, r5
 8002394:	f7fe f8dc 	bl	8000550 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4b90      	ldr	r3, [pc, #576]	@ (80025e4 <main+0x648>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f87a 	bl	80004a0 <__aeabi_f2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff14 	bl	80001e0 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fb60 	bl	8000a84 <__aeabi_d2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	667b      	str	r3, [r7, #100]	@ 0x64
			  float error_rate_pitch = (ibus_rx_struct.ch2 * max_rate_pitch) - drone_mpu.mpu_gyro->y;
 80023c8:	4b83      	ldr	r3, [pc, #524]	@ (80025d8 <main+0x63c>)
 80023ca:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80023ce:	4b86      	ldr	r3, [pc, #536]	@ (80025e8 <main+0x64c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f864 	bl	80004a0 <__aeabi_f2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4620      	mov	r0, r4
 80023de:	4629      	mov	r1, r5
 80023e0:	f7fe f8b6 	bl	8000550 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4614      	mov	r4, r2
 80023ea:	461d      	mov	r5, r3
 80023ec:	4b7d      	ldr	r3, [pc, #500]	@ (80025e4 <main+0x648>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f854 	bl	80004a0 <__aeabi_f2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fd feee 	bl	80001e0 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fb3a 	bl	8000a84 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	663b      	str	r3, [r7, #96]	@ 0x60
			  float error_rate_yaw = (ibus_rx_struct.ch4 * max_rate_yaw) - drone_mpu.mpu_gyro->z;
 8002414:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <main+0x63c>)
 8002416:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800241a:	4b74      	ldr	r3, [pc, #464]	@ (80025ec <main+0x650>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f83e 	bl	80004a0 <__aeabi_f2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4620      	mov	r0, r4
 800242a:	4629      	mov	r1, r5
 800242c:	f7fe f890 	bl	8000550 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <main+0x648>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f82e 	bl	80004a0 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd fec8 	bl	80001e0 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fb14 	bl	8000a84 <__aeabi_d2f>
 800245c:	4603      	mov	r3, r0
 800245e:	65fb      	str	r3, [r7, #92]	@ 0x5c

			  // PID calculations
			  float pid_roll = calculatePID(&roll_PID, error_rate_roll);
 8002460:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002464:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fcfd 	bl	8000e68 <calculatePID>
 800246e:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
			  float pid_pitch = calculatePID(&pitch_PID, error_rate_pitch);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcf4 	bl	8000e68 <calculatePID>
 8002480:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
			  float pid_yaw = calculatePID(&yaw_PID, error_rate_yaw);
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fceb 	bl	8000e68 <calculatePID>
 8002492:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50

			  // calculate final throttle values
			  float t1 = adj_throttle + pid_pitch + pid_roll - pid_yaw;
 8002496:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800249a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800249e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80024a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024aa:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80024ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			  float t2 = adj_throttle + pid_pitch - pid_roll + pid_yaw;
 80024b6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80024ba:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80024be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80024c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ca:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
			  float t3 = adj_throttle - pid_pitch + pid_roll + pid_yaw;
 80024d6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80024da:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80024de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024e2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80024e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ea:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80024ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			  float t4 = adj_throttle - pid_pitch - pid_roll - pid_yaw;
 80024f6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80024fa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80024fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002502:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800250e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002512:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

			  // Write throttle values to motor ******** IDK WHAT MOTORS CORRESPOND TO WHAT RIGHT NOW ********
			  motor_values[0] = (uint16_t)(t1 * 2000);
 8002516:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800251a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80025f0 <main+0x654>
 800251e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <main+0x658>)
 800252e:	801a      	strh	r2, [r3, #0]
			  motor_values[1] = (uint16_t)(t2 * 2000);
 8002530:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002534:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80025f0 <main+0x654>
 8002538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002540:	ee17 3a90 	vmov	r3, s15
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <main+0x658>)
 8002548:	805a      	strh	r2, [r3, #2]
			  motor_values[2] = (uint16_t)(t3 * 2000);
 800254a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800254e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80025f0 <main+0x654>
 8002552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255a:	ee17 3a90 	vmov	r3, s15
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <main+0x658>)
 8002562:	809a      	strh	r2, [r3, #4]
			  motor_values[3] = (uint16_t)(t4 * 2000);
 8002564:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002568:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80025f0 <main+0x654>
 800256c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002574:	ee17 3a90 	vmov	r3, s15
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <main+0x658>)
 800257c:	80da      	strh	r2, [r3, #6]
			  dshot_write(motor_values);
 800257e:	481d      	ldr	r0, [pc, #116]	@ (80025f4 <main+0x658>)
 8002580:	f7fe fd55 	bl	800102e <dshot_write>
		  }

		  // Mark end time (us)
		  end_time = __HAL_TIM_GET_COUNTER(&htim10);
 8002584:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <main+0x65c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

		  // wait before continuing to achieve desired system frequency
		  uint16_t elapsed_time = end_time - start_time;
 800258c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800258e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		  if (elapsed_time < cycle_time_us) {
 8002596:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002598:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800259c:	429a      	cmp	r2, r3
 800259e:	f4bf ae6a 	bcs.w	8002276 <main+0x2da>
			  // run empty clock cycles given 84MHz system clock
			  uint16_t burn_clock_cycles = (cycle_time_us - elapsed_time) * 84;
 80025a2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 80025a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	0052      	lsls	r2, r2, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	461a      	mov	r2, r3
 80025b4:	00d2      	lsls	r2, r2, #3
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
			  for ( ; burn_clock_cycles > 0 ; burn_clock_cycles--){}
 80025be:	e004      	b.n	80025ca <main+0x62e>
 80025c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80025c4:	3b01      	subs	r3, #1
 80025c6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80025ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f6      	bne.n	80025c0 <main+0x624>
	  while(1) { // Change to check if SWA or SWC is pressed
 80025d2:	e650      	b.n	8002276 <main+0x2da>
  {
 80025d4:	e4f7      	b.n	8001fc6 <main+0x2a>
 80025d6:	bf00      	nop
 80025d8:	200001f8 	.word	0x200001f8
 80025dc:	20000018 	.word	0x20000018
 80025e0:	20000008 	.word	0x20000008
 80025e4:	20000000 	.word	0x20000000
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	20000010 	.word	0x20000010
 80025f0:	44fa0000 	.word	0x44fa0000
 80025f4:	20000290 	.word	0x20000290
 80025f8:	20000328 	.word	0x20000328

080025fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b094      	sub	sp, #80	@ 0x50
 8002600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002602:	f107 0320 	add.w	r3, r7, #32
 8002606:	2230      	movs	r2, #48	@ 0x30
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f004 f822 	bl	8006654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <SystemClock_Config+0xcc>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <SystemClock_Config+0xcc>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002630:	4b25      	ldr	r3, [pc, #148]	@ (80026c8 <SystemClock_Config+0xcc>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <SystemClock_Config+0xd0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002648:	4a20      	ldr	r2, [pc, #128]	@ (80026cc <SystemClock_Config+0xd0>)
 800264a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <SystemClock_Config+0xd0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800265c:	2302      	movs	r3, #2
 800265e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002660:	2301      	movs	r3, #1
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002664:	2310      	movs	r3, #16
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002668:	2302      	movs	r3, #2
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002670:	2308      	movs	r3, #8
 8002672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002674:	2354      	movs	r3, #84	@ 0x54
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002678:	2302      	movs	r3, #2
 800267a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800267c:	2304      	movs	r3, #4
 800267e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002680:	f107 0320 	add.w	r3, r7, #32
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fab9 	bl	8004bfc <HAL_RCC_OscConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002690:	f000 f81e 	bl	80026d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002694:	230f      	movs	r3, #15
 8002696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002698:	2302      	movs	r3, #2
 800269a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2102      	movs	r1, #2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fd1b 	bl	80050ec <HAL_RCC_ClockConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80026bc:	f000 f808 	bl	80026d0 <Error_Handler>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3750      	adds	r7, #80	@ 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000

080026d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d4:	b672      	cpsid	i
}
 80026d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <Error_Handler+0x8>

080026dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002728 <HAL_MspInit+0x4c>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	4a08      	ldr	r2, [pc, #32]	@ (8002728 <HAL_MspInit+0x4c>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	@ 0x40
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800

0800272c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <NMI_Handler+0x4>

08002734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <MemManage_Handler+0x4>

08002744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <BusFault_Handler+0x4>

0800274c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <UsageFault_Handler+0x4>

08002754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002782:	f000 fbb3 	bl	8002eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <DMA1_Stream1_IRQHandler+0x10>)
 8002792:	f000 fe07 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200003d0 	.word	0x200003d0

080027a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80027a4:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <DMA1_Stream3_IRQHandler+0x10>)
 80027a6:	f000 fdfd 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000490 	.word	0x20000490

080027b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <DMA1_Stream4_IRQHandler+0x10>)
 80027ba:	f000 fdf3 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000430 	.word	0x20000430

080027c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80027cc:	4802      	ldr	r0, [pc, #8]	@ (80027d8 <DMA1_Stream5_IRQHandler+0x10>)
 80027ce:	f000 fde9 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000370 	.word	0x20000370

080027dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <SystemInit+0x20>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <SystemInit+0x20>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	@ 0x28
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002822:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 8002824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800282a:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002836:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800283c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800284a:	481e      	ldr	r0, [pc, #120]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 800284c:	f002 fe7d 	bl	800554a <HAL_TIM_PWM_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002856:	f7ff ff3b 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	4619      	mov	r1, r3
 8002868:	4816      	ldr	r0, [pc, #88]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 800286a:	f003 fa6d 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002874:	f7ff ff2c 	bl	80026d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002878:	2360      	movs	r3, #96	@ 0x60
 800287a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	4619      	mov	r1, r3
 800288e:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 8002890:	f002 ff5a 	bl	8005748 <HAL_TIM_PWM_ConfigChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800289a:	f7ff ff19 	bl	80026d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2208      	movs	r2, #8
 80028a2:	4619      	mov	r1, r3
 80028a4:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 80028a6:	f002 ff4f 	bl	8005748 <HAL_TIM_PWM_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80028b0:	f7ff ff0e 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028b4:	4803      	ldr	r0, [pc, #12]	@ (80028c4 <MX_TIM2_Init+0xc4>)
 80028b6:	f000 f9cd 	bl	8002c54 <HAL_TIM_MspPostInit>

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	@ 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000298 	.word	0x20000298

080028c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ce:	f107 0320 	add.w	r3, r7, #32
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	615a      	str	r2, [r3, #20]
 80028e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028ea:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <MX_TIM5_Init+0xc0>)
 80028ec:	4a27      	ldr	r2, [pc, #156]	@ (800298c <MX_TIM5_Init+0xc4>)
 80028ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <MX_TIM5_Init+0xc0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <MX_TIM5_Init+0xc0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <MX_TIM5_Init+0xc0>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002902:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002904:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <MX_TIM5_Init+0xc0>)
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290a:	4b1f      	ldr	r3, [pc, #124]	@ (8002988 <MX_TIM5_Init+0xc0>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002910:	481d      	ldr	r0, [pc, #116]	@ (8002988 <MX_TIM5_Init+0xc0>)
 8002912:	f002 fe1a 	bl	800554a <HAL_TIM_PWM_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800291c:	f7ff fed8 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002928:	f107 0320 	add.w	r3, r7, #32
 800292c:	4619      	mov	r1, r3
 800292e:	4816      	ldr	r0, [pc, #88]	@ (8002988 <MX_TIM5_Init+0xc0>)
 8002930:	f003 fa0a 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800293a:	f7ff fec9 	bl	80026d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800293e:	2360      	movs	r3, #96	@ 0x60
 8002940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2204      	movs	r2, #4
 8002952:	4619      	mov	r1, r3
 8002954:	480c      	ldr	r0, [pc, #48]	@ (8002988 <MX_TIM5_Init+0xc0>)
 8002956:	f002 fef7 	bl	8005748 <HAL_TIM_PWM_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002960:	f7ff feb6 	bl	80026d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	220c      	movs	r2, #12
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	@ (8002988 <MX_TIM5_Init+0xc0>)
 800296c:	f002 feec 	bl	8005748 <HAL_TIM_PWM_ConfigChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002976:	f7ff feab 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800297a:	4803      	ldr	r0, [pc, #12]	@ (8002988 <MX_TIM5_Init+0xc0>)
 800297c:	f000 f96a 	bl	8002c54 <HAL_TIM_MspPostInit>

}
 8002980:	bf00      	nop
 8002982:	3728      	adds	r7, #40	@ 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200002e0 	.word	0x200002e0
 800298c:	40000c00 	.word	0x40000c00

08002990 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002994:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <MX_TIM10_Init+0x40>)
 8002996:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <MX_TIM10_Init+0x44>)
 8002998:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <MX_TIM10_Init+0x40>)
 800299c:	2253      	movs	r2, #83	@ 0x53
 800299e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <MX_TIM10_Init+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <MX_TIM10_Init+0x40>)
 80029a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ae:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <MX_TIM10_Init+0x40>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <MX_TIM10_Init+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80029ba:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <MX_TIM10_Init+0x40>)
 80029bc:	f002 fd76 	bl	80054ac <HAL_TIM_Base_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80029c6:	f7ff fe83 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000328 	.word	0x20000328
 80029d4:	40014400 	.word	0x40014400

080029d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e8:	d176      	bne.n	8002ad8 <HAL_TIM_PWM_MspInit+0x100>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b7e      	ldr	r3, [pc, #504]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x210>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a7d      	ldr	r2, [pc, #500]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x210>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b7b      	ldr	r3, [pc, #492]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x210>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002a06:	4b79      	ldr	r3, [pc, #484]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a08:	4a79      	ldr	r2, [pc, #484]	@ (8002bf0 <HAL_TIM_PWM_MspInit+0x218>)
 8002a0a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002a0c:	4b77      	ldr	r3, [pc, #476]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a0e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a12:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a16:	2240      	movs	r2, #64	@ 0x40
 8002a18:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1a:	4b74      	ldr	r3, [pc, #464]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a20:	4b72      	ldr	r3, [pc, #456]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a26:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a28:	4b70      	ldr	r3, [pc, #448]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a2e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a30:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a36:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002a38:	4b6c      	ldr	r3, [pc, #432]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002a3e:	4b6b      	ldr	r3, [pc, #428]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a44:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a46:	4b69      	ldr	r3, [pc, #420]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002a4c:	4867      	ldr	r0, [pc, #412]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a4e:	f000 fba3 	bl	8003198 <HAL_DMA_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8002a58:	f7ff fe3a 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a63      	ldr	r2, [pc, #396]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a62:	4a62      	ldr	r2, [pc, #392]	@ (8002bec <HAL_TIM_PWM_MspInit+0x214>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8002a68:	4b62      	ldr	r3, [pc, #392]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a6a:	4a63      	ldr	r2, [pc, #396]	@ (8002bf8 <HAL_TIM_PWM_MspInit+0x220>)
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8002a6e:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a70:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a74:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a76:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a78:	2240      	movs	r2, #64	@ 0x40
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a90:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a92:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a98:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002a9a:	4b56      	ldr	r3, [pc, #344]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002aa0:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002aa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b52      	ldr	r3, [pc, #328]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8002aae:	4851      	ldr	r0, [pc, #324]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002ab0:	f000 fb72 	bl	8003198 <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_TIM_PWM_MspInit+0xe6>
    {
      Error_Handler();
 8002aba:	f7ff fe09 	bl	80026d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002ace:	621a      	str	r2, [r3, #32]
 8002ad0:	4a48      	ldr	r2, [pc, #288]	@ (8002bf4 <HAL_TIM_PWM_MspInit+0x21c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002ad6:	e083      	b.n	8002be0 <HAL_TIM_PWM_MspInit+0x208>
  else if(tim_pwmHandle->Instance==TIM5)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a47      	ldr	r2, [pc, #284]	@ (8002bfc <HAL_TIM_PWM_MspInit+0x224>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d17e      	bne.n	8002be0 <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	4b40      	ldr	r3, [pc, #256]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x210>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	4a3f      	ldr	r2, [pc, #252]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x210>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af2:	4b3d      	ldr	r3, [pc, #244]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x210>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002afe:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b00:	4a40      	ldr	r2, [pc, #256]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x22c>)
 8002b02:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002b04:	4b3e      	ldr	r3, [pc, #248]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b06:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002b0a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b12:	4b3b      	ldr	r3, [pc, #236]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002b18:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b1e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b20:	4b37      	ldr	r3, [pc, #220]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b26:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b28:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b2e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002b30:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002b36:	4b32      	ldr	r3, [pc, #200]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b3c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b3e:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002b44:	482e      	ldr	r0, [pc, #184]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b46:	f000 fb27 	bl	8003198 <HAL_DMA_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_TIM_PWM_MspInit+0x17c>
      Error_Handler();
 8002b50:	f7ff fdbe 	bl	80026d0 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a2a      	ldr	r2, [pc, #168]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b5a:	4a29      	ldr	r2, [pc, #164]	@ (8002c00 <HAL_TIM_PWM_MspInit+0x228>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8002b60:	4b29      	ldr	r3, [pc, #164]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b62:	4a2a      	ldr	r2, [pc, #168]	@ (8002c0c <HAL_TIM_PWM_MspInit+0x234>)
 8002b64:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8002b66:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b68:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b70:	2240      	movs	r2, #64	@ 0x40
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b23      	ldr	r3, [pc, #140]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b82:	4b21      	ldr	r3, [pc, #132]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b88:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b90:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8002b92:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002b9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b9e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8002bac:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8002bb8:	4813      	ldr	r0, [pc, #76]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bba:	f000 faed 	bl	8003198 <HAL_DMA_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_TIM_PWM_MspInit+0x1f0>
      Error_Handler();
 8002bc4:	f7ff fd84 	bl	80026d0 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0f      	ldr	r2, [pc, #60]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bce:	4a0e      	ldr	r2, [pc, #56]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bda:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x230>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	20000370 	.word	0x20000370
 8002bf0:	40026088 	.word	0x40026088
 8002bf4:	200003d0 	.word	0x200003d0
 8002bf8:	40026028 	.word	0x40026028
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	20000430 	.word	0x20000430
 8002c04:	40026070 	.word	0x40026070
 8002c08:	20000490 	.word	0x20000490
 8002c0c:	40026058 	.word	0x40026058

08002c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_TIM_Base_MspInit+0x3c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_TIM_Base_MspInit+0x40>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <HAL_TIM_Base_MspInit+0x40>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_TIM_Base_MspInit+0x40>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40014400 	.word	0x40014400
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d11e      	bne.n	8002cb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <HAL_TIM_MspPostInit+0xb0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <HAL_TIM_MspPostInit+0xb0>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c86:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <HAL_TIM_MspPostInit+0xb0>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002c92:	2305      	movs	r3, #5
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4619      	mov	r1, r3
 8002cac:	4816      	ldr	r0, [pc, #88]	@ (8002d08 <HAL_TIM_MspPostInit+0xb4>)
 8002cae:	f000 fde3 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002cb2:	e022      	b.n	8002cfa <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <HAL_TIM_MspPostInit+0xb8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d11d      	bne.n	8002cfa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <HAL_TIM_MspPostInit+0xb0>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <HAL_TIM_MspPostInit+0xb0>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HAL_TIM_MspPostInit+0xb0>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002cda:	230a      	movs	r3, #10
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cea:	2302      	movs	r3, #2
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4804      	ldr	r0, [pc, #16]	@ (8002d08 <HAL_TIM_MspPostInit+0xb4>)
 8002cf6:	f000 fdbf 	bl	8003878 <HAL_GPIO_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	@ 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40000c00 	.word	0x40000c00

08002d10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d14:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d16:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <MX_USART1_UART_Init+0x50>)
 8002d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d36:	220c      	movs	r2, #12
 8002d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d46:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <MX_USART1_UART_Init+0x4c>)
 8002d48:	f003 f86c 	bl	8005e24 <HAL_UART_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d52:	f7ff fcbd 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200004f0 	.word	0x200004f0
 8002d60:	40011000 	.word	0x40011000

08002d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_UART_MspInit+0x84>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12c      	bne.n	8002de0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <HAL_UART_MspInit+0x88>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <HAL_UART_MspInit+0x88>)
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_UART_MspInit+0x88>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <HAL_UART_MspInit+0x88>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	4a10      	ldr	r2, [pc, #64]	@ (8002dec <HAL_UART_MspInit+0x88>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_UART_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4805      	ldr	r0, [pc, #20]	@ (8002df0 <HAL_UART_MspInit+0x8c>)
 8002ddc:	f000 fd4c 	bl	8003878 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	@ 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020000 	.word	0x40020000

08002df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002df8:	f7ff fcf0 	bl	80027dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dfc:	480c      	ldr	r0, [pc, #48]	@ (8002e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dfe:	490d      	ldr	r1, [pc, #52]	@ (8002e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e00:	4a0d      	ldr	r2, [pc, #52]	@ (8002e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e14:	4c0a      	ldr	r4, [pc, #40]	@ (8002e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e22:	f003 fc1f 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e26:	f7ff f8b9 	bl	8001f9c <main>
  bx  lr    
 8002e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e34:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002e38:	0800677c 	.word	0x0800677c
  ldr r2, =_sbss
 8002e3c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002e40:	2000053c 	.word	0x2000053c

08002e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC_IRQHandler>
	...

08002e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_Init+0x40>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <HAL_Init+0x40>)
 8002e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_Init+0x40>)
 8002e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e64:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a07      	ldr	r2, [pc, #28]	@ (8002e88 <HAL_Init+0x40>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e70:	2003      	movs	r0, #3
 8002e72:	f000 f94f 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e76:	200f      	movs	r0, #15
 8002e78:	f000 f808 	bl	8002e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e7c:	f7ff fc2e 	bl	80026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023c00 	.word	0x40023c00

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e94:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_InitTick+0x54>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <HAL_InitTick+0x58>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f967 	bl	800317e <HAL_SYSTICK_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00e      	b.n	8002ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d80a      	bhi.n	8002ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ec8:	f000 f92f 	bl	800312a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ecc:	4a06      	ldr	r2, [pc, #24]	@ (8002ee8 <HAL_InitTick+0x5c>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000028 	.word	0x20000028
 8002ee4:	20000030 	.word	0x20000030
 8002ee8:	2000002c 	.word	0x2000002c

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000030 	.word	0x20000030
 8002f10:	20000538 	.word	0x20000538

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000538 	.word	0x20000538

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000030 	.word	0x20000030

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	@ (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	@ (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	@ (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff feb6 	bl	8002f14 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e099      	b.n	80032e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d4:	e00f      	b.n	80031f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7ff fe9d 	bl	8002f14 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d908      	bls.n	80031f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e078      	b.n	80032e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e8      	bne.n	80031d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_DMA_Init+0x158>)
 8003210:	4013      	ands	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	4313      	orrs	r3, r2
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	2b04      	cmp	r3, #4
 8003288:	d117      	bne.n	80032ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa6f 	bl	8003780 <DMA_CheckFifoParam>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2240      	movs	r2, #64	@ 0x40
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032b6:	2301      	movs	r3, #1
 80032b8:	e016      	b.n	80032e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa26 	bl	8003714 <DMA_CalcBaseAndBitshift>
 80032c8:	4603      	mov	r3, r0
 80032ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	223f      	movs	r2, #63	@ 0x3f
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	f010803f 	.word	0xf010803f

080032f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_DMA_Start_IT+0x26>
 8003316:	2302      	movs	r3, #2
 8003318:	e040      	b.n	800339c <HAL_DMA_Start_IT+0xa8>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d12f      	bne.n	800338e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f9b8 	bl	80036b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	223f      	movs	r2, #63	@ 0x3f
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0216 	orr.w	r2, r2, #22
 8003362:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e005      	b.n	800339a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033b0:	4b8e      	ldr	r3, [pc, #568]	@ (80035ec <HAL_DMA_IRQHandler+0x248>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a8e      	ldr	r2, [pc, #568]	@ (80035f0 <HAL_DMA_IRQHandler+0x24c>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	2208      	movs	r2, #8
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01a      	beq.n	8003410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2208      	movs	r2, #8
 80033fe:	409a      	lsls	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	2201      	movs	r2, #1
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	2201      	movs	r2, #1
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	2204      	movs	r2, #4
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	2204      	movs	r2, #4
 800346a:	409a      	lsls	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	2210      	movs	r2, #16
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d043      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d03c      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	2210      	movs	r2, #16
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d024      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
 80034d2:	e01f      	b.n	8003514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
 80034e4:	e016      	b.n	8003514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0208 	bic.w	r2, r2, #8
 8003502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	2220      	movs	r2, #32
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 808f 	beq.w	8003644 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8087 	beq.w	8003644 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353a:	2220      	movs	r2, #32
 800353c:	409a      	lsls	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b05      	cmp	r3, #5
 800354c:	d136      	bne.n	80035bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0216 	bic.w	r2, r2, #22
 800355c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800356c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_DMA_IRQHandler+0x1da>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0208 	bic.w	r2, r2, #8
 800358c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003592:	223f      	movs	r2, #63	@ 0x3f
 8003594:	409a      	lsls	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d07e      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
        }
        return;
 80035ba:	e079      	b.n	80036b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01d      	beq.n	8003606 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d031      	beq.n	8003644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e02c      	b.n	8003644 <HAL_DMA_IRQHandler+0x2a0>
 80035ea:	bf00      	nop
 80035ec:	20000028 	.word	0x20000028
 80035f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d023      	beq.n	8003644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e01e      	b.n	8003644 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10f      	bne.n	8003634 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0210 	bic.w	r2, r2, #16
 8003622:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	2b00      	cmp	r3, #0
 800364a:	d032      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d022      	beq.n	800369e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2205      	movs	r2, #5
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	3301      	adds	r3, #1
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	d307      	bcc.n	800368c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f2      	bne.n	8003670 <HAL_DMA_IRQHandler+0x2cc>
 800368a:	e000      	b.n	800368e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800368c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
 80036ae:	e000      	b.n	80036b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036b0:	bf00      	nop
    }
  }
}
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b40      	cmp	r3, #64	@ 0x40
 80036e4:	d108      	bne.n	80036f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036f6:	e007      	b.n	8003708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3b10      	subs	r3, #16
 8003724:	4a14      	ldr	r2, [pc, #80]	@ (8003778 <DMA_CalcBaseAndBitshift+0x64>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800372e:	4a13      	ldr	r2, [pc, #76]	@ (800377c <DMA_CalcBaseAndBitshift+0x68>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d909      	bls.n	8003756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	1d1a      	adds	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	@ 0x58
 8003754:	e007      	b.n	8003766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	0800675c 	.word	0x0800675c

08003780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d856      	bhi.n	800384e <DMA_CheckFifoParam+0xce>
 80037a0:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <DMA_CheckFifoParam+0x28>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037cb 	.word	0x080037cb
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	0800384f 	.word	0x0800384f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d046      	beq.n	8003852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e043      	b.n	8003852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037d2:	d140      	bne.n	8003856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e03d      	b.n	8003856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e2:	d121      	bne.n	8003828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d837      	bhi.n	800385a <DMA_CheckFifoParam+0xda>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <DMA_CheckFifoParam+0x70>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003801 	.word	0x08003801
 80037f4:	08003807 	.word	0x08003807
 80037f8:	08003801 	.word	0x08003801
 80037fc:	08003819 	.word	0x08003819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e030      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d025      	beq.n	800385e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003816:	e022      	b.n	800385e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003820:	d11f      	bne.n	8003862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003826:	e01c      	b.n	8003862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d903      	bls.n	8003836 <DMA_CheckFifoParam+0xb6>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d003      	beq.n	800383c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003834:	e018      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      break;
 800383a:	e015      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	e00b      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 800384e:	bf00      	nop
 8003850:	e00a      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 8003852:	bf00      	nop
 8003854:	e008      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
 8003858:	e006      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 800385a:	bf00      	nop
 800385c:	e004      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;   
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
    }
  } 
  
  return status; 
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop

08003878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	@ 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e159      	b.n	8003b48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f040 8148 	bne.w	8003b42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d130      	bne.n	800392c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003900:	2201      	movs	r2, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 0201 	and.w	r2, r3, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d017      	beq.n	8003968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d123      	bne.n	80039bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a2 	beq.w	8003b42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b57      	ldr	r3, [pc, #348]	@ (8003b60 <HAL_GPIO_Init+0x2e8>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	4a56      	ldr	r2, [pc, #344]	@ (8003b60 <HAL_GPIO_Init+0x2e8>)
 8003a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0e:	4b54      	ldr	r3, [pc, #336]	@ (8003b60 <HAL_GPIO_Init+0x2e8>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1a:	4a52      	ldr	r2, [pc, #328]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3302      	adds	r3, #2
 8003a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a49      	ldr	r2, [pc, #292]	@ (8003b68 <HAL_GPIO_Init+0x2f0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x202>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a48      	ldr	r2, [pc, #288]	@ (8003b6c <HAL_GPIO_Init+0x2f4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x1fe>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a47      	ldr	r2, [pc, #284]	@ (8003b70 <HAL_GPIO_Init+0x2f8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x1fa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a46      	ldr	r2, [pc, #280]	@ (8003b74 <HAL_GPIO_Init+0x2fc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x1f6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a45      	ldr	r2, [pc, #276]	@ (8003b78 <HAL_GPIO_Init+0x300>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x1f2>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e008      	b.n	8003a7c <HAL_GPIO_Init+0x204>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e006      	b.n	8003a7c <HAL_GPIO_Init+0x204>
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e004      	b.n	8003a7c <HAL_GPIO_Init+0x204>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e002      	b.n	8003a7c <HAL_GPIO_Init+0x204>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_GPIO_Init+0x204>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	f002 0203 	and.w	r2, r2, #3
 8003a82:	0092      	lsls	r2, r2, #2
 8003a84:	4093      	lsls	r3, r2
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a8c:	4935      	ldr	r1, [pc, #212]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	3302      	adds	r3, #2
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9a:	4b38      	ldr	r3, [pc, #224]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003abe:	4a2f      	ldr	r2, [pc, #188]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae8:	4a24      	ldr	r2, [pc, #144]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aee:	4b23      	ldr	r3, [pc, #140]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b12:	4a1a      	ldr	r2, [pc, #104]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b18:	4b18      	ldr	r3, [pc, #96]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b7c <HAL_GPIO_Init+0x304>)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3301      	adds	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	f67f aea2 	bls.w	8003894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3724      	adds	r7, #36	@ 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40013800 	.word	0x40013800
 8003b68:	40020000 	.word	0x40020000
 8003b6c:	40020400 	.word	0x40020400
 8003b70:	40020800 	.word	0x40020800
 8003b74:	40020c00 	.word	0x40020c00
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40013c00 	.word	0x40013c00

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b90:	787b      	ldrb	r3, [r7, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b9c:	e003      	b.n	8003ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	041a      	lsls	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	619a      	str	r2, [r3, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e12b      	b.n	8003e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fd fd04 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	@ 0x24
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c18:	f001 fc20 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4a81      	ldr	r2, [pc, #516]	@ (8003e28 <HAL_I2C_Init+0x274>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d807      	bhi.n	8003c38 <HAL_I2C_Init+0x84>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a80      	ldr	r2, [pc, #512]	@ (8003e2c <HAL_I2C_Init+0x278>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e006      	b.n	8003c46 <HAL_I2C_Init+0x92>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e30 <HAL_I2C_Init+0x27c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bf94      	ite	ls
 8003c40:	2301      	movls	r3, #1
 8003c42:	2300      	movhi	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0e7      	b.n	8003e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a78      	ldr	r2, [pc, #480]	@ (8003e34 <HAL_I2C_Init+0x280>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e28 <HAL_I2C_Init+0x274>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <HAL_I2C_Init+0xd4>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	e009      	b.n	8003c9c <HAL_I2C_Init+0xe8>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	4a69      	ldr	r2, [pc, #420]	@ (8003e38 <HAL_I2C_Init+0x284>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	495c      	ldr	r1, [pc, #368]	@ (8003e28 <HAL_I2C_Init+0x274>)
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	d819      	bhi.n	8003cf0 <HAL_I2C_Init+0x13c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e59      	subs	r1, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cca:	1c59      	adds	r1, r3, #1
 8003ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cd0:	400b      	ands	r3, r1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_I2C_Init+0x138>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1e59      	subs	r1, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	e051      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003cec:	2304      	movs	r3, #4
 8003cee:	e04f      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d111      	bne.n	8003d1c <HAL_I2C_Init+0x168>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e58      	subs	r0, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	440b      	add	r3, r1
 8003d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e012      	b.n	8003d42 <HAL_I2C_Init+0x18e>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e58      	subs	r0, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	0099      	lsls	r1, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Init+0x196>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e022      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10e      	bne.n	8003d70 <HAL_I2C_Init+0x1bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1e58      	subs	r0, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	440b      	add	r3, r1
 8003d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6e:	e00f      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	6809      	ldr	r1, [r1, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6911      	ldr	r1, [r2, #16]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68d2      	ldr	r2, [r2, #12]
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	000186a0 	.word	0x000186a0
 8003e2c:	001e847f 	.word	0x001e847f
 8003e30:	003d08ff 	.word	0x003d08ff
 8003e34:	431bde83 	.word	0x431bde83
 8003e38:	10624dd3 	.word	0x10624dd3

08003e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e56:	f7ff f85d 	bl	8002f14 <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	f040 80d9 	bne.w	800401c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2319      	movs	r3, #25
 8003e70:	2201      	movs	r2, #1
 8003e72:	496d      	ldr	r1, [pc, #436]	@ (8004028 <HAL_I2C_Mem_Write+0x1ec>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fc8b 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0cc      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_Mem_Write+0x56>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0c5      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d007      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2221      	movs	r2, #33	@ 0x21
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2240      	movs	r2, #64	@ 0x40
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a3a      	ldr	r2, [r7, #32]
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800402c <HAL_I2C_Mem_Write+0x1f0>)
 8003ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003efa:	88f8      	ldrh	r0, [r7, #6]
 8003efc:	893a      	ldrh	r2, [r7, #8]
 8003efe:	8979      	ldrh	r1, [r7, #10]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4603      	mov	r3, r0
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fac2 	bl	8004494 <I2C_RequestMemoryWrite>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d052      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e081      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fd50 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d11b      	bne.n	8003fbc <HAL_I2C_Mem_Write+0x180>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1aa      	bne.n	8003f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fd43 	bl	8004a54 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d107      	bne.n	8003fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e016      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	00100002 	.word	0x00100002
 800402c:	ffff0000 	.word	0xffff0000

08004030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	@ 0x30
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404a:	f7fe ff63 	bl	8002f14 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	f040 8214 	bne.w	8004486 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2319      	movs	r3, #25
 8004064:	2201      	movs	r2, #1
 8004066:	497b      	ldr	r1, [pc, #492]	@ (8004254 <HAL_I2C_Mem_Read+0x224>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fb91 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
 8004076:	e207      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_I2C_Mem_Read+0x56>
 8004082:	2302      	movs	r3, #2
 8004084:	e200      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d007      	beq.n	80040ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2222      	movs	r2, #34	@ 0x22
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004258 <HAL_I2C_Mem_Read+0x228>)
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ee:	88f8      	ldrh	r0, [r7, #6]
 80040f0:	893a      	ldrh	r2, [r7, #8]
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa5e 	bl	80045c0 <I2C_RequestMemoryRead>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1bc      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d113      	bne.n	800413e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e190      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	2b01      	cmp	r3, #1
 8004144:	d11b      	bne.n	800417e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e170      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	2b02      	cmp	r3, #2
 8004184:	d11b      	bne.n	80041be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	e150      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041d4:	e144      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	2b03      	cmp	r3, #3
 80041dc:	f200 80f1 	bhi.w	80043c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d123      	bne.n	8004230 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fc79 	bl	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e145      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800422e:	e117      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	2b02      	cmp	r3, #2
 8004236:	d14e      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	2200      	movs	r2, #0
 8004240:	4906      	ldr	r1, [pc, #24]	@ (800425c <HAL_I2C_Mem_Read+0x22c>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 faa4 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e11a      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
 8004252:	bf00      	nop
 8004254:	00100002 	.word	0x00100002
 8004258:	ffff0000 	.word	0xffff0000
 800425c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042d4:	e0c4      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	2200      	movs	r2, #0
 80042de:	496c      	ldr	r1, [pc, #432]	@ (8004490 <HAL_I2C_Mem_Read+0x460>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa55 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0cb      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	2200      	movs	r2, #0
 800433a:	4955      	ldr	r1, [pc, #340]	@ (8004490 <HAL_I2C_Mem_Read+0x460>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fa27 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e09d      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043c0:	e04e      	b.n	8004460 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fb8c 	bl	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e058      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d124      	bne.n	8004460 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441a:	2b03      	cmp	r3, #3
 800441c:	d107      	bne.n	800442e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f aeb6 	bne.w	80041d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	@ 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	00010004 	.word	0x00010004

08004494 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	460b      	mov	r3, r1
 80044a8:	813b      	strh	r3, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f960 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e4:	d103      	bne.n	80044ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e05f      	b.n	80045b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	492d      	ldr	r1, [pc, #180]	@ (80045bc <I2C_RequestMemoryWrite+0x128>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f9bb 	bl	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e04c      	b.n	80045b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004530:	6a39      	ldr	r1, [r7, #32]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fa46 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	2b04      	cmp	r3, #4
 8004544:	d107      	bne.n	8004556 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e02b      	b.n	80045b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	611a      	str	r2, [r3, #16]
 800456a:	e021      	b.n	80045b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fa20 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	2b04      	cmp	r3, #4
 8004590:	d107      	bne.n	80045a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e005      	b.n	80045b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a6:	893b      	ldrh	r3, [r7, #8]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	00010002 	.word	0x00010002

080045c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	817b      	strh	r3, [r7, #10]
 80045d2:	460b      	mov	r3, r1
 80045d4:	813b      	strh	r3, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2200      	movs	r2, #0
 8004602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8c2 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004620:	d103      	bne.n	800462a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0aa      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800463c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	4952      	ldr	r1, [pc, #328]	@ (800478c <I2C_RequestMemoryRead+0x1cc>)
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f91d 	bl	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e097      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f9a8 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e076      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469c:	893b      	ldrh	r3, [r7, #8]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	e021      	b.n	80046ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b8:	6a39      	ldr	r1, [r7, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f982 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d107      	bne.n	80046de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e050      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e2:	893b      	ldrh	r3, [r7, #8]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	6a39      	ldr	r1, [r7, #32]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f967 	bl	80049c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	2b04      	cmp	r3, #4
 8004702:	d107      	bne.n	8004714 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004712:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e035      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004726:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	2200      	movs	r2, #0
 8004730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f82b 	bl	8004790 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474e:	d103      	bne.n	8004758 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e013      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800475c:	897b      	ldrh	r3, [r7, #10]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	6a3a      	ldr	r2, [r7, #32]
 8004770:	4906      	ldr	r1, [pc, #24]	@ (800478c <I2C_RequestMemoryRead+0x1cc>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f886 	bl	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010002 	.word	0x00010002

08004790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a0:	e048      	b.n	8004834 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a8:	d044      	beq.n	8004834 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fe fbb3 	bl	8002f14 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d139      	bne.n	8004834 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10d      	bne.n	80047e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	e00c      	b.n	8004800 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	d116      	bne.n	8004834 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	f043 0220 	orr.w	r2, r3, #32
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e023      	b.n	800487c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10d      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0xca>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	e00c      	b.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	429a      	cmp	r2, r3
 8004878:	d093      	beq.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004892:	e071      	b.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a2:	d123      	bne.n	80048ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e067      	b.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f2:	d041      	beq.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f4:	f7fe fb0e 	bl	8002f14 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d136      	bne.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	e00b      	b.n	8004946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	43da      	mvns	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	f043 0220 	orr.w	r2, r3, #32
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e021      	b.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d10c      	bne.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e00b      	b.n	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f47f af6d 	bne.w	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d0:	e034      	b.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f8e3 	bl	8004b9e <I2C_IsAcknowledgeFailed>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e034      	b.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049e8:	d028      	beq.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ea:	f7fe fa93 	bl	8002f14 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d302      	bcc.n	8004a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11d      	bne.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0a:	2b80      	cmp	r3, #128	@ 0x80
 8004a0c:	d016      	beq.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e007      	b.n	8004a4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b80      	cmp	r3, #128	@ 0x80
 8004a48:	d1c3      	bne.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a60:	e034      	b.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f89b 	bl	8004b9e <I2C_IsAcknowledgeFailed>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e034      	b.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a78:	d028      	beq.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7fe fa4b 	bl	8002f14 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11d      	bne.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d016      	beq.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e007      	b.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d1c3      	bne.n	8004a62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af0:	e049      	b.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d119      	bne.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0210 	mvn.w	r2, #16
 8004b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e030      	b.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b34:	f7fe f9ee 	bl	8002f14 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11d      	bne.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d016      	beq.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e007      	b.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d1ae      	bne.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb4:	d11b      	bne.n	8004bee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e267      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d075      	beq.n	8004d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c1a:	4b88      	ldr	r3, [pc, #544]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d00c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c26:	4b85      	ldr	r3, [pc, #532]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d112      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b82      	ldr	r3, [pc, #520]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	4b7e      	ldr	r3, [pc, #504]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x108>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d157      	bne.n	8004d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e242      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x74>
 8004c62:	4b76      	ldr	r3, [pc, #472]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a75      	ldr	r2, [pc, #468]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x98>
 8004c7a:	4b70      	ldr	r3, [pc, #448]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c94:	4b69      	ldr	r3, [pc, #420]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a68      	ldr	r2, [pc, #416]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b66      	ldr	r3, [pc, #408]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a65      	ldr	r2, [pc, #404]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fe f92e 	bl	8002f14 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fe f92a 	bl	8002f14 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	@ 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e207      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b5b      	ldr	r3, [pc, #364]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xc0>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe f91a 	bl	8002f14 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fe f916 	bl	8002f14 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	@ 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1f3      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf6:	4b51      	ldr	r3, [pc, #324]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xe8>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d063      	beq.n	8004dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1e:	4b47      	ldr	r3, [pc, #284]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d11c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2a:	4b44      	ldr	r3, [pc, #272]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d36:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_RCC_OscConfig+0x152>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e1c7      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4937      	ldr	r1, [pc, #220]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	e03a      	b.n	8004dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6c:	4b34      	ldr	r3, [pc, #208]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fe f8cf 	bl	8002f14 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7a:	f7fe f8cb 	bl	8002f14 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1a8      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d98:	4b28      	ldr	r3, [pc, #160]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4925      	ldr	r1, [pc, #148]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	e015      	b.n	8004dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dae:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fe f8ae 	bl	8002f14 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fe f8aa 	bl	8002f14 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e187      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dce:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d036      	beq.n	8004e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dee:	4b15      	ldr	r3, [pc, #84]	@ (8004e44 <HAL_RCC_OscConfig+0x248>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fe f88e 	bl	8002f14 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fe f88a 	bl	8002f14 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e167      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x200>
 8004e1a:	e01b      	b.n	8004e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1c:	4b09      	ldr	r3, [pc, #36]	@ (8004e44 <HAL_RCC_OscConfig+0x248>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fe f877 	bl	8002f14 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	e00e      	b.n	8004e48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fe f873 	bl	8002f14 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d907      	bls.n	8004e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e150      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	42470000 	.word	0x42470000
 8004e44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e48:	4b88      	ldr	r3, [pc, #544]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ea      	bne.n	8004e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8097 	beq.w	8004f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e66:	4b81      	ldr	r3, [pc, #516]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10f      	bne.n	8004e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	4b7d      	ldr	r3, [pc, #500]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e82:	4b7a      	ldr	r3, [pc, #488]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e92:	4b77      	ldr	r3, [pc, #476]	@ (8005070 <HAL_RCC_OscConfig+0x474>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d118      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9e:	4b74      	ldr	r3, [pc, #464]	@ (8005070 <HAL_RCC_OscConfig+0x474>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a73      	ldr	r2, [pc, #460]	@ (8005070 <HAL_RCC_OscConfig+0x474>)
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eaa:	f7fe f833 	bl	8002f14 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb2:	f7fe f82f 	bl	8002f14 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e10c      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8005070 <HAL_RCC_OscConfig+0x474>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x2ea>
 8004ed8:	4b64      	ldr	r3, [pc, #400]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	4a63      	ldr	r2, [pc, #396]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee4:	e01c      	b.n	8004f20 <HAL_RCC_OscConfig+0x324>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b05      	cmp	r3, #5
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x30c>
 8004eee:	4b5f      	ldr	r3, [pc, #380]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efa:	4b5c      	ldr	r3, [pc, #368]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	4a5b      	ldr	r2, [pc, #364]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f06:	e00b      	b.n	8004f20 <HAL_RCC_OscConfig+0x324>
 8004f08:	4b58      	ldr	r3, [pc, #352]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a57      	ldr	r2, [pc, #348]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f14:	4b55      	ldr	r3, [pc, #340]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f18:	4a54      	ldr	r2, [pc, #336]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 0304 	bic.w	r3, r3, #4
 8004f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f28:	f7fd fff4 	bl	8002f14 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f30:	f7fd fff0 	bl	8002f14 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e0cb      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f46:	4b49      	ldr	r3, [pc, #292]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0ee      	beq.n	8004f30 <HAL_RCC_OscConfig+0x334>
 8004f52:	e014      	b.n	8004f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f54:	f7fd ffde 	bl	8002f14 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fd ffda 	bl	8002f14 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0b5      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f72:	4b3e      	ldr	r3, [pc, #248]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ee      	bne.n	8004f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f84:	4b39      	ldr	r3, [pc, #228]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	4a38      	ldr	r2, [pc, #224]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a1 	beq.w	80050dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f9a:	4b34      	ldr	r3, [pc, #208]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d05c      	beq.n	8005060 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d141      	bne.n	8005032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fae:	4b31      	ldr	r3, [pc, #196]	@ (8005074 <HAL_RCC_OscConfig+0x478>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fd ffae 	bl	8002f14 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fd ffaa 	bl	8002f14 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e087      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	4b27      	ldr	r3, [pc, #156]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	491b      	ldr	r1, [pc, #108]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005004:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x478>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7fd ff83 	bl	8002f14 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7fd ff7f 	bl	8002f14 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e05c      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005024:	4b11      	ldr	r3, [pc, #68]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x416>
 8005030:	e054      	b.n	80050dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <HAL_RCC_OscConfig+0x478>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fd ff6c 	bl	8002f14 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005040:	f7fd ff68 	bl	8002f14 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e045      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	4b06      	ldr	r3, [pc, #24]	@ (800506c <HAL_RCC_OscConfig+0x470>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x444>
 800505e:	e03d      	b.n	80050dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e038      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
 800506c:	40023800 	.word	0x40023800
 8005070:	40007000 	.word	0x40007000
 8005074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005078:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x4ec>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d028      	beq.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d121      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d11a      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d111      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	3b01      	subs	r3, #1
 80050c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800

080050ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0cc      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b68      	ldr	r3, [pc, #416]	@ (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d90c      	bls.n	8005128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b65      	ldr	r3, [pc, #404]	@ (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	4b63      	ldr	r3, [pc, #396]	@ (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0b8      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005140:	4b59      	ldr	r3, [pc, #356]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a58      	ldr	r2, [pc, #352]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800514a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005158:	4b53      	ldr	r3, [pc, #332]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a52      	ldr	r2, [pc, #328]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005164:	4b50      	ldr	r3, [pc, #320]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	494d      	ldr	r1, [pc, #308]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d044      	beq.n	800520c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d107      	bne.n	800519a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	4b47      	ldr	r3, [pc, #284]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d119      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e07f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051aa:	4b3f      	ldr	r3, [pc, #252]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ba:	4b3b      	ldr	r3, [pc, #236]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e067      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	4b37      	ldr	r3, [pc, #220]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4934      	ldr	r1, [pc, #208]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051dc:	f7fd fe9a 	bl	8002f14 <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e4:	f7fd fe96 	bl	8002f14 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e04f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	4b2b      	ldr	r3, [pc, #172]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 020c 	and.w	r2, r3, #12
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	429a      	cmp	r2, r3
 800520a:	d1eb      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b25      	ldr	r3, [pc, #148]	@ (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d20c      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b22      	ldr	r3, [pc, #136]	@ (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b20      	ldr	r3, [pc, #128]	@ (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e032      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005240:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4916      	ldr	r1, [pc, #88]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525e:	4b12      	ldr	r3, [pc, #72]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	490e      	ldr	r1, [pc, #56]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005272:	f000 f821 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8005276:	4602      	mov	r2, r0
 8005278:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	490a      	ldr	r1, [pc, #40]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005284:	5ccb      	ldrb	r3, [r1, r3]
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	4a09      	ldr	r2, [pc, #36]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800528e:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fdfa 	bl	8002e8c <HAL_InitTick>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40023c00 	.word	0x40023c00
 80052a8:	40023800 	.word	0x40023800
 80052ac:	08006744 	.word	0x08006744
 80052b0:	20000028 	.word	0x20000028
 80052b4:	2000002c 	.word	0x2000002c

080052b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052bc:	b090      	sub	sp, #64	@ 0x40
 80052be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d0:	4b59      	ldr	r3, [pc, #356]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x180>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d00d      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x40>
 80052dc:	2b08      	cmp	r3, #8
 80052de:	f200 80a1 	bhi.w	8005424 <HAL_RCC_GetSysClockFreq+0x16c>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0x34>
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ea:	e09b      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ec:	4b53      	ldr	r3, [pc, #332]	@ (800543c <HAL_RCC_GetSysClockFreq+0x184>)
 80052ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052f0:	e09b      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052f2:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x188>)
 80052f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052f6:	e098      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x180>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005300:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005302:	4b4d      	ldr	r3, [pc, #308]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x180>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d028      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530e:	4b4a      	ldr	r3, [pc, #296]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x180>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	2200      	movs	r2, #0
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	627a      	str	r2, [r7, #36]	@ 0x24
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005320:	2100      	movs	r1, #0
 8005322:	4b47      	ldr	r3, [pc, #284]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x188>)
 8005324:	fb03 f201 	mul.w	r2, r3, r1
 8005328:	2300      	movs	r3, #0
 800532a:	fb00 f303 	mul.w	r3, r0, r3
 800532e:	4413      	add	r3, r2
 8005330:	4a43      	ldr	r2, [pc, #268]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x188>)
 8005332:	fba0 1202 	umull	r1, r2, r0, r2
 8005336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005338:	460a      	mov	r2, r1
 800533a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800533c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800533e:	4413      	add	r3, r2
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005344:	2200      	movs	r2, #0
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	61fa      	str	r2, [r7, #28]
 800534a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005352:	f7fb fbe7 	bl	8000b24 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4613      	mov	r3, r2
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535e:	e053      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005360:	4b35      	ldr	r3, [pc, #212]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x180>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	2200      	movs	r2, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	617a      	str	r2, [r7, #20]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005372:	f04f 0b00 	mov.w	fp, #0
 8005376:	4652      	mov	r2, sl
 8005378:	465b      	mov	r3, fp
 800537a:	f04f 0000 	mov.w	r0, #0
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	0159      	lsls	r1, r3, #5
 8005384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005388:	0150      	lsls	r0, r2, #5
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	ebb2 080a 	subs.w	r8, r2, sl
 8005392:	eb63 090b 	sbc.w	r9, r3, fp
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053aa:	ebb2 0408 	subs.w	r4, r2, r8
 80053ae:	eb63 0509 	sbc.w	r5, r3, r9
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	00eb      	lsls	r3, r5, #3
 80053bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c0:	00e2      	lsls	r2, r4, #3
 80053c2:	4614      	mov	r4, r2
 80053c4:	461d      	mov	r5, r3
 80053c6:	eb14 030a 	adds.w	r3, r4, sl
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	eb45 030b 	adc.w	r3, r5, fp
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053de:	4629      	mov	r1, r5
 80053e0:	028b      	lsls	r3, r1, #10
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e8:	4621      	mov	r1, r4
 80053ea:	028a      	lsls	r2, r1, #10
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	2200      	movs	r2, #0
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	60fa      	str	r2, [r7, #12]
 80053f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053fc:	f7fb fb92 	bl	8000b24 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x180>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3301      	adds	r3, #1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005422:	e002      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005424:	4b05      	ldr	r3, [pc, #20]	@ (800543c <HAL_RCC_GetSysClockFreq+0x184>)
 8005426:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800542c:	4618      	mov	r0, r3
 800542e:	3740      	adds	r7, #64	@ 0x40
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800
 800543c:	00f42400 	.word	0x00f42400
 8005440:	017d7840 	.word	0x017d7840

08005444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b03      	ldr	r3, [pc, #12]	@ (8005458 <HAL_RCC_GetHCLKFreq+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000028 	.word	0x20000028

0800545c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005460:	f7ff fff0 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b05      	ldr	r3, [pc, #20]	@ (800547c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	0a9b      	lsrs	r3, r3, #10
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4903      	ldr	r1, [pc, #12]	@ (8005480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40023800 	.word	0x40023800
 8005480:	08006754 	.word	0x08006754

08005484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005488:	f7ff ffdc 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0b5b      	lsrs	r3, r3, #13
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4903      	ldr	r1, [pc, #12]	@ (80054a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	08006754 	.word	0x08006754

080054ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e041      	b.n	8005542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd fb9c 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 f9ee 	bl	80058cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e041      	b.n	80055e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fd fa31 	bl	80029d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f000 f99f 	bl	80058cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PWM_Start+0x24>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e022      	b.n	8005652 <HAL_TIM_PWM_Start+0x6a>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b04      	cmp	r3, #4
 8005610:	d109      	bne.n	8005626 <HAL_TIM_PWM_Start+0x3e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	bf14      	ite	ne
 800561e:	2301      	movne	r3, #1
 8005620:	2300      	moveq	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e015      	b.n	8005652 <HAL_TIM_PWM_Start+0x6a>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d109      	bne.n	8005640 <HAL_TIM_PWM_Start+0x58>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e008      	b.n	8005652 <HAL_TIM_PWM_Start+0x6a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e068      	b.n	800572c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0x82>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005668:	e013      	b.n	8005692 <HAL_TIM_PWM_Start+0xaa>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d104      	bne.n	800567a <HAL_TIM_PWM_Start+0x92>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005678:	e00b      	b.n	8005692 <HAL_TIM_PWM_Start+0xaa>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d104      	bne.n	800568a <HAL_TIM_PWM_Start+0xa2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005688:	e003      	b.n	8005692 <HAL_TIM_PWM_Start+0xaa>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fb2e 	bl	8005cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a23      	ldr	r2, [pc, #140]	@ (8005734 <HAL_TIM_PWM_Start+0x14c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d107      	bne.n	80056ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	@ (8005734 <HAL_TIM_PWM_Start+0x14c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x10e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056cc:	d013      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x10e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a19      	ldr	r2, [pc, #100]	@ (8005738 <HAL_TIM_PWM_Start+0x150>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x10e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a17      	ldr	r2, [pc, #92]	@ (800573c <HAL_TIM_PWM_Start+0x154>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x10e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <HAL_TIM_PWM_Start+0x158>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x10e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <HAL_TIM_PWM_Start+0x15c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d111      	bne.n	800571a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b06      	cmp	r3, #6
 8005706:	d010      	beq.n	800572a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	e007      	b.n	800572a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000

08005748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005762:	2302      	movs	r3, #2
 8005764:	e0ae      	b.n	80058c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b0c      	cmp	r3, #12
 8005772:	f200 809f 	bhi.w	80058b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005776:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080058b5 	.word	0x080058b5
 8005784:	080058b5 	.word	0x080058b5
 8005788:	080058b5 	.word	0x080058b5
 800578c:	080057f1 	.word	0x080057f1
 8005790:	080058b5 	.word	0x080058b5
 8005794:	080058b5 	.word	0x080058b5
 8005798:	080058b5 	.word	0x080058b5
 800579c:	08005833 	.word	0x08005833
 80057a0:	080058b5 	.word	0x080058b5
 80057a4:	080058b5 	.word	0x080058b5
 80057a8:	080058b5 	.word	0x080058b5
 80057ac:	08005873 	.word	0x08005873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f914 	bl	80059e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0208 	orr.w	r2, r2, #8
 80057ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	619a      	str	r2, [r3, #24]
      break;
 80057ee:	e064      	b.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f95a 	bl	8005ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800580a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800581a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6999      	ldr	r1, [r3, #24]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	619a      	str	r2, [r3, #24]
      break;
 8005830:	e043      	b.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f9a5 	bl	8005b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0208 	orr.w	r2, r2, #8
 800584c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0204 	bic.w	r2, r2, #4
 800585c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69d9      	ldr	r1, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	61da      	str	r2, [r3, #28]
      break;
 8005870:	e023      	b.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9ef 	bl	8005c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800588c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69d9      	ldr	r1, [r3, #28]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	021a      	lsls	r2, r3, #8
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	61da      	str	r2, [r3, #28]
      break;
 80058b2:	e002      	b.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
      break;
 80058b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a3a      	ldr	r2, [pc, #232]	@ (80059c8 <TIM_Base_SetConfig+0xfc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00f      	beq.n	8005904 <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ea:	d00b      	beq.n	8005904 <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a37      	ldr	r2, [pc, #220]	@ (80059cc <TIM_Base_SetConfig+0x100>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_Base_SetConfig+0x38>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a36      	ldr	r2, [pc, #216]	@ (80059d0 <TIM_Base_SetConfig+0x104>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_Base_SetConfig+0x38>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a35      	ldr	r2, [pc, #212]	@ (80059d4 <TIM_Base_SetConfig+0x108>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d108      	bne.n	8005916 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2b      	ldr	r2, [pc, #172]	@ (80059c8 <TIM_Base_SetConfig+0xfc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01b      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005924:	d017      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a28      	ldr	r2, [pc, #160]	@ (80059cc <TIM_Base_SetConfig+0x100>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a27      	ldr	r2, [pc, #156]	@ (80059d0 <TIM_Base_SetConfig+0x104>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00f      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a26      	ldr	r2, [pc, #152]	@ (80059d4 <TIM_Base_SetConfig+0x108>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a25      	ldr	r2, [pc, #148]	@ (80059d8 <TIM_Base_SetConfig+0x10c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a24      	ldr	r2, [pc, #144]	@ (80059dc <TIM_Base_SetConfig+0x110>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a23      	ldr	r2, [pc, #140]	@ (80059e0 <TIM_Base_SetConfig+0x114>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d108      	bne.n	8005968 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a0e      	ldr	r2, [pc, #56]	@ (80059c8 <TIM_Base_SetConfig+0xfc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d103      	bne.n	800599c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d105      	bne.n	80059ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	611a      	str	r2, [r3, #16]
  }
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0201 	bic.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <TIM_OC1_SetConfig+0xc8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0308 	bic.w	r3, r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	@ (8005aac <TIM_OC1_SetConfig+0xc8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40010000 	.word	0x40010000

08005ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f023 0210 	bic.w	r2, r3, #16
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b84 <TIM_OC2_SetConfig+0xd4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10d      	bne.n	8005b2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <TIM_OC2_SetConfig+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000

08005b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10d      	bne.n	8005c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a14      	ldr	r2, [pc, #80]	@ (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d113      	bne.n	8005c32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40010000 	.word	0x40010000

08005c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a10      	ldr	r2, [pc, #64]	@ (8005cf8 <TIM_OC4_SetConfig+0x9c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d109      	bne.n	8005cd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000

08005cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2201      	movs	r2, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e050      	b.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dac:	d013      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a18      	ldr	r2, [pc, #96]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a16      	ldr	r2, [pc, #88]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10c      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40014000 	.word	0x40014000

08005e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e042      	b.n	8005ebc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc ff8a 	bl	8002d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	@ 0x24
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f97f 	bl	800616c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	f040 8081 	bne.w	8005fe8 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_UART_Receive+0x2e>
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e079      	b.n	8005fea <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2222      	movs	r2, #34	@ 0x22
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f0a:	f7fd f803 	bl	8002f14 <HAL_GetTick>
 8005f0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	88fa      	ldrh	r2, [r7, #6]
 8005f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f24:	d108      	bne.n	8005f38 <HAL_UART_Receive+0x74>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	e003      	b.n	8005f40 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f40:	e047      	b.n	8005fd2 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2120      	movs	r1, #32
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f850 	bl	8005ff2 <UART_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e042      	b.n	8005fea <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10c      	bne.n	8005f84 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	3302      	adds	r3, #2
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e01f      	b.n	8005fc4 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8c:	d007      	beq.n	8005f9e <HAL_UART_Receive+0xda>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_UART_Receive+0xe8>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e008      	b.n	8005fbe <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1b2      	bne.n	8005f42 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006002:	e03b      	b.n	800607c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800600a:	d037      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600c:	f7fc ff82 	bl	8002f14 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	6a3a      	ldr	r2, [r7, #32]
 8006018:	429a      	cmp	r2, r3
 800601a:	d302      	bcc.n	8006022 <UART_WaitOnFlagUntilTimeout+0x30>
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e03a      	b.n	800609c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d023      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b80      	cmp	r3, #128	@ 0x80
 8006038:	d020      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x8a>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b40      	cmp	r3, #64	@ 0x40
 800603e:	d01d      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b08      	cmp	r3, #8
 800604c:	d116      	bne.n	800607c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f81d 	bl	80060a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2208      	movs	r2, #8
 800606e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e00f      	b.n	800609c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	429a      	cmp	r2, r3
 8006098:	d0b4      	beq.n	8006004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b095      	sub	sp, #84	@ 0x54
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3314      	adds	r3, #20
 80060fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e5      	bne.n	80060e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006118:	2b01      	cmp	r3, #1
 800611a:	d119      	bne.n	8006150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	60bb      	str	r3, [r7, #8]
   return(result);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0310 	bic.w	r3, r3, #16
 8006132:	647b      	str	r3, [r7, #68]	@ 0x44
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800613c:	61ba      	str	r2, [r7, #24]
 800613e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6979      	ldr	r1, [r7, #20]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	613b      	str	r3, [r7, #16]
   return(result);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800615e:	bf00      	nop
 8006160:	3754      	adds	r7, #84	@ 0x54
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800616c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006170:	b0c0      	sub	sp, #256	@ 0x100
 8006172:	af00      	add	r7, sp, #0
 8006174:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006188:	68d9      	ldr	r1, [r3, #12]
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	ea40 0301 	orr.w	r3, r0, r1
 8006194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061c4:	f021 010c 	bic.w	r1, r1, #12
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061d2:	430b      	orrs	r3, r1
 80061d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	6999      	ldr	r1, [r3, #24]
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	ea40 0301 	orr.w	r3, r0, r1
 80061f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006438 <UART_SetConfig+0x2cc>)
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d005      	beq.n	800620c <UART_SetConfig+0xa0>
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b8d      	ldr	r3, [pc, #564]	@ (800643c <UART_SetConfig+0x2d0>)
 8006208:	429a      	cmp	r2, r3
 800620a:	d104      	bne.n	8006216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800620c:	f7ff f93a 	bl	8005484 <HAL_RCC_GetPCLK2Freq>
 8006210:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006214:	e003      	b.n	800621e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006216:	f7ff f921 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 800621a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006228:	f040 810c 	bne.w	8006444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800622c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006230:	2200      	movs	r2, #0
 8006232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006236:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800623a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800623e:	4622      	mov	r2, r4
 8006240:	462b      	mov	r3, r5
 8006242:	1891      	adds	r1, r2, r2
 8006244:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006246:	415b      	adcs	r3, r3
 8006248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800624a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800624e:	4621      	mov	r1, r4
 8006250:	eb12 0801 	adds.w	r8, r2, r1
 8006254:	4629      	mov	r1, r5
 8006256:	eb43 0901 	adc.w	r9, r3, r1
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800626a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800626e:	4690      	mov	r8, r2
 8006270:	4699      	mov	r9, r3
 8006272:	4623      	mov	r3, r4
 8006274:	eb18 0303 	adds.w	r3, r8, r3
 8006278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800627c:	462b      	mov	r3, r5
 800627e:	eb49 0303 	adc.w	r3, r9, r3
 8006282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800629a:	460b      	mov	r3, r1
 800629c:	18db      	adds	r3, r3, r3
 800629e:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a0:	4613      	mov	r3, r2
 80062a2:	eb42 0303 	adc.w	r3, r2, r3
 80062a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062b0:	f7fa fc38 	bl	8000b24 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b61      	ldr	r3, [pc, #388]	@ (8006440 <UART_SetConfig+0x2d4>)
 80062ba:	fba3 2302 	umull	r2, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	011c      	lsls	r4, r3, #4
 80062c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	1891      	adds	r1, r2, r2
 80062da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062dc:	415b      	adcs	r3, r3
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062e4:	4641      	mov	r1, r8
 80062e6:	eb12 0a01 	adds.w	sl, r2, r1
 80062ea:	4649      	mov	r1, r9
 80062ec:	eb43 0b01 	adc.w	fp, r3, r1
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006304:	4692      	mov	sl, r2
 8006306:	469b      	mov	fp, r3
 8006308:	4643      	mov	r3, r8
 800630a:	eb1a 0303 	adds.w	r3, sl, r3
 800630e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006312:	464b      	mov	r3, r9
 8006314:	eb4b 0303 	adc.w	r3, fp, r3
 8006318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006328:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800632c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006330:	460b      	mov	r3, r1
 8006332:	18db      	adds	r3, r3, r3
 8006334:	643b      	str	r3, [r7, #64]	@ 0x40
 8006336:	4613      	mov	r3, r2
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006346:	f7fa fbed 	bl	8000b24 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4611      	mov	r1, r2
 8006350:	4b3b      	ldr	r3, [pc, #236]	@ (8006440 <UART_SetConfig+0x2d4>)
 8006352:	fba3 2301 	umull	r2, r3, r3, r1
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	2264      	movs	r2, #100	@ 0x64
 800635a:	fb02 f303 	mul.w	r3, r2, r3
 800635e:	1acb      	subs	r3, r1, r3
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006366:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <UART_SetConfig+0x2d4>)
 8006368:	fba3 2302 	umull	r2, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006374:	441c      	add	r4, r3
 8006376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637a:	2200      	movs	r2, #0
 800637c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006380:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006388:	4642      	mov	r2, r8
 800638a:	464b      	mov	r3, r9
 800638c:	1891      	adds	r1, r2, r2
 800638e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006390:	415b      	adcs	r3, r3
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006398:	4641      	mov	r1, r8
 800639a:	1851      	adds	r1, r2, r1
 800639c:	6339      	str	r1, [r7, #48]	@ 0x30
 800639e:	4649      	mov	r1, r9
 80063a0:	414b      	adcs	r3, r1
 80063a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063b0:	4659      	mov	r1, fp
 80063b2:	00cb      	lsls	r3, r1, #3
 80063b4:	4651      	mov	r1, sl
 80063b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ba:	4651      	mov	r1, sl
 80063bc:	00ca      	lsls	r2, r1, #3
 80063be:	4610      	mov	r0, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	4642      	mov	r2, r8
 80063c6:	189b      	adds	r3, r3, r2
 80063c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063cc:	464b      	mov	r3, r9
 80063ce:	460a      	mov	r2, r1
 80063d0:	eb42 0303 	adc.w	r3, r2, r3
 80063d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063ec:	460b      	mov	r3, r1
 80063ee:	18db      	adds	r3, r3, r3
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f2:	4613      	mov	r3, r2
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006402:	f7fa fb8f 	bl	8000b24 <__aeabi_uldivmod>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4b0d      	ldr	r3, [pc, #52]	@ (8006440 <UART_SetConfig+0x2d4>)
 800640c:	fba3 1302 	umull	r1, r3, r3, r2
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	2164      	movs	r1, #100	@ 0x64
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	3332      	adds	r3, #50	@ 0x32
 800641e:	4a08      	ldr	r2, [pc, #32]	@ (8006440 <UART_SetConfig+0x2d4>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	f003 0207 	and.w	r2, r3, #7
 800642a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4422      	add	r2, r4
 8006432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006434:	e106      	b.n	8006644 <UART_SetConfig+0x4d8>
 8006436:	bf00      	nop
 8006438:	40011000 	.word	0x40011000
 800643c:	40011400 	.word	0x40011400
 8006440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800644e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006456:	4642      	mov	r2, r8
 8006458:	464b      	mov	r3, r9
 800645a:	1891      	adds	r1, r2, r2
 800645c:	6239      	str	r1, [r7, #32]
 800645e:	415b      	adcs	r3, r3
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006466:	4641      	mov	r1, r8
 8006468:	1854      	adds	r4, r2, r1
 800646a:	4649      	mov	r1, r9
 800646c:	eb43 0501 	adc.w	r5, r3, r1
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	00eb      	lsls	r3, r5, #3
 800647a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800647e:	00e2      	lsls	r2, r4, #3
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	4643      	mov	r3, r8
 8006486:	18e3      	adds	r3, r4, r3
 8006488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800648c:	464b      	mov	r3, r9
 800648e:	eb45 0303 	adc.w	r3, r5, r3
 8006492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064b2:	4629      	mov	r1, r5
 80064b4:	008b      	lsls	r3, r1, #2
 80064b6:	4621      	mov	r1, r4
 80064b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064bc:	4621      	mov	r1, r4
 80064be:	008a      	lsls	r2, r1, #2
 80064c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064c4:	f7fa fb2e 	bl	8000b24 <__aeabi_uldivmod>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4b60      	ldr	r3, [pc, #384]	@ (8006650 <UART_SetConfig+0x4e4>)
 80064ce:	fba3 2302 	umull	r2, r3, r3, r2
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	011c      	lsls	r4, r3, #4
 80064d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	1891      	adds	r1, r2, r2
 80064ee:	61b9      	str	r1, [r7, #24]
 80064f0:	415b      	adcs	r3, r3
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f8:	4641      	mov	r1, r8
 80064fa:	1851      	adds	r1, r2, r1
 80064fc:	6139      	str	r1, [r7, #16]
 80064fe:	4649      	mov	r1, r9
 8006500:	414b      	adcs	r3, r1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006510:	4659      	mov	r1, fp
 8006512:	00cb      	lsls	r3, r1, #3
 8006514:	4651      	mov	r1, sl
 8006516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651a:	4651      	mov	r1, sl
 800651c:	00ca      	lsls	r2, r1, #3
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	4603      	mov	r3, r0
 8006524:	4642      	mov	r2, r8
 8006526:	189b      	adds	r3, r3, r2
 8006528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800652c:	464b      	mov	r3, r9
 800652e:	460a      	mov	r2, r1
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006542:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006550:	4649      	mov	r1, r9
 8006552:	008b      	lsls	r3, r1, #2
 8006554:	4641      	mov	r1, r8
 8006556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655a:	4641      	mov	r1, r8
 800655c:	008a      	lsls	r2, r1, #2
 800655e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006562:	f7fa fadf 	bl	8000b24 <__aeabi_uldivmod>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4611      	mov	r1, r2
 800656c:	4b38      	ldr	r3, [pc, #224]	@ (8006650 <UART_SetConfig+0x4e4>)
 800656e:	fba3 2301 	umull	r2, r3, r3, r1
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	2264      	movs	r2, #100	@ 0x64
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	1acb      	subs	r3, r1, r3
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	3332      	adds	r3, #50	@ 0x32
 8006580:	4a33      	ldr	r2, [pc, #204]	@ (8006650 <UART_SetConfig+0x4e4>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800658c:	441c      	add	r4, r3
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006592:	2200      	movs	r2, #0
 8006594:	673b      	str	r3, [r7, #112]	@ 0x70
 8006596:	677a      	str	r2, [r7, #116]	@ 0x74
 8006598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800659c:	4642      	mov	r2, r8
 800659e:	464b      	mov	r3, r9
 80065a0:	1891      	adds	r1, r2, r2
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	415b      	adcs	r3, r3
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ac:	4641      	mov	r1, r8
 80065ae:	1851      	adds	r1, r2, r1
 80065b0:	6039      	str	r1, [r7, #0]
 80065b2:	4649      	mov	r1, r9
 80065b4:	414b      	adcs	r3, r1
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065c4:	4659      	mov	r1, fp
 80065c6:	00cb      	lsls	r3, r1, #3
 80065c8:	4651      	mov	r1, sl
 80065ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ce:	4651      	mov	r1, sl
 80065d0:	00ca      	lsls	r2, r1, #3
 80065d2:	4610      	mov	r0, r2
 80065d4:	4619      	mov	r1, r3
 80065d6:	4603      	mov	r3, r0
 80065d8:	4642      	mov	r2, r8
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065de:	464b      	mov	r3, r9
 80065e0:	460a      	mov	r2, r1
 80065e2:	eb42 0303 	adc.w	r3, r2, r3
 80065e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006600:	4649      	mov	r1, r9
 8006602:	008b      	lsls	r3, r1, #2
 8006604:	4641      	mov	r1, r8
 8006606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660a:	4641      	mov	r1, r8
 800660c:	008a      	lsls	r2, r1, #2
 800660e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006612:	f7fa fa87 	bl	8000b24 <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <UART_SetConfig+0x4e4>)
 800661c:	fba3 1302 	umull	r1, r3, r3, r2
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	2164      	movs	r1, #100	@ 0x64
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	3332      	adds	r3, #50	@ 0x32
 800662e:	4a08      	ldr	r2, [pc, #32]	@ (8006650 <UART_SetConfig+0x4e4>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4422      	add	r2, r4
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	bf00      	nop
 8006646:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800664a:	46bd      	mov	sp, r7
 800664c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006650:	51eb851f 	.word	0x51eb851f

08006654 <memset>:
 8006654:	4402      	add	r2, r0
 8006656:	4603      	mov	r3, r0
 8006658:	4293      	cmp	r3, r2
 800665a:	d100      	bne.n	800665e <memset+0xa>
 800665c:	4770      	bx	lr
 800665e:	f803 1b01 	strb.w	r1, [r3], #1
 8006662:	e7f9      	b.n	8006658 <memset+0x4>

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4d0d      	ldr	r5, [pc, #52]	@ (800669c <__libc_init_array+0x38>)
 8006668:	4c0d      	ldr	r4, [pc, #52]	@ (80066a0 <__libc_init_array+0x3c>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	2600      	movs	r6, #0
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	4d0b      	ldr	r5, [pc, #44]	@ (80066a4 <__libc_init_array+0x40>)
 8006676:	4c0c      	ldr	r4, [pc, #48]	@ (80066a8 <__libc_init_array+0x44>)
 8006678:	f000 f858 	bl	800672c <_init>
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	2600      	movs	r6, #0
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	08006774 	.word	0x08006774
 80066a0:	08006774 	.word	0x08006774
 80066a4:	08006774 	.word	0x08006774
 80066a8:	08006778 	.word	0x08006778

080066ac <lrintf>:
 80066ac:	ee10 3a10 	vmov	r3, s0
 80066b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80066b4:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 80066b8:	281e      	cmp	r0, #30
 80066ba:	b082      	sub	sp, #8
 80066bc:	dc2f      	bgt.n	800671e <lrintf+0x72>
 80066be:	1c41      	adds	r1, r0, #1
 80066c0:	da02      	bge.n	80066c8 <lrintf+0x1c>
 80066c2:	2000      	movs	r0, #0
 80066c4:	b002      	add	sp, #8
 80066c6:	4770      	bx	lr
 80066c8:	2816      	cmp	r0, #22
 80066ca:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80066ce:	dd0a      	ble.n	80066e6 <lrintf+0x3a>
 80066d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066d8:	3a96      	subs	r2, #150	@ 0x96
 80066da:	fa03 f002 	lsl.w	r0, r3, r2
 80066de:	2900      	cmp	r1, #0
 80066e0:	d0f0      	beq.n	80066c4 <lrintf+0x18>
 80066e2:	4240      	negs	r0, r0
 80066e4:	e7ee      	b.n	80066c4 <lrintf+0x18>
 80066e6:	4b10      	ldr	r3, [pc, #64]	@ (8006728 <lrintf+0x7c>)
 80066e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80066ec:	ed93 7a00 	vldr	s14, [r3]
 80066f0:	ee37 0a00 	vadd.f32	s0, s14, s0
 80066f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80066f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80066fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006700:	ee17 3a90 	vmov	r3, s15
 8006704:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006708:	d0db      	beq.n	80066c2 <lrintf+0x16>
 800670a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800670e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006712:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006716:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800671a:	40d8      	lsrs	r0, r3
 800671c:	e7df      	b.n	80066de <lrintf+0x32>
 800671e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006722:	ee17 0a90 	vmov	r0, s15
 8006726:	e7cd      	b.n	80066c4 <lrintf+0x18>
 8006728:	08006764 	.word	0x08006764

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
